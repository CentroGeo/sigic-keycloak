{"version":3,"file":"RealmSection-CZO8bowW.js","sources":["../../../../../../../src/realm/add/NewRealmForm.tsx","../../../../../../../src/realm/RealmSection.tsx"],"sourcesContent":["import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  FormSubmitButton,\n  TextControl,\n  useAlerts,\n} from \"@keycloak/keycloak-ui-shared\";\nimport { Button, Modal } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { JsonFileUpload } from \"../../components/json-file-upload/JsonFileUpload\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { useWhoAmI } from \"../../context/whoami/WhoAmI\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../../util\";\nimport { toRealm } from \"../RealmRoutes\";\n\ntype NewRealmFormProps = {\n  onClose: () => void;\n};\n\nexport default function NewRealmForm({ onClose }: NewRealmFormProps) {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { refresh, whoAmI } = useWhoAmI();\n  const { addAlert, addError } = useAlerts();\n  const [realm, setRealm] = useState<RealmRepresentation>();\n\n  const form = useForm<RealmRepresentation>({\n    mode: \"onChange\",\n  });\n\n  const { handleSubmit, setValue, formState } = form;\n\n  const handleFileChange = (obj?: object) => {\n    const defaultRealm = { id: \"\", realm: \"\", enabled: true };\n    convertToFormValues(obj || defaultRealm, setValue);\n    setRealm(obj || defaultRealm);\n  };\n\n  const save = async (fields: RealmRepresentation) => {\n    try {\n      await adminClient.realms.create({\n        ...realm,\n        ...convertFormValuesToObject(fields),\n      });\n      addAlert(t(\"saveRealmSuccess\"));\n\n      refresh();\n      onClose();\n      navigate(toRealm({ realm: fields.realm! }));\n    } catch (error) {\n      addError(\"saveRealmError\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant=\"medium\"\n      title={t(\"createRealm\")}\n      description={t(\"realmExplain\")}\n      onClose={onClose}\n      isOpen\n      actions={[\n        <FormSubmitButton\n          form=\"realm-form\"\n          data-testid=\"create\"\n          formState={formState}\n          allowInvalid\n          allowNonDirty\n          key=\"confirm\"\n        >\n          {t(\"create\")}\n        </FormSubmitButton>,\n        <Button\n          variant=\"link\"\n          onClick={onClose}\n          key={\"cancel\"}\n          data-testid=\"cancel\"\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <FormProvider {...form}>\n        <FormAccess\n          id=\"realm-form\"\n          isHorizontal\n          onSubmit={handleSubmit(save)}\n          role=\"view-realm\"\n          isReadOnly={!whoAmI.canCreateRealm()}\n        >\n          <JsonFileUpload\n            id=\"kc-realm-filename\"\n            allowEditingUploadedText\n            onChange={handleFileChange}\n          />\n          <TextControl\n            name=\"realm\"\n            label={t(\"realmNameField\")}\n            rules={{ required: t(\"required\") }}\n          />\n          <DefaultSwitchControl\n            name=\"enabled\"\n            label={t(\"enabled\")}\n            defaultValue={true}\n          />\n        </FormAccess>\n      </FormProvider>\n    </Modal>\n  );\n}\n","import { NetworkError } from \"@keycloak/keycloak-admin-client\";\nimport { KeycloakDataTable, useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  Badge,\n  Button,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  MenuToggle,\n  PageSection,\n  Popover,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { EllipsisVIcon } from \"@patternfly/react-icons\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { fetchAdminUI } from \"../context/auth/admin-ui-endpoint\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useRecentRealms } from \"../context/RecentRealms\";\nimport { useWhoAmI } from \"../context/whoami/WhoAmI\";\nimport { translationFormatter } from \"../utils/translationFormatter\";\nimport NewRealmForm from \"./add/NewRealmForm\";\nimport { toRealm } from \"./RealmRoutes\";\nimport { toDashboard } from \"../dashboard/routes/Dashboard\";\n\nexport type RealmNameRepresentation = {\n  name: string;\n  displayName?: string;\n};\n\nconst RecentRealmsDropdown = () => {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n  const recentRealms = useRecentRealms();\n\n  if (recentRealms.length < 3) return null;\n  return (\n    <Dropdown\n      shouldFocusToggleOnSelect\n      onOpenChange={(isOpen) => setOpen(isOpen)}\n      toggle={(ref) => (\n        <MenuToggle\n          data-testid=\"kebab\"\n          aria-label=\"Kebab toggle\"\n          ref={ref}\n          onClick={() => setOpen(!open)}\n        >\n          {t(\"recentRealms\")}\n        </MenuToggle>\n      )}\n      isOpen={open}\n    >\n      <DropdownList>\n        {recentRealms.map(({ name }) => (\n          <DropdownItem\n            key=\"server info\"\n            component={(props) => (\n              <Link {...props} to={toDashboard({ realm: name })} />\n            )}\n          >\n            {name}\n          </DropdownItem>\n        ))}\n      </DropdownList>\n    </Dropdown>\n  );\n};\n\ntype KebabDropdownProps = {\n  onClick: () => void;\n  isDisabled?: boolean;\n};\n\nconst KebabDropdown = ({ onClick, isDisabled }: KebabDropdownProps) => {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n  return (\n    <Dropdown\n      shouldFocusToggleOnSelect\n      onOpenChange={(isOpen) => setOpen(isOpen)}\n      toggle={(ref) => (\n        <MenuToggle\n          data-testid=\"kebab\"\n          aria-label=\"Kebab toggle\"\n          ref={ref}\n          onClick={() => setOpen(!open)}\n          variant=\"plain\"\n          isDisabled={isDisabled}\n        >\n          <EllipsisVIcon />\n        </MenuToggle>\n      )}\n      isOpen={open}\n    >\n      <DropdownList>\n        <DropdownItem\n          data-testid=\"delete\"\n          onClick={() => {\n            setOpen(false);\n            onClick();\n          }}\n        >\n          {t(\"delete\")}\n        </DropdownItem>\n      </DropdownList>\n    </Dropdown>\n  );\n};\n\ntype RealmRow = RealmNameRepresentation & { id: string };\n\nexport default function RealmSection() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { whoAmI } = useWhoAmI();\n  const { realm } = useRealm();\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const [selected, setSelected] = useState<RealmRow[]>([]);\n  const [openNewRealm, setOpenNewRealm] = useState(false);\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    try {\n      const result = await fetchAdminUI<RealmNameRepresentation[]>(\n        adminClient,\n        \"ui-ext/realms/names\",\n        { first: `${first}`, max: `${max}`, search: search || \"\" },\n      );\n      return result.map((r) => ({ ...r, id: r.name }));\n    } catch (error) {\n      if (error instanceof NetworkError && error.response.status < 500) {\n        return [];\n      }\n\n      throw error;\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteConfirmRealm\", {\n      count: selected.length,\n      name: selected[0]?.name,\n    }),\n    messageKey: \"deleteConfirmRealmSetting\",\n    continueButtonLabel: \"delete\",\n    onConfirm: async () => {\n      try {\n        if (selected.filter(({ name }) => name === \"master\").length > 0) {\n          addAlert(t(\"cantDeleteMasterRealm\"), AlertVariant.warning);\n        }\n        const filtered = selected.filter(({ name }) => name !== \"master\");\n        if (filtered.length === 0) return;\n        await Promise.all(\n          filtered.map(({ name: realmName }) =>\n            adminClient.realms.del({ realm: realmName }),\n          ),\n        );\n        addAlert(t(\"deletedSuccessRealmSetting\"));\n        if (selected.filter(({ name }) => name === realm).length > 0) {\n          navigate(toRealm({ realm: \"master\" }));\n        }\n        refresh();\n        setSelected([]);\n      } catch (error) {\n        addError(\"deleteError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <DeleteConfirm />\n      {openNewRealm && (\n        <NewRealmForm\n          onClose={() => {\n            setOpenNewRealm(false);\n            refresh();\n          }}\n        />\n      )}\n      <ViewHeader titleKey=\"manageRealms\" divider={false} />\n      <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n        <KeycloakDataTable\n          key={key}\n          loader={loader}\n          isPaginated\n          onSelect={setSelected}\n          canSelectAll\n          ariaLabelKey=\"selectRealm\"\n          searchPlaceholderKey=\"search\"\n          actions={[\n            {\n              title: t(\"delete\"),\n              onRowClick: (selected) => {\n                setSelected([selected]);\n                toggleDeleteDialog();\n              },\n            },\n          ]}\n          toolbarItem={\n            <>\n              <ToolbarItem>\n                {whoAmI.canCreateRealm() && (\n                  <Button\n                    onClick={() => setOpenNewRealm(true)}\n                    data-testid=\"add-realm\"\n                  >\n                    {t(\"createRealm\")}\n                  </Button>\n                )}\n              </ToolbarItem>\n              <ToolbarItem>\n                <RecentRealmsDropdown />\n              </ToolbarItem>\n              <ToolbarItem>\n                <KebabDropdown\n                  onClick={toggleDeleteDialog}\n                  isDisabled={selected.length === 0}\n                />\n              </ToolbarItem>\n            </>\n          }\n          columns={[\n            {\n              name: \"name\",\n              transforms: [cellWidth(20)],\n              cellRenderer: ({ name }) =>\n                name !== realm ? (\n                  <Link to={toDashboard({ realm: name })}>{name}</Link>\n                ) : (\n                  <Popover\n                    bodyContent={t(\"currentRealmExplain\")}\n                    triggerAction=\"hover\"\n                  >\n                    <>\n                      {name} <Badge isRead>{t(\"currentRealm\")}</Badge>\n                    </>\n                  </Popover>\n                ),\n            },\n            {\n              name: \"displayName\",\n              transforms: [cellWidth(80)],\n              cellFormatters: [translationFormatter(t)],\n            },\n          ]}\n        />\n      </PageSection>\n    </>\n  );\n}\n"],"names":["NewRealmForm","onClose","adminClient","useAdminClient","t","useTranslation","navigate","useNavigate","refresh","whoAmI","useWhoAmI","addAlert","addError","useAlerts","realm","setRealm","useState","form","useForm","handleSubmit","setValue","formState","handleFileChange","obj","defaultRealm","convertToFormValues","save","fields","convertFormValuesToObject","toRealm","error","jsx","Modal","FormSubmitButton","Button","FormProvider","jsxs","FormAccess","JsonFileUpload","TextControl","DefaultSwitchControl","RecentRealmsDropdown","open","setOpen","recentRealms","useRecentRealms","Dropdown","isOpen","ref","MenuToggle","DropdownList","name","DropdownItem","props","Link","toDashboard","KebabDropdown","onClick","isDisabled","EllipsisVIcon","RealmSection","useRealm","selected","setSelected","openNewRealm","setOpenNewRealm","key","setKey","loader","first","max","search","fetchAdminUI","r","NetworkError","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","AlertVariant","filtered","realmName","Fragment","ViewHeader","PageSection","KeycloakDataTable","ToolbarItem","cellWidth","Popover","Badge","translationFormatter"],"mappings":"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"}