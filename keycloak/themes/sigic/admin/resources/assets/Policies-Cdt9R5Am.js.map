{"version":3,"file":"Policies-Cdt9R5Am.js","sources":["../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.14_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelHeader.js","../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.14_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/Text/TextList.js","../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.14_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/Text/TextListItem.js","../../../../../../../src/clients/authorization/DetailDescription.tsx","../../../../../../../src/clients/authorization/MoreLabel.tsx","../../../../../../../src/clients/authorization/SearchDropdown.tsx","../../../../../../../src/clients/authorization/Policies.tsx"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Panel/panel.mjs';\nimport { css } from '@patternfly/react-styles';\nexport const PanelHeader = (_a) => {\n    var { className, children } = _a, props = __rest(_a, [\"className\", \"children\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.panelHeader, className) }, props), children));\n};\nPanelHeader.displayName = 'PanelHeader';\n//# sourceMappingURL=PanelHeader.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Content/content.mjs';\nimport { css } from '@patternfly/react-styles';\nexport var TextListVariants;\n(function (TextListVariants) {\n    TextListVariants[\"ul\"] = \"ul\";\n    TextListVariants[\"ol\"] = \"ol\";\n    TextListVariants[\"dl\"] = \"dl\";\n})(TextListVariants || (TextListVariants = {}));\nexport const TextList = (_a) => {\n    var { children = null, className = '', component = TextListVariants.ul, isPlain = false } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"isPlain\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { className: css(isPlain && styles.modifiers.plain, className) }), children));\n};\nTextList.displayName = 'TextList';\n//# sourceMappingURL=TextList.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nexport var TextListItemVariants;\n(function (TextListItemVariants) {\n    TextListItemVariants[\"li\"] = \"li\";\n    TextListItemVariants[\"dt\"] = \"dt\";\n    TextListItemVariants[\"dd\"] = \"dd\";\n})(TextListItemVariants || (TextListItemVariants = {}));\nexport const TextListItem = (_a) => {\n    var { children = null, className = '', component = TextListItemVariants.li } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { className: css(className) }), children));\n};\nTextListItem.displayName = 'TextListItem';\n//# sourceMappingURL=TextListItem.js.map","import {\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, Path } from \"react-router-dom\";\n\ntype DetailDescriptionProps<T> = {\n  name: string;\n  array?: string[] | T[];\n  convert?: (obj: T) => string;\n};\n\nexport function DetailDescription<T>(props: DetailDescriptionProps<T>) {\n  return <DetailDescriptionLink {...props} />;\n}\n\ntype DetailDescriptionLinkProps<T> = DetailDescriptionProps<T> & {\n  link?: (element: T) => Partial<Path>;\n};\n\nexport function DetailDescriptionLink<T>({\n  name,\n  array,\n  convert,\n  link,\n}: DetailDescriptionLinkProps<T>) {\n  const { t } = useTranslation();\n  return (\n    <DescriptionListGroup>\n      <DescriptionListTerm>{t(name)}</DescriptionListTerm>\n      <DescriptionListDescription>\n        {array?.map((element) => {\n          const value =\n            typeof element === \"string\" ? element : convert!(element);\n          return link ? (\n            <Link key={value} to={link(element as T)} className=\"pf-v5-u-pr-sm\">\n              {value}\n            </Link>\n          ) : (\n            <span key={value} className=\"pf-v5-u-pr-sm\">\n              {value}\n            </span>\n          );\n        })}\n        {array?.length === 0 && <i>{t(\"none\")}</i>}\n      </DescriptionListDescription>\n    </DescriptionListGroup>\n  );\n}\n","import { useTranslation } from \"react-i18next\";\nimport { Label } from \"@patternfly/react-core\";\n\ntype MoreLabelProps = {\n  array: unknown[] | undefined;\n};\n\nexport const MoreLabel = ({ array }: MoreLabelProps) => {\n  const { t } = useTranslation();\n\n  if (!array || array.length <= 1) {\n    return null;\n  }\n  return <Label color=\"blue\">{t(\"more\", { count: array.length - 1 })}</Label>;\n};\n","import type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport { SelectControl, TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Button,\n  Dropdown,\n  Form,\n  MenuToggle,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport useToggle from \"../../utils/useToggle\";\n\nimport \"./search-dropdown.css\";\n\nexport type SearchForm = {\n  name?: string;\n  resource?: string;\n  scope?: string;\n  type?: string;\n  uri?: string;\n  owner?: string;\n};\n\ntype SearchDropdownProps = {\n  types?: PolicyProviderRepresentation[] | PolicyProviderRepresentation[];\n  search: SearchForm;\n  onSearch: (form: SearchForm) => void;\n  type: \"resource\" | \"policy\" | \"permission\";\n};\n\nexport const SearchDropdown = ({\n  types,\n  search,\n  onSearch,\n  type,\n}: SearchDropdownProps) => {\n  const { t } = useTranslation();\n  const form = useForm<SearchForm>({ mode: \"onChange\" });\n  const {\n    reset,\n    formState: { isDirty },\n    handleSubmit,\n  } = form;\n\n  const [open, toggle] = useToggle();\n\n  const submit = (form: SearchForm) => {\n    toggle();\n    onSearch(form);\n  };\n\n  useEffect(() => reset(search), [search]);\n\n  return (\n    <Dropdown\n      onOpenChange={toggle}\n      toggle={(ref) => (\n        <MenuToggle\n          data-testid=\"searchdropdown_dorpdown\"\n          ref={ref}\n          onClick={toggle}\n          className=\"keycloak__client_authentication__searchdropdown\"\n        >\n          {type === \"resource\" && t(\"searchClientAuthorizationResource\")}\n          {type === \"policy\" && t(\"searchClientAuthorizationPolicy\")}\n          {type === \"permission\" && t(\"searchClientAuthorizationPermission\")}\n        </MenuToggle>\n      )}\n      isOpen={open}\n    >\n      <FormProvider {...form}>\n        <Form\n          isHorizontal\n          className=\"keycloak__client_authentication__searchdropdown_form\"\n          onSubmit={handleSubmit(submit)}\n        >\n          <TextControl name=\"name\" label={t(\"name\")} />\n          {type === \"resource\" && (\n            <>\n              <TextControl name=\"type\" label={t(\"type\")} />\n              <TextControl name=\"uris\" label={t(\"uris\")} />\n              <TextControl name=\"owner\" label={t(\"owner\")} />\n            </>\n          )}\n          {type !== \"resource\" && type !== \"policy\" && (\n            <TextControl name=\"resource\" label={t(\"resource\")} />\n          )}\n          {type !== \"policy\" && <TextControl name=\"scope\" label={t(\"scope\")} />}\n          {type !== \"resource\" && (\n            <SelectControl\n              name=\"type\"\n              label={t(\"type\")}\n              controller={{\n                defaultValue: \"\",\n              }}\n              options={[\n                { key: \"\", value: t(\"allTypes\") },\n                ...(types || []).map(({ type, name }) => ({\n                  key: type!,\n                  value: name!,\n                })),\n              ]}\n            />\n          )}\n          <ActionGroup>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"search-btn\"\n              isDisabled={!isDirty}\n            >\n              {t(\"search\")}\n            </Button>\n            <Button\n              variant=\"link\"\n              data-testid=\"revert-btn\"\n              onClick={() => onSearch({})}\n            >\n              {t(\"clear\")}\n            </Button>\n          </ActionGroup>\n        </Form>\n      </FormProvider>\n    </Dropdown>\n  );\n};\n","import type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport {\n  ListEmptyState,\n  PaginatingTableToolbar,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  DescriptionList,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toUpperCase } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toCreatePolicy } from \"../routes/NewPolicy\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\nimport { DetailDescriptionLink } from \"./DetailDescription\";\nimport { MoreLabel } from \"./MoreLabel\";\nimport { NewPolicyDialog } from \"./NewPolicyDialog\";\nimport { SearchDropdown, SearchForm } from \"./SearchDropdown\";\nimport { useIsAdminPermissionsClient } from \"../../utils/useIsAdminPermissionsClient\";\nimport { toCreatePermissionPolicy } from \"../../permissions-configuration/routes/NewPermissionPolicy\";\nimport { toPermissionPolicyDetails } from \"../../permissions-configuration/routes/PermissionPolicyDetails\";\n\ntype PoliciesProps = {\n  clientId: string;\n  isDisabled?: boolean;\n};\n\ntype ExpandablePolicyRepresentation = PolicyRepresentation & {\n  dependentPolicies?: PolicyRepresentation[];\n  isExpanded: boolean;\n};\n\nconst DependentPoliciesRenderer = ({\n  row,\n}: {\n  row: ExpandablePolicyRepresentation;\n}) => {\n  return (\n    <>\n      {row.dependentPolicies?.[0]?.name}{\" \"}\n      <MoreLabel array={row.dependentPolicies} />\n    </>\n  );\n};\n\nexport const AuthorizationPolicies = ({\n  clientId,\n  isDisabled = false,\n}: PoliciesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n\n  const [policies, setPolicies] = useState<ExpandablePolicyRepresentation[]>();\n  const [selectedPolicy, setSelectedPolicy] =\n    useState<ExpandablePolicyRepresentation>();\n  const [policyProviders, setPolicyProviders] =\n    useState<PolicyProviderRepresentation[]>();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [search, setSearch] = useState<SearchForm>({});\n  const [newDialog, toggleDialog] = useToggle();\n  const isAdminPermissionsClient = useIsAdminPermissionsClient(clientId);\n\n  useFetch(\n    async () => {\n      const policies = await adminClient.clients.listPolicies({\n        first,\n        max: max + 1,\n        id: clientId,\n        permission: \"false\",\n        ...search,\n      });\n\n      return await Promise.all([\n        adminClient.clients.listPolicyProviders({ id: clientId }),\n        ...(policies || []).map(async (policy) => {\n          const dependentPolicies =\n            await adminClient.clients.listDependentPolicies({\n              id: clientId,\n              policyId: policy.id!,\n            });\n\n          return {\n            ...policy,\n            dependentPolicies,\n            isExpanded: false,\n          };\n        }),\n      ]);\n    },\n    ([providers, ...policies]) => {\n      setPolicyProviders(\n        providers.filter((p) => p.type !== \"resource\" && p.type !== \"scope\"),\n      );\n      setPolicies(policies);\n    },\n    [key, search, first, max],\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deletePolicy\",\n    children: (\n      <>\n        {t(\"deletePolicyConfirm\")}\n        {selectedPolicy?.dependentPolicies &&\n          selectedPolicy.dependentPolicies.length > 0 && (\n            <Alert\n              variant=\"warning\"\n              isInline\n              isPlain\n              component=\"p\"\n              title={t(\"deletePolicyWarning\")}\n              className=\"pf-v5-u-pt-lg\"\n            >\n              <p className=\"pf-v5-u-pt-xs\">\n                {selectedPolicy.dependentPolicies.map((policy) => (\n                  <strong key={policy.id} className=\"pf-v5-u-pr-md\">\n                    {policy.name}\n                  </strong>\n                ))}\n              </p>\n            </Alert>\n          )}\n      </>\n    ),\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delPolicy({\n          id: clientId,\n          policyId: selectedPolicy?.id!,\n        });\n        addAlert(t(\"policyDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"policyDeletedError\", error);\n      }\n    },\n  });\n\n  if (!policies) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = policies.length === 0;\n  const searching = Object.keys(search).length !== 0;\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      <DeleteConfirm />\n      {(!noData || searching) && (\n        <>\n          {newDialog && (\n            <NewPolicyDialog\n              policyProviders={policyProviders}\n              onSelect={(p) =>\n                navigate(\n                  isAdminPermissionsClient\n                    ? toCreatePermissionPolicy({\n                        realm,\n                        permissionClientId: clientId,\n                        policyType: p.type!,\n                      })\n                    : toCreatePolicy({\n                        id: clientId,\n                        realm,\n                        policyType: p.type!,\n                      }),\n                )\n              }\n              toggleDialog={toggleDialog}\n            />\n          )}\n          <PaginatingTableToolbar\n            count={policies.length}\n            first={first}\n            max={max}\n            onNextClick={setFirst}\n            onPreviousClick={setFirst}\n            onPerPageSelect={(first, max) => {\n              setFirst(first);\n              setMax(max);\n            }}\n            toolbarItem={\n              <>\n                <ToolbarItem>\n                  <SearchDropdown\n                    types={policyProviders}\n                    search={search}\n                    onSearch={setSearch}\n                    type=\"policy\"\n                  />\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button\n                    data-testid=\"createPolicy\"\n                    onClick={() => {\n                      toggleDialog();\n                    }}\n                    isDisabled={isDisabled}\n                  >\n                    {isAdminPermissionsClient\n                      ? t(\"createPermissionPolicy\")\n                      : t(\"createPolicy\")}\n                  </Button>\n                </ToolbarItem>\n              </>\n            }\n          >\n            {!noData && (\n              <Table aria-label={t(\"resources\")} variant=\"compact\">\n                <Thead>\n                  <Tr>\n                    <Th aria-hidden=\"true\" />\n                    <Th>{t(\"name\")}</Th>\n                    <Th>{t(\"type\")}</Th>\n                    <Th>{t(\"dependentPermission\")}</Th>\n                    <Th>{t(\"description\")}</Th>\n                    <Th aria-hidden=\"true\" />\n                  </Tr>\n                </Thead>\n                {policies.map((policy, rowIndex) => (\n                  <Tbody key={policy.id} isExpanded={policy.isExpanded}>\n                    <Tr>\n                      <Td\n                        expand={{\n                          rowIndex,\n                          isExpanded: policy.isExpanded,\n                          onToggle: (_, rowIndex) => {\n                            const rows = policies.map((policy, index) =>\n                              index === rowIndex\n                                ? { ...policy, isExpanded: !policy.isExpanded }\n                                : policy,\n                            );\n                            setPolicies(rows);\n                          },\n                        }}\n                      />\n                      <Td data-testid={`name-column-${policy.name}`}>\n                        {isAdminPermissionsClient ? (\n                          <Link\n                            to={toPermissionPolicyDetails({\n                              realm,\n                              permissionClientId: clientId,\n                              policyId: policy.id!,\n                              policyType: policy.type!,\n                            })}\n                          >\n                            {policy.name}\n                          </Link>\n                        ) : (\n                          <Link\n                            to={toPolicyDetails({\n                              realm,\n                              id: clientId,\n                              policyType: policy.type!,\n                              policyId: policy.id!,\n                            })}\n                          >\n                            {policy.name}\n                          </Link>\n                        )}\n                      </Td>\n                      <Td>{toUpperCase(policy.type!)}</Td>\n                      <Td>\n                        <DependentPoliciesRenderer row={policy} />\n                      </Td>\n                      <Td>{policy.description}</Td>\n                      {!isDisabled && (\n                        <Td\n                          actions={{\n                            items: [\n                              {\n                                title: t(\"delete\"),\n                                onClick: () => {\n                                  setSelectedPolicy(policy);\n                                  toggleDeleteDialog();\n                                },\n                              },\n                            ],\n                          }}\n                        />\n                      )}\n                    </Tr>\n                    <Tr\n                      key={`child-${policy.id}`}\n                      isExpanded={policy.isExpanded}\n                    >\n                      <Td />\n                      <Td colSpan={3 + (isDisabled ? 0 : 1)}>\n                        <ExpandableRowContent>\n                          {policy.isExpanded && !isAdminPermissionsClient && (\n                            <DescriptionList\n                              isHorizontal\n                              className=\"keycloak_resource_details\"\n                            >\n                              <DetailDescriptionLink\n                                name=\"dependentPermission\"\n                                array={policy.dependentPolicies}\n                                convert={(p) => p.name!}\n                                link={(permission) =>\n                                  toPermissionDetails({\n                                    realm,\n                                    id: clientId,\n                                    permissionId: permission.id!,\n                                    permissionType: permission.type!,\n                                  })\n                                }\n                              />\n                            </DescriptionList>\n                          )}\n                          {policy.isExpanded && isAdminPermissionsClient && (\n                            <>\n                              <Th>{t(\"dependentPermission\")}</Th>\n                              {policy.dependentPolicies!.map(\n                                (dependentPolicy, index) => (\n                                  <Td key={index}>\n                                    <span style={{ marginLeft: \"8px\" }}>\n                                      {dependentPolicy.name}\n                                    </span>\n                                  </Td>\n                                ),\n                              )}\n                            </>\n                          )}\n                        </ExpandableRowContent>\n                      </Td>\n                    </Tr>\n                  </Tbody>\n                ))}\n              </Table>\n            )}\n          </PaginatingTableToolbar>\n        </>\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          isDisabled={isDisabled}\n          message={t(\"noSearchResults\")}\n          instructions={t(\"noSearchResultsInstructions\")}\n        />\n      )}\n      {noData && !searching && (\n        <>\n          {newDialog && (\n            <NewPolicyDialog\n              policyProviders={policyProviders?.filter(\n                (p) => p.type !== \"aggregate\",\n              )}\n              onSelect={(p) =>\n                navigate(\n                  isAdminPermissionsClient\n                    ? toCreatePermissionPolicy({\n                        realm,\n                        permissionClientId: clientId,\n                        policyType: p.type!,\n                      })\n                    : toCreatePolicy({\n                        id: clientId,\n                        realm,\n                        policyType: p.type!,\n                      }),\n                )\n              }\n              toggleDialog={toggleDialog}\n            />\n          )}\n          <ListEmptyState\n            message={t(\"emptyPolicies\")}\n            instructions={\n              isAdminPermissionsClient\n                ? t(\"emptyPermissionPoliciesInstructions\")\n                : t(\"emptyPoliciesInstructions\")\n            }\n            isDisabled={isDisabled}\n            primaryActionText={\n              isAdminPermissionsClient\n                ? t(\"createPermissionPolicy\")\n                : t(\"createPolicy\")\n            }\n            onPrimaryAction={() => toggleDialog()}\n          />\n        </>\n      )}\n    </PageSection>\n  );\n};\n"],"names":["PanelHeader","_a","className","children","props","__rest","React","css","styles","TextListVariants","TextList","component","isPlain","Component","TextListItemVariants","TextListItem","DetailDescription","jsx","DetailDescriptionLink","name","array","convert","link","t","useTranslation","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","element","value","Link","MoreLabel","Label","SearchDropdown","types","search","onSearch","type","form","useForm","reset","isDirty","handleSubmit","open","toggle","useToggle","submit","useEffect","Dropdown","ref","jsxs","MenuToggle","FormProvider","Form","TextControl","Fragment","SelectControl","ActionGroup","Button","DependentPoliciesRenderer","row","AuthorizationPolicies","clientId","isDisabled","adminClient","useAdminClient","addAlert","addError","useAlerts","realm","useRealm","navigate","useNavigate","policies","setPolicies","useState","selectedPolicy","setSelectedPolicy","policyProviders","setPolicyProviders","key","setKey","refresh","max","setMax","first","setFirst","setSearch","newDialog","toggleDialog","isAdminPermissionsClient","useIsAdminPermissionsClient","useFetch","policy","dependentPolicies","providers","p","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","Alert","AlertVariant","error","KeycloakSpinner","noData","searching","PageSection","NewPolicyDialog","toCreatePermissionPolicy","toCreatePolicy","PaginatingTableToolbar","ToolbarItem","Table","Thead","Tr","Th","rowIndex","Tbody","Td","_","rows","index","toPermissionPolicyDetails","toPolicyDetails","toUpperCase","ExpandableRowContent","DescriptionList","permission","toPermissionDetails","dependentPolicy","ListEmptyState"],"mappings":"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","x_google_ignoreList":[0,1,2]}