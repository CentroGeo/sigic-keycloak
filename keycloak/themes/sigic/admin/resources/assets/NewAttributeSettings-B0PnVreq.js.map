{"version":3,"file":"NewAttributeSettings-B0PnVreq.js","sources":["../../../../../../../src/realm-settings/user-profile/attribute/AttributeAnnotations.tsx","../../../../../../../src/realm-settings/user-profile/attribute/AttributeGeneralSettings.tsx","../../../../../../../src/realm-settings/user-profile/attribute/AttributePermission.tsx","../../../../../../../src/realm-settings/user-profile/attribute/ValidatorSelect.tsx","../../../../../../../src/realm-settings/user-profile/attribute/AddValidatorDialog.tsx","../../../../../../../src/realm-settings/user-profile/attribute/AttributeValidations.tsx","../../../../../../../src/realm-settings/NewAttributeSettings.tsx"],"sourcesContent":["import { useTranslation } from \"react-i18next\";\nimport { FormGroup, Grid, GridItem } from \"@patternfly/react-core\";\n\nimport { FormAccess } from \"../../../components/form/FormAccess\";\nimport { KeyValueInput } from \"../../../components/key-value-form/KeyValueInput\";\n\nimport \"../../realm-settings-section.css\";\n\nexport const AttributeAnnotations = () => {\n  const { t } = useTranslation();\n\n  return (\n    <FormAccess role=\"manage-realm\" isHorizontal>\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"annotations\")}\n        fieldId=\"kc-annotations\"\n        className=\"kc-annotations-label\"\n      >\n        <Grid className=\"kc-annotations\">\n          <GridItem>\n            <KeyValueInput\n              name=\"annotations\"\n              label={t(\"annotations\")}\n              defaultKeyValue={[\n                {\n                  key: \"inputType\",\n                  label: t(\"inputType\"),\n                  values: [\n                    \"text\",\n                    \"textarea\",\n                    \"select\",\n                    \"select-radiobuttons\",\n                    \"multiselect\",\n                    \"multiselect-checkboxes\",\n                    \"html5-email\",\n                    \"html5-tel\",\n                    \"html5-url\",\n                    \"html5-number\",\n                    \"html5-range\",\n                    \"html5-datetime-local\",\n                    \"html5-date\",\n                    \"html5-month\",\n                    \"html5-week\",\n                    \"html5-time\",\n                  ],\n                },\n                {\n                  key: \"inputHelperTextBefore\",\n                  label: t(\"inputHelperTextBefore\"),\n                },\n                {\n                  key: \"inputHelperTextAfter\",\n                  label: t(\"inputHelperTextAfter\"),\n                },\n                {\n                  key: \"inputOptionLabelsI18nPrefix\",\n                  label: t(\"inputOptionLabelsI18nPrefix\"),\n                },\n                {\n                  key: \"inputTypePlaceholder\",\n                  label: t(\"inputTypePlaceholder\"),\n                },\n                {\n                  key: \"inputTypeSize\",\n                  label: t(\"inputTypeSize\"),\n                },\n                {\n                  key: \"inputTypeCols\",\n                  label: t(\"inputTypeCols\"),\n                },\n                {\n                  key: \"inputTypeRows\",\n                  label: t(\"inputTypeRows\"),\n                },\n                {\n                  key: \"inputTypeStep\",\n                  label: t(\"inputTypeStep\"),\n                },\n                {\n                  key: \"kcNumberFormat\",\n                  label: t(\"kcNumberFormat\"),\n                },\n                {\n                  key: \"kcNumberUnFormat\",\n                  label: t(\"kcNumberUnFormat\"),\n                },\n              ]}\n            />\n          </GridItem>\n        </Grid>\n      </FormGroup>\n    </FormAccess>\n  );\n};\n","import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport type { UserProfileConfig } from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport {\n  HelpItem,\n  KeycloakSelect,\n  KeycloakSpinner,\n  SelectControl,\n  SelectVariant,\n  TextControl,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Divider,\n  FormGroup,\n  Radio,\n  SelectOption,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { isEqual } from \"lodash-es\";\nimport { useState } from \"react\";\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  useWatch,\n} from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../../admin-client\";\nimport { FormAccess } from \"../../../components/form/FormAccess\";\nimport { DefaultSwitchControl } from \"../../../components/SwitchControl\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { USERNAME_EMAIL } from \"../../NewAttributeSettings\";\nimport { AttributeParams } from \"../../routes/Attribute\";\nimport { TranslatableField } from \"./TranslatableField\";\n\nimport \"../../realm-settings-section.css\";\nimport useLocaleSort, { mapByKey } from \"../../../utils/useLocaleSort\";\n\nconst REQUIRED_FOR = [\n  { label: \"requiredForLabel.both\", value: [\"admin\", \"user\"] },\n  { label: \"requiredForLabel.users\", value: [\"user\"] },\n  { label: \"requiredForLabel.admins\", value: [\"admin\"] },\n] as const;\n\nexport const AttributeGeneralSettings = () => {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation();\n  const form = useFormContext();\n  const [clientScopes, setClientScopes] =\n    useState<ClientScopeRepresentation[]>();\n  const [config, setConfig] = useState<UserProfileConfig>();\n  const [selectEnabledWhenOpen, setSelectEnabledWhenOpen] = useState(false);\n  const [selectRequiredForOpen, setSelectRequiredForOpen] = useState(false);\n\n  const [enabledWhenSearch, setEnableWhenSearch] = useState(\"\");\n  const localeSort = useLocaleSort();\n\n  const { attributeName } = useParams<AttributeParams>();\n  const editMode = attributeName ? true : false;\n\n  const hasSelector = useWatch({\n    control: form.control,\n    name: \"hasSelector\",\n  });\n\n  const hasRequiredScopes = useWatch({\n    control: form.control,\n    name: \"hasRequiredScopes\",\n  });\n\n  const required = useWatch({\n    control: form.control,\n    name: \"isRequired\",\n    defaultValue: false,\n  });\n\n  useFetch(() => adminClient.clientScopes.find(), setClientScopes, []);\n  useFetch(() => adminClient.users.getProfile(), setConfig, []);\n\n  if (!clientScopes) {\n    return <KeycloakSpinner />;\n  }\n\n  function setHasSelector(hasSelector: boolean) {\n    form.setValue(\"hasSelector\", hasSelector);\n  }\n\n  function setHasRequiredScopes(hasRequiredScopes: boolean) {\n    form.setValue(\"hasRequiredScopes\", hasRequiredScopes);\n  }\n\n  const items = () =>\n    localeSort(clientScopes, mapByKey(\"name\"))\n      .filter(\n        (s) => enabledWhenSearch === \"\" || s.name?.includes(enabledWhenSearch),\n      )\n      .map((option) => (\n        <SelectOption key={option.name} value={option.name}>\n          {option.name}\n        </SelectOption>\n      ));\n\n  return (\n    <FormProvider {...form}>\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <TextControl\n          name=\"name\"\n          label={t(\"attributeName\")}\n          labelIcon={t(\"upAttributeNameHelp\")}\n          isDisabled={editMode}\n          rules={{\n            required: t(\"validateAttributeName\"),\n          }}\n        />\n        <FormGroup\n          label={t(\"attributeDisplayName\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"attributeDisplayNameHelp\")}\n              fieldLabelId=\"attributeDisplayName\"\n            />\n          }\n          fieldId=\"kc-attribute-displayName\"\n        >\n          <TranslatableField\n            attributeName=\"name\"\n            prefix=\"profile.attributes\"\n            fieldName=\"displayName\"\n          />\n        </FormGroup>\n        <DefaultSwitchControl\n          name=\"multivalued\"\n          label={t(\"multivalued\")}\n          labelIcon={t(\"multivaluedHelp\")}\n        />\n        <SelectControl\n          name=\"group\"\n          label={t(\"attributeGroup\")}\n          labelIcon={t(\"attributeGroupHelp\")}\n          controller={{\n            defaultValue: \"\",\n          }}\n          options={[\n            { key: \"\", value: t(\"none\") },\n            ...(config?.groups?.map((g) => ({\n              key: g.name!,\n              value: g.name!,\n            })) || []),\n          ]}\n        />\n        {!USERNAME_EMAIL.includes(attributeName) && (\n          <>\n            <Divider />\n            <FormGroup\n              label={t(\"enabledWhen\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"enabledWhenTooltip\")}\n                  fieldLabelId=\"enabled-when\"\n                />\n              }\n              fieldId=\"enabledWhen\"\n              hasNoPaddingTop\n            >\n              <Radio\n                id=\"always\"\n                data-testid=\"always\"\n                isChecked={!hasSelector}\n                name=\"enabledWhen\"\n                label={t(\"always\")}\n                onChange={() => setHasSelector(false)}\n                className=\"pf-v5-u-mb-md\"\n              />\n              <Radio\n                id=\"scopesAsRequested\"\n                data-testid=\"scopesAsRequested\"\n                isChecked={hasSelector}\n                name=\"enabledWhen\"\n                label={t(\"scopesAsRequested\")}\n                onChange={() => setHasSelector(true)}\n                className=\"pf-v5-u-mb-md\"\n              />\n            </FormGroup>\n            {hasSelector && (\n              <FormGroup fieldId=\"kc-scope-enabled-when\">\n                <Controller\n                  name=\"selector.scopes\"\n                  control={form.control}\n                  defaultValue={[]}\n                  render={({ field }) => (\n                    <KeycloakSelect\n                      data-testid=\"enabled-when-scope-field\"\n                      variant={SelectVariant.typeaheadMulti}\n                      onFilter={(value) => {\n                        setEnableWhenSearch(value);\n                        return items();\n                      }}\n                      typeAheadAriaLabel=\"Select\"\n                      chipGroupProps={{\n                        numChips: 3,\n                        expandedText: t(\"hide\"),\n                        collapsedText: t(\"showRemaining\"),\n                      }}\n                      onToggle={(isOpen) => setSelectEnabledWhenOpen(isOpen)}\n                      selections={field.value}\n                      onSelect={(selectedValue) => {\n                        const option = selectedValue.toString();\n                        let changedValue = [\"\"];\n                        if (field.value) {\n                          changedValue = field.value.includes(option)\n                            ? field.value.filter(\n                                (item: string) => item !== option,\n                              )\n                            : [...field.value, option];\n                        } else {\n                          changedValue = [option];\n                        }\n\n                        field.onChange(changedValue);\n                      }}\n                      onClear={() => {\n                        field.onChange([]);\n                      }}\n                      isOpen={selectEnabledWhenOpen}\n                      aria-labelledby={\"scope\"}\n                    >\n                      {items()}\n                    </KeycloakSelect>\n                  )}\n                />\n              </FormGroup>\n            )}\n          </>\n        )}\n        {attributeName !== \"username\" && (\n          <>\n            <Divider />\n            <FormGroup\n              label={t(\"required\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"requiredHelp\")}\n                  fieldLabelId=\"required\"\n                />\n              }\n              fieldId=\"kc-required\"\n              hasNoPaddingTop\n            >\n              <Controller\n                name=\"isRequired\"\n                data-testid=\"required\"\n                defaultValue={false}\n                control={form.control}\n                render={({ field }) => (\n                  <Switch\n                    id={\"kc-required\"}\n                    onChange={field.onChange}\n                    isChecked={field.value}\n                    label={t(\"on\")}\n                    labelOff={t(\"off\")}\n                    aria-label={t(\"required\")}\n                  />\n                )}\n              />\n            </FormGroup>\n            {required && (\n              <>\n                <FormGroup\n                  label={t(\"requiredFor\")}\n                  fieldId=\"requiredFor\"\n                  hasNoPaddingTop\n                >\n                  <Controller\n                    name=\"required.roles\"\n                    data-testid=\"requiredFor\"\n                    defaultValue={REQUIRED_FOR[0].value}\n                    control={form.control}\n                    render={({ field }) => (\n                      <div className=\"kc-requiredFor\">\n                        {REQUIRED_FOR.map((option) => (\n                          <Radio\n                            id={option.label}\n                            key={option.label}\n                            data-testid={option.label}\n                            isChecked={isEqual(field.value, option.value)}\n                            name=\"roles\"\n                            onChange={() => {\n                              field.onChange(option.value);\n                            }}\n                            label={t(option.label)}\n                            className=\"kc-requiredFor-option\"\n                          />\n                        ))}\n                      </div>\n                    )}\n                  />\n                </FormGroup>\n                <FormGroup\n                  label={t(\"requiredWhen\")}\n                  labelIcon={\n                    <HelpItem\n                      helpText={t(\"requiredWhenTooltip\")}\n                      fieldLabelId=\"required-when\"\n                    />\n                  }\n                  fieldId=\"requiredWhen\"\n                  hasNoPaddingTop\n                >\n                  <Radio\n                    id=\"requiredAlways\"\n                    data-testid=\"requiredAlways\"\n                    isChecked={!hasRequiredScopes}\n                    name=\"requiredWhen\"\n                    label={t(\"always\")}\n                    onChange={() => setHasRequiredScopes(false)}\n                    className=\"pf-v5-u-mb-md\"\n                  />\n                  <Radio\n                    id=\"requiredScopesAsRequested\"\n                    data-testid=\"requiredScopesAsRequested\"\n                    isChecked={hasRequiredScopes}\n                    name=\"requiredWhen\"\n                    label={t(\"scopesAsRequested\")}\n                    onChange={() => setHasRequiredScopes(true)}\n                    className=\"pf-v5-u-mb-md\"\n                  />\n                </FormGroup>\n                {hasRequiredScopes && (\n                  <FormGroup fieldId=\"kc-scope-required-when\">\n                    <Controller\n                      name=\"required.scopes\"\n                      control={form.control}\n                      defaultValue={[]}\n                      render={({ field }) => (\n                        <KeycloakSelect\n                          data-testid=\"required-when-scope-field\"\n                          variant={SelectVariant.typeaheadMulti}\n                          typeAheadAriaLabel=\"Select\"\n                          chipGroupProps={{\n                            numChips: 3,\n                            expandedText: t(\"hide\"),\n                            collapsedText: t(\"showRemaining\"),\n                          }}\n                          onToggle={(isOpen) =>\n                            setSelectRequiredForOpen(isOpen)\n                          }\n                          selections={field.value}\n                          onSelect={(selectedValue) => {\n                            const option = selectedValue.toString();\n                            let changedValue = [\"\"];\n                            if (field.value) {\n                              changedValue = field.value.includes(option)\n                                ? field.value.filter(\n                                    (item: string) => item !== option,\n                                  )\n                                : [...field.value, option];\n                            } else {\n                              changedValue = [option];\n                            }\n                            field.onChange(changedValue);\n                          }}\n                          onClear={() => {\n                            field.onChange([]);\n                          }}\n                          isOpen={selectRequiredForOpen}\n                          aria-labelledby={\"scope\"}\n                        >\n                          {clientScopes.map((option) => (\n                            <SelectOption key={option.name} value={option.name}>\n                              {option.name}\n                            </SelectOption>\n                          ))}\n                        </KeycloakSelect>\n                      )}\n                    />\n                  </FormGroup>\n                )}\n              </>\n            )}\n          </>\n        )}\n      </FormAccess>\n    </FormProvider>\n  );\n};\n","import { Checkbox, FormGroup, Grid, GridItem } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../../components/form/FormAccess\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\n\nimport \"../../realm-settings-section.css\";\n\nconst Permissions = ({ name }: { name: string }) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n\n  return (\n    <Grid>\n      <Controller\n        name={`permissions.${name}`}\n        control={control}\n        defaultValue={[]}\n        render={({ field }) => (\n          <>\n            <GridItem lg={4} sm={6}>\n              <Checkbox\n                id={`user-${name}`}\n                label={t(\"user\")}\n                value=\"user\"\n                data-testid={`user-${name}`}\n                isChecked={field.value.includes(\"user\")}\n                onChange={() => {\n                  const option = \"user\";\n                  const changedValue = field.value.includes(option)\n                    ? field.value.filter((item: string) => item !== option)\n                    : [...field.value, option];\n\n                  field.onChange(changedValue);\n                }}\n              />\n            </GridItem>\n            <GridItem lg={8} sm={6}>\n              <Checkbox\n                id={`admin-${name}`}\n                label={t(\"admin\")}\n                value=\"admin\"\n                data-testid={`admin-${name}`}\n                isChecked={field.value.includes(\"admin\")}\n                onChange={() => {\n                  const option = \"admin\";\n                  const changedValue = field.value.includes(option)\n                    ? field.value.filter((item: string) => item !== option)\n                    : [...field.value, option];\n\n                  field.onChange(changedValue);\n                }}\n              />\n            </GridItem>\n          </>\n        )}\n      />\n    </Grid>\n  );\n};\n\nexport const AttributePermission = () => {\n  const { t } = useTranslation();\n\n  return (\n    <FormAccess role=\"manage-realm\" isHorizontal>\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"whoCanEdit\")}\n        labelIcon={\n          <HelpItem helpText={t(\"whoCanEditHelp\")} fieldLabelId=\"whoCanEdit\" />\n        }\n        fieldId=\"kc-who-can-edit\"\n      >\n        <Permissions name=\"edit\" />\n      </FormGroup>\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"whoCanView\")}\n        labelIcon={\n          <HelpItem helpText={t(\"whoCanViewHelp\")} fieldLabelId=\"whoCanView\" />\n        }\n        fieldId=\"kc-who-can-view\"\n      >\n        <Permissions name=\"view\" />\n      </FormGroup>\n    </FormAccess>\n  );\n};\n","import ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport { KeycloakSelect } from \"@keycloak/keycloak-ui-shared\";\nimport { FormGroup, SelectOption } from \"@patternfly/react-core\";\nimport { useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useServerInfo } from \"../../../context/server-info/ServerInfoProvider\";\nimport useToggle from \"../../../utils/useToggle\";\n\ntype ValidatorSelectProps = {\n  selectedValidators: string[];\n  onChange: (validator: ComponentTypeRepresentation) => void;\n};\n\nexport const ValidatorSelect = ({\n  selectedValidators,\n  onChange,\n}: ValidatorSelectProps) => {\n  const { t } = useTranslation();\n  const allValidator: ComponentTypeRepresentation[] =\n    useServerInfo().componentTypes?.[\"org.keycloak.validate.Validator\"] || [];\n  const validators = useMemo(\n    () => allValidator.filter(({ id }) => !selectedValidators.includes(id)),\n    [selectedValidators],\n  );\n  const [open, toggle] = useToggle();\n  const [value, setValue] = useState<ComponentTypeRepresentation>();\n\n  return (\n    <FormGroup label={t(\"validatorType\")} fieldId=\"validator\">\n      <KeycloakSelect\n        toggleId=\"validator\"\n        onToggle={toggle}\n        onSelect={(value) => {\n          const option = value as ComponentTypeRepresentation;\n          onChange(option);\n          setValue(option);\n          toggle();\n        }}\n        selections={value?.id}\n        variant=\"single\"\n        aria-label={t(\"selectOne\")}\n        isOpen={open}\n        placeholderText={t(\"choose\")}\n        menuAppendTo=\"parent\"\n        maxHeight={300}\n      >\n        {validators.map((option) => (\n          <SelectOption\n            selected={value?.id === option.id}\n            key={option.id}\n            value={option}\n            description={option.helpText}\n          >\n            {option.id}\n          </SelectOption>\n        ))}\n      </KeycloakSelect>\n    </FormGroup>\n  );\n};\n","import ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport { Button, Form, Modal, ModalVariant } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { DynamicComponents } from \"../../../components/dynamic/DynamicComponents\";\nimport { useServerInfo } from \"../../../context/server-info/ServerInfoProvider\";\nimport type { IndexedValidations } from \"../../NewAttributeSettings\";\nimport { ValidatorSelect } from \"./ValidatorSelect\";\n\nexport type AddValidatorDialogProps = {\n  selectedValidators: IndexedValidations[];\n  toggleDialog: () => void;\n  onConfirm: (newValidator: ComponentRepresentation) => void;\n};\n\nexport const AddValidatorDialog = ({\n  selectedValidators,\n  toggleDialog,\n  onConfirm,\n}: AddValidatorDialogProps) => {\n  const { t } = useTranslation();\n  const [selectedValidator, setSelectedValidator] =\n    useState<ComponentTypeRepresentation>();\n\n  const allSelected =\n    useServerInfo().componentTypes?.[\"org.keycloak.validate.Validator\"]\n      .length === selectedValidators.length;\n  const form = useForm<ComponentTypeRepresentation>();\n  const { handleSubmit } = form;\n\n  const save = (newValidator: ComponentTypeRepresentation) => {\n    onConfirm({ ...newValidator, id: selectedValidator?.id });\n    toggleDialog();\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"addValidator\")}\n      isOpen\n      onClose={toggleDialog}\n      actions={[\n        <Button\n          key=\"save\"\n          data-testid=\"save-validator-role-button\"\n          variant=\"primary\"\n          type=\"submit\"\n          form=\"add-validator\"\n        >\n          {t(\"save\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          data-testid=\"cancel-validator-role-button\"\n          variant=\"link\"\n          onClick={toggleDialog}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      {allSelected ? (\n        t(\"emptyValidators\")\n      ) : (\n        <Form id=\"add-validator\" onSubmit={handleSubmit(save)}>\n          <ValidatorSelect\n            selectedValidators={selectedValidators.map(\n              (validator) => validator.key,\n            )}\n            onChange={setSelectedValidator}\n          />\n          {selectedValidator && (\n            <FormProvider {...form}>\n              <DynamicComponents properties={selectedValidator.properties} />\n            </FormProvider>\n          )}\n        </Form>\n      )}\n    </Modal>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  Divider,\n  Text,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { Table, Tbody, Td, Th, Thead, Tr } from \"@patternfly/react-table\";\nimport { useEffect, useState } from \"react\";\nimport { useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useConfirmDialog } from \"../../../components/confirm-dialog/ConfirmDialog\";\nimport { DefaultValue } from \"../../../components/key-value-form/KeyValueInput\";\nimport useToggle from \"../../../utils/useToggle\";\nimport type { IndexedValidations } from \"../../NewAttributeSettings\";\nimport { AddValidatorDialog } from \"../attribute/AddValidatorDialog\";\n\nimport \"../../realm-settings-section.css\";\n\nexport const AttributeValidations = () => {\n  const { t } = useTranslation();\n  const [addValidatorModalOpen, toggleModal] = useToggle();\n  const [validatorToDelete, setValidatorToDelete] = useState<string>();\n  const { setValue, control, register, getValues } = useFormContext();\n\n  const validators: IndexedValidations[] = useWatch({\n    name: \"validations\",\n    control,\n    defaultValue: [],\n  });\n\n  useEffect(() => {\n    register(\"validations\");\n  }, [register]);\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteValidatorConfirmTitle\"),\n    messageKey: t(\"deleteValidatorConfirmMsg\", {\n      validatorName: validatorToDelete,\n    }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      const updatedValidators = validators.filter(\n        (validator) => validator.key !== validatorToDelete,\n      );\n\n      setValue(\"validations\", [...updatedValidators]);\n    },\n  });\n\n  return (\n    <>\n      {addValidatorModalOpen && (\n        <AddValidatorDialog\n          selectedValidators={validators}\n          onConfirm={(newValidator) => {\n            const annotations: DefaultValue[] = getValues(\"annotations\");\n            if (\n              newValidator.id === \"options\" &&\n              !annotations.find((a) => a.key === \"inputType\")\n            ) {\n              setValue(\"annotations\", [\n                ...annotations,\n                { key: \"inputType\", value: \"select\" },\n              ]);\n            }\n            setValue(\"validations\", [\n              ...validators,\n              { key: newValidator.id, value: newValidator.config },\n            ]);\n          }}\n          toggleDialog={toggleModal}\n        />\n      )}\n      <DeleteConfirm />\n      <div className=\"kc-attributes-validations\">\n        <Button\n          id=\"addValidator\"\n          onClick={() => toggleModal()}\n          variant=\"link\"\n          data-testid=\"addValidator\"\n          className=\"kc--attributes-validations--add-validation-button\"\n          icon={<PlusCircleIcon />}\n        >\n          {t(\"addValidator\")}\n        </Button>\n        <Divider />\n        {validators.length !== 0 ? (\n          <Table>\n            <Thead>\n              <Tr>\n                <Th>{t(\"validatorColNames.colName\")}</Th>\n                <Th>{t(\"validatorColNames.colConfig\")}</Th>\n                <Th aria-hidden=\"true\" />\n              </Tr>\n            </Thead>\n            <Tbody>\n              {validators.map((validator) => (\n                <Tr key={validator.key}>\n                  <Td dataLabel={t(\"validatorColNames.colName\")}>\n                    {validator.key}\n                  </Td>\n                  <Td dataLabel={t(\"validatorColNames.colConfig\")}>\n                    {JSON.stringify(validator.value)}\n                  </Td>\n                  <Td className=\"kc--attributes-validations--action-cell\">\n                    <Button\n                      key=\"validator\"\n                      variant=\"link\"\n                      data-testid=\"deleteValidator\"\n                      onClick={() => {\n                        toggleDeleteDialog();\n                        setValidatorToDelete(validator.key);\n                      }}\n                    >\n                      {t(\"delete\")}\n                    </Button>\n                  </Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </Table>\n        ) : (\n          <Text className=\"kc-emptyValidators\" component={TextVariants.p}>\n            {t(\"emptyValidators\")}\n          </Text>\n        )}\n      </div>\n    </>\n  );\n};\n","import type {\n  UserProfileAttribute,\n  UserProfileConfig,\n} from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport { ScrollForm, useAlerts, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  Button,\n  Form,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { flatten } from \"flat\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { FixedButtonsGroup } from \"../components/form/FixedButtonGroup\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { convertToFormValues } from \"../util\";\nimport { useParams } from \"../utils/useParams\";\nimport { TranslationForm } from \"./AddTranslationModal\";\nimport type { AttributeParams } from \"./routes/Attribute\";\nimport { toUserProfile } from \"./routes/UserProfile\";\nimport { UserProfileProvider } from \"./user-profile/UserProfileContext\";\nimport {\n  saveTranslations,\n  Translations,\n} from \"./user-profile/attribute/TranslatableField\";\nimport { AttributeAnnotations } from \"./user-profile/attribute/AttributeAnnotations\";\nimport { AttributeGeneralSettings } from \"./user-profile/attribute/AttributeGeneralSettings\";\nimport { AttributePermission } from \"./user-profile/attribute/AttributePermission\";\nimport { AttributeValidations } from \"./user-profile/attribute/AttributeValidations\";\n\nimport \"./realm-settings-section.css\";\n\ntype IndexedAnnotations = {\n  key: string;\n  value?: Record<string, unknown>;\n};\n\nexport type IndexedValidations = {\n  key: string;\n  value?: Record<string, unknown>;\n};\n\ntype UserProfileAttributeFormFields = Omit<\n  UserProfileAttribute,\n  \"validations\" | \"annotations\"\n> &\n  Translations &\n  Attribute &\n  Permission & {\n    validations: IndexedValidations[];\n    annotations: IndexedAnnotations[];\n    hasSelector: boolean;\n    hasRequiredScopes: boolean;\n    translations?: TranslationForm[];\n  };\n\ntype Attribute = {\n  roles: string[];\n  scopes: string[];\n  isRequired: boolean;\n};\n\ntype Permission = {\n  view: PermissionView[];\n  edit: PermissionEdit[];\n};\n\ntype PermissionView = [\n  {\n    adminView: boolean;\n    userView: boolean;\n  },\n];\n\ntype PermissionEdit = [\n  {\n    adminEdit: boolean;\n    userEdit: boolean;\n  },\n];\n\nexport const USERNAME_EMAIL = [\"username\", \"email\"];\n\nconst CreateAttributeFormContent = ({\n  save,\n}: {\n  save: (profileConfig: UserProfileConfig) => void;\n}) => {\n  const { t } = useTranslation();\n  const form = useFormContext();\n  const { realm, attributeName } = useParams<AttributeParams>();\n  const editMode = attributeName ? true : false;\n\n  return (\n    <UserProfileProvider>\n      <ScrollForm\n        label={t(\"jumpToSection\")}\n        sections={[\n          { title: t(\"generalSettings\"), panel: <AttributeGeneralSettings /> },\n          { title: t(\"permission\"), panel: <AttributePermission /> },\n          { title: t(\"validations\"), panel: <AttributeValidations /> },\n          { title: t(\"annotations\"), panel: <AttributeAnnotations /> },\n        ]}\n      />\n      <Form onSubmit={form.handleSubmit(save)}>\n        <FixedButtonsGroup name=\"attribute-settings\">\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"attribute-create\"\n          >\n            {editMode ? t(\"save\") : t(\"create\")}\n          </Button>\n          <Link\n            to={toUserProfile({ realm, tab: \"attributes\" })}\n            data-testid=\"attribute-cancel\"\n            className=\"kc-attributeCancel\"\n          >\n            {t(\"cancel\")}\n          </Link>\n        </FixedButtonsGroup>\n      </Form>\n    </UserProfileProvider>\n  );\n};\n\nexport default function NewAttributeSettings() {\n  const { adminClient } = useAdminClient();\n  const { realm: realmName, attributeName } = useParams<AttributeParams>();\n  const form = useForm<UserProfileAttributeFormFields>();\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { addAlert, addError } = useAlerts();\n  const [config, setConfig] = useState<UserProfileConfig | null>(null);\n  const editMode = attributeName ? true : false;\n\n  useFetch(\n    () => adminClient.users.getProfile(),\n    (config) => {\n      setConfig(config);\n      const {\n        annotations,\n        validations,\n        permissions,\n        selector,\n        required,\n        multivalued,\n        ...values\n      } = config.attributes!.find(\n        (attribute) => attribute.name === attributeName,\n      ) || { permissions: { edit: [\"admin\"] } };\n      convertToFormValues(\n        {\n          ...values,\n          hasSelector: typeof selector !== \"undefined\",\n          hasRequiredScopes: typeof required?.scopes !== \"undefined\",\n        },\n        form.setValue,\n      );\n      Object.entries(\n        flatten<any, any>({ permissions, selector, required }, { safe: true }),\n      ).map(([key, value]) => form.setValue(key as any, value));\n      form.setValue(\n        \"annotations\",\n        Object.entries(annotations || {}).map(([key, value]) => ({\n          key,\n          value: value as Record<string, unknown>,\n        })),\n      );\n      form.setValue(\n        \"validations\",\n        Object.entries(validations || {}).map(([key, value]) => ({\n          key,\n          value: value as Record<string, unknown>,\n        })),\n      );\n      form.setValue(\"isRequired\", required !== undefined);\n      form.setValue(\"multivalued\", multivalued === true);\n    },\n    [],\n  );\n\n  const save = async ({\n    hasSelector,\n    hasRequiredScopes,\n    ...formFields\n  }: UserProfileAttributeFormFields) => {\n    if (!hasSelector) {\n      delete formFields.selector;\n    }\n\n    if (!hasRequiredScopes) {\n      delete formFields.required?.scopes;\n    }\n\n    const validations = formFields.validations.reduce(\n      (prevValidations, currentValidations) => {\n        prevValidations[currentValidations.key] =\n          currentValidations.value || {};\n        return prevValidations;\n      },\n      {} as Record<string, unknown>,\n    );\n\n    const annotations = formFields.annotations.reduce(\n      (obj, item) => Object.assign(obj, { [item.key]: item.value }),\n      {},\n    );\n\n    const patchAttributes = () =>\n      (config?.attributes || []).map((attribute) => {\n        if (attribute.name !== attributeName) {\n          return attribute;\n        }\n\n        delete attribute.required;\n        return Object.assign(\n          {\n            ...attribute,\n            name: attributeName,\n            displayName: formFields.displayName!,\n            selector: formFields.selector,\n            permissions: formFields.permissions!,\n            multivalued: formFields.multivalued,\n            annotations,\n            validations,\n          },\n          formFields.isRequired ? { required: formFields.required } : undefined,\n          formFields.group ? { group: formFields.group } : { group: null },\n        );\n      });\n\n    const addAttribute = () =>\n      (config?.attributes || []).concat([\n        Object.assign(\n          {\n            name: formFields.name,\n            displayName: formFields.displayName!,\n            required: formFields.isRequired ? formFields.required : undefined,\n            selector: formFields.selector,\n            permissions: formFields.permissions!,\n            multivalued: formFields.multivalued,\n            annotations,\n            validations,\n          },\n          formFields.isRequired ? { required: formFields.required } : undefined,\n          formFields.group ? { group: formFields.group } : undefined,\n        ),\n      ] as UserProfileAttribute);\n\n    try {\n      const updatedAttributes = editMode ? patchAttributes() : addAttribute();\n\n      await adminClient.users.updateProfile({\n        ...config,\n        attributes: updatedAttributes as UserProfileAttribute[],\n        realm: realmName,\n      });\n\n      if (formFields.translation) {\n        try {\n          await saveTranslations({\n            adminClient,\n            realmName,\n            translationsData: {\n              translation: formFields.translation,\n            },\n          });\n        } catch (error) {\n          addError(t(\"errorSavingTranslations\"), error);\n        }\n      }\n      navigate(toUserProfile({ realm: realmName, tab: \"attributes\" }));\n\n      addAlert(t(\"createAttributeSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"createAttributeError\", error);\n    }\n  };\n\n  return (\n    <FormProvider {...form}>\n      <ViewHeader\n        titleKey={editMode ? attributeName : t(\"createAttribute\")}\n        subKey={editMode ? \"\" : t(\"createAttributeSubTitle\")}\n      />\n      <PageSection variant=\"light\">\n        <CreateAttributeFormContent save={() => form.handleSubmit(save)()} />\n      </PageSection>\n    </FormProvider>\n  );\n}\n"],"names":["AttributeAnnotations","useTranslation","jsx","FormAccess","FormGroup","Grid","GridItem","KeyValueInput","REQUIRED_FOR","AttributeGeneralSettings","adminClient","useAdminClient","t","form","useFormContext","clientScopes","setClientScopes","useState","config","setConfig","selectEnabledWhenOpen","setSelectEnabledWhenOpen","selectRequiredForOpen","setSelectRequiredForOpen","enabledWhenSearch","setEnableWhenSearch","localeSort","useLocaleSort","attributeName","useParams","editMode","hasSelector","useWatch","hasRequiredScopes","required","useFetch","KeycloakSpinner","setHasSelector","setHasRequiredScopes","items","mapByKey","s","option","SelectOption","FormProvider","TextControl","HelpItem","TranslatableField","DefaultSwitchControl","SelectControl","g","USERNAME_EMAIL","jsxs","Fragment","Divider","Radio","Controller","field","KeycloakSelect","SelectVariant","value","isOpen","selectedValue","changedValue","item","Switch","isEqual","Permissions","name","control","Checkbox","AttributePermission","ValidatorSelect","selectedValidators","onChange","allValidator","useServerInfo","validators","useMemo","id","open","toggle","useToggle","setValue","AddValidatorDialog","toggleDialog","onConfirm","selectedValidator","setSelectedValidator","allSelected","useForm","handleSubmit","save","newValidator","Modal","ModalVariant","Button","Form","validator","DynamicComponents","AttributeValidations","addValidatorModalOpen","toggleModal","validatorToDelete","setValidatorToDelete","register","getValues","useEffect","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","updatedValidators","annotations","a","PlusCircleIcon","Table","Thead","Tr","Th","Tbody","Td","Text","TextVariants","CreateAttributeFormContent","realm","UserProfileProvider","ScrollForm","FixedButtonsGroup","Link","toUserProfile","NewAttributeSettings","realmName","navigate","useNavigate","addAlert","addError","useAlerts","validations","permissions","selector","multivalued","values","attribute","convertToFormValues","flatten","key","formFields","prevValidations","currentValidations","obj","patchAttributes","addAttribute","updatedAttributes","saveTranslations","error","AlertVariant","ViewHeader","PageSection"],"mappings":"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"}