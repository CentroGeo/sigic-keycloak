{"version":3,"file":"PermissionConfigurationDetails-CEh_KLEf.js","sources":["../../../../../../../src/permissions-configuration/permission-configuration/NewPermissionPolicyDialog.tsx","../../../../../../../src/permissions-configuration/permission-configuration/ExistingPoliciesDialog.tsx","../../../../../../../src/permissions-configuration/permission-configuration/AssignedPolicies.tsx","../../../../../../../src/permissions-configuration/permission-configuration/PermissionConfigurationDetails.tsx"],"sourcesContent":["import PolicyRepresentation, {\n  DecisionStrategy,\n  Logic,\n} from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Modal,\n  ModalVariant,\n  TextContent,\n  Text,\n  TextVariants,\n  ActionGroup,\n  Button,\n  Form,\n  ButtonVariant,\n  AlertVariant,\n} from \"@patternfly/react-core\";\nimport {\n  SelectControl,\n  TextControl,\n  useAlerts,\n} from \"@keycloak/keycloak-ui-shared\";\nimport { FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { Client } from \"../../clients/authorization/policy/Client\";\nimport { User } from \"../../clients/authorization/policy/User\";\nimport {\n  ClientScope,\n  RequiredIdValue,\n} from \"../../clients/authorization/policy/ClientScope\";\nimport { Group, GroupValue } from \"../../clients/authorization/policy/Group\";\nimport { Regex } from \"../../clients/authorization/policy/Regex\";\nimport { Role } from \"../../clients/authorization/policy/Role\";\nimport { Time } from \"../../clients/authorization/policy/Time\";\nimport { JavaScript } from \"../../clients/authorization/policy/JavaScript\";\nimport { LogicSelector } from \"../../clients/authorization/policy/LogicSelector\";\nimport { Aggregate } from \"../../clients/authorization/policy/Aggregate\";\nimport { capitalize } from \"lodash-es\";\nimport { useEffect, type JSX } from \"react\";\n\ntype Policy = Omit<PolicyRepresentation, \"roles\"> & {\n  groups?: GroupValue[];\n  clientScopes?: RequiredIdValue[];\n  roles?: RequiredIdValue[];\n  clients?: [];\n};\n\ntype ComponentsProps = {\n  isPermissionClient?: boolean;\n  permissionClientId: string;\n};\n\nconst defaultValues: Policy = {\n  name: \"\",\n  description: \"\",\n  type: \"group\",\n  policies: [],\n  decisionStrategy: DecisionStrategy.UNANIMOUS,\n  logic: Logic.POSITIVE,\n};\n\nconst COMPONENTS: {\n  [index: string]: ({\n    isPermissionClient,\n    permissionClientId,\n  }: ComponentsProps) => JSX.Element;\n} = {\n  aggregate: Aggregate,\n  client: Client,\n  user: User,\n  \"client-scope\": ClientScope,\n  group: Group,\n  regex: Regex,\n  role: Role,\n  time: Time,\n  js: JavaScript,\n  default: Group,\n} as const;\n\nexport const isValidComponentType = (value: string) => value in COMPONENTS;\n\ntype NewPermissionConfigurationDialogProps = {\n  permissionClientId: string;\n  providers: PolicyProviderRepresentation[];\n  policies: PolicyRepresentation[];\n  resourceType: string;\n  toggleDialog: () => void;\n  onAssign: (newPolicy: PolicyRepresentation) => void;\n};\n\nexport const NewPermissionPolicyDialog = ({\n  permissionClientId,\n  providers,\n  policies,\n  toggleDialog,\n  onAssign,\n}: NewPermissionConfigurationDialogProps) => {\n  const { adminClient } = useAdminClient();\n  const { realmRepresentation } = useRealm();\n  const { t } = useTranslation();\n  const form = useForm<Policy>({\n    mode: \"onChange\",\n    defaultValues,\n  });\n  const { addAlert, addError } = useAlerts();\n  const { handleSubmit, reset } = form;\n  const isPermissionClient = realmRepresentation?.adminPermissionsEnabled;\n\n  const policyTypeSelector = useWatch({\n    control: form.control,\n    name: \"type\",\n  });\n\n  function getComponentType() {\n    if (policyTypeSelector && isValidComponentType(policyTypeSelector)) {\n      return COMPONENTS[policyTypeSelector];\n    }\n    return COMPONENTS[\"default\"];\n  }\n\n  const ComponentType = getComponentType();\n\n  useEffect(() => {\n    if (policyTypeSelector) {\n      const { name, description, decisionStrategy, logic } = form.getValues();\n\n      reset({\n        type: policyTypeSelector,\n        name,\n        description,\n        decisionStrategy,\n        logic,\n      });\n    }\n  }, [policyTypeSelector, reset, form]);\n\n  const save = async (policy: Policy) => {\n    const { groups, roles, policies, clients, ...rest } = policy;\n\n    const cleanedPolicy = {\n      ...rest,\n      ...(groups && groups.length > 0 && { groups }),\n      ...(roles && roles.length > 0 && { roles }),\n      ...(policies && policies.length > 0 && { policies }),\n      ...(clients && clients.length > 0 && { clients }),\n      ...(rest.type === \"group\" &&\n        (!groups || groups.length === 0) && { groups: [] }),\n      ...(rest.type === \"client\" &&\n        (!clients || clients.length === 0) && { clients: [] }),\n    };\n\n    try {\n      const createdPolicy = await adminClient.clients.createPolicy(\n        { id: permissionClientId, type: policyTypeSelector! },\n        cleanedPolicy,\n      );\n\n      onAssign(createdPolicy);\n      toggleDialog();\n      addAlert(t(\"createPolicySuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"policySaveError\", error);\n    }\n  };\n\n  return (\n    <Modal\n      aria-label={t(\"createPermissionPolicy\")}\n      variant={ModalVariant.medium}\n      header={\n        <TextContent>\n          <Text component={TextVariants.h1}>{t(\"createPermissionPolicy\")}</Text>\n        </TextContent>\n      }\n      isOpen\n      onClose={toggleDialog}\n    >\n      <Form\n        id=\"createPermissionPolicy-form\"\n        onSubmit={(e) => {\n          e.stopPropagation();\n          handleSubmit(save)(e);\n        }}\n        isHorizontal\n      >\n        <FormProvider {...form}>\n          <TextControl\n            name=\"name\"\n            label={t(\"name\")}\n            rules={{ required: t(\"required\") }}\n          />\n          <TextControl name=\"description\" label={t(\"description\")} />\n          {providers && providers.length > 0 && (\n            <SelectControl\n              name=\"type\"\n              label={t(\"policyType\")}\n              labelIcon={t(\"policyTypeHelpText\")}\n              options={providers.map((provider) => ({\n                key: provider.type!,\n                value: capitalize(provider.type!),\n              }))}\n              controller={{ defaultValue: \"\" }}\n            />\n          )}\n          <ComponentType\n            isPermissionClient={isPermissionClient}\n            permissionClientId={permissionClientId}\n          />\n          <LogicSelector />\n        </FormProvider>\n        <ActionGroup>\n          <div className=\"pf-v5-u-mt-md\">\n            <Button\n              variant={ButtonVariant.primary}\n              className=\"pf-v5-u-mr-md\"\n              type=\"submit\"\n              data-testid=\"save\"\n              isDisabled={\n                policies?.length === 0 && policyTypeSelector === \"aggregate\"\n              }\n            >\n              {t(\"save\")}\n            </Button>\n            <Button variant=\"link\" data-testid=\"cancel\" onClick={toggleDialog}>\n              {t(\"cancel\")}\n            </Button>\n          </div>\n        </ActionGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport { PolicyQuery } from \"@keycloak/keycloak-admin-client/lib/resources/clients\";\nimport {\n  KeycloakDataTable,\n  ListEmptyState,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  MenuToggle,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { CaretDownIcon, FilterIcon } from \"@patternfly/react-icons\";\nimport { sortBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { capitalizeFirstLetterFormatter } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\n\nexport type ExistingPoliciesDialogProps = {\n  toggleDialog: () => void;\n  onAssign: (policies: { policy: PolicyRepresentation }[]) => void;\n  open: boolean;\n  permissionClientId: string;\n};\n\nexport const ExistingPoliciesDialog = ({\n  toggleDialog,\n  onAssign,\n  open,\n  permissionClientId,\n}: ExistingPoliciesDialogProps) => {\n  const { t } = useTranslation();\n  const { adminClient } = useAdminClient();\n  const [rows, setRows] = useState<PolicyRepresentation[]>([]);\n  const [filterType, setFilterType] = useState<string | undefined>(undefined);\n  const [isFilterTypeDropdownOpen, toggleIsFilterTypeDropdownOpen] =\n    useToggle();\n  const [providers, setProviders] = useState<string[]>([]);\n\n  useFetch(\n    () =>\n      adminClient.clients.listPolicyProviders({\n        id: permissionClientId!,\n      }),\n    (providers) => {\n      const formattedProviders = providers\n        .filter((p) => p.type !== \"resource\" && p.type !== \"scope\")\n        .map((provider) => provider.name)\n        .filter((name) => name !== undefined);\n      setProviders(sortBy(formattedProviders));\n    },\n    [permissionClientId],\n  );\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const params: PolicyQuery = {\n      id: permissionClientId!,\n      permission: \"false\",\n      first,\n      max,\n    };\n\n    if (search) {\n      params.name = search;\n    }\n\n    if (filterType) {\n      params.type = filterType;\n    }\n\n    return (await adminClient.clients.listPolicies(params)) || [];\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"assignExistingPolicies\")}\n      isOpen={open}\n      onClose={toggleDialog}\n      actions={[\n        <>\n          <Button\n            id=\"modal-assignExistingPolicies\"\n            data-testid=\"confirm\"\n            key=\"assign\"\n            variant={ButtonVariant.primary}\n            onClick={() => {\n              const selectedPolicies = rows.map((policy) => ({ policy }));\n              onAssign(selectedPolicies);\n              toggleDialog();\n            }}\n            isDisabled={rows.length === 0}\n          >\n            {t(\"assign\")}\n          </Button>\n          <Button\n            id=\"modal-cancelExistingPolicies\"\n            data-testid=\"cancel\"\n            key=\"cancel\"\n            variant={ButtonVariant.link}\n            onClick={() => {\n              setRows([]);\n              toggleDialog();\n            }}\n          >\n            {t(\"cancel\")}\n          </Button>\n        </>,\n      ]}\n    >\n      <KeycloakDataTable\n        key={filterType}\n        loader={loader}\n        ariaLabelKey={t(\"chooseAPolicyType\")}\n        searchPlaceholderKey={t(\"searchClientAuthorizationPolicy\")}\n        isSearching={true}\n        searchTypeComponent={\n          <Dropdown\n            onSelect={(_, value) => {\n              setFilterType(value as string | undefined);\n              toggleIsFilterTypeDropdownOpen();\n            }}\n            onOpenChange={toggleIsFilterTypeDropdownOpen}\n            toggle={(ref) => (\n              <MenuToggle\n                ref={ref}\n                data-testid=\"filter-type-dropdown-existingPolicies\"\n                id=\"toggle-id-10\"\n                onClick={toggleIsFilterTypeDropdownOpen}\n                icon={<FilterIcon />}\n                statusIcon={<CaretDownIcon />}\n              >\n                {filterType ? filterType : t(\"allTypes\")}\n              </MenuToggle>\n            )}\n            isOpen={isFilterTypeDropdownOpen}\n          >\n            <DropdownList>\n              <DropdownItem\n                data-testid=\"filter-type-dropdown-existingPolicies-all\"\n                key=\"all\"\n                onClick={() => setFilterType(undefined)}\n              >\n                {t(\"allTypes\")}\n              </DropdownItem>\n              {providers.map((name) => (\n                <DropdownItem\n                  data-testid={`filter-type-dropdown-existingPolicies-${name}`}\n                  key={name}\n                  onClick={() => setFilterType(name)}\n                >\n                  {name}\n                </DropdownItem>\n              ))}\n            </DropdownList>\n          </Dropdown>\n        }\n        canSelectAll\n        onSelect={(selectedRows) => setRows(selectedRows)}\n        columns={[\n          { name: \"name\" },\n          {\n            name: \"type\",\n            cellFormatters: [capitalizeFirstLetterFormatter()],\n          },\n          { name: \"description\" },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyAssignExistingPolicies\")}\n            instructions={t(\"emptyAssignExistingPoliciesInstructions\")}\n          />\n        }\n      />\n    </Modal>\n  );\n};\n","import PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport {\n  Action,\n  FormErrorText,\n  HelpItem,\n  KeycloakDataTable,\n  ListEmptyState,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  FormGroup,\n  MenuToggle,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { NewPermissionPolicyDialog } from \"./NewPermissionPolicyDialog\";\nimport PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport { ExistingPoliciesDialog } from \"./ExistingPoliciesDialog\";\nimport { CaretDownIcon, FilterIcon } from \"@patternfly/react-icons\";\nimport { capitalize, sortBy } from \"lodash-es\";\nimport useToggle from \"../../utils/useToggle\";\nimport { IRowData } from \"@patternfly/react-table\";\n\ntype AssignedPoliciesProps = {\n  permissionClientId: string;\n  providers: PolicyProviderRepresentation[];\n  policies: PolicyRepresentation[] | undefined;\n  resourceType: string;\n};\n\ntype AssignedPolicyForm = {\n  policies?: { id: string; type?: string }[];\n};\n\nexport const AssignedPolicies = ({\n  permissionClientId,\n  providers,\n  policies,\n  resourceType,\n}: AssignedPoliciesProps) => {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation();\n  const {\n    control,\n    getValues,\n    setValue,\n    trigger,\n    formState: { errors },\n  } = useFormContext<AssignedPolicyForm>();\n  const values = getValues(\"policies\");\n  const [existingPoliciesOpen, setExistingPoliciesOpen] = useState(false);\n  const [newPolicyOpen, setNewPolicyOpen] = useState(false);\n  const [selectedPolicies, setSelectedPolicies] = useState<\n    PolicyRepresentation[]\n  >([]);\n  const [filterType, setFilterType] = useState<string | undefined>(undefined);\n  const [isFilterTypeDropdownOpen, toggleIsFilterTypeDropdownOpen] =\n    useToggle();\n\n  useFetch(\n    () => {\n      if (values && values.length > 0)\n        return Promise.all(\n          values.map((p) =>\n            adminClient.clients.findOnePolicy({\n              id: permissionClientId,\n              type: p.type!,\n              policyId: p.id,\n            }),\n          ),\n        );\n      return Promise.resolve([]);\n    },\n    (policies) => {\n      const filteredPolicy = policies.filter((p) => p) as [];\n      setSelectedPolicies(filteredPolicy);\n    },\n    [policies],\n  );\n\n  const sortedProviders = sortBy(\n    providers\n      ? providers\n          .filter((p) => p.type !== \"resource\" && p.type !== \"scope\")\n          .map((provider) => provider.name)\n      : [],\n  );\n\n  const assign = (policies: { policy: PolicyRepresentation }[]) => {\n    const assignedPolicies = policies.map(({ policy }) => ({\n      id: policy.id!,\n    }));\n\n    setValue(\"policies\", [\n      ...(getValues(\"policies\") || []),\n      ...assignedPolicies,\n    ]);\n    trigger(\"policies\");\n    setSelectedPolicies([\n      ...selectedPolicies,\n      ...policies.map(({ policy }) => policy),\n    ]);\n  };\n\n  const unAssign = (policy: PolicyRepresentation) => {\n    const updatedPolicies = selectedPolicies.filter(\n      (selectedPolicy) => selectedPolicy.id !== policy.id,\n    );\n    setSelectedPolicies(updatedPolicies);\n    setValue(\n      \"policies\",\n      updatedPolicies.map((policy) => ({\n        id: policy.id!,\n        name: policy.name!,\n        type: policy.type!,\n        description: policy.description!,\n      })),\n    );\n  };\n\n  const filteredPolicies = filterType\n    ? selectedPolicies.filter(\n        (policy) => capitalize(policy.type) === filterType,\n      )\n    : selectedPolicies;\n\n  return (\n    <FormGroup\n      label={t(\"policies\")}\n      labelIcon={\n        <HelpItem\n          helpText={t(\"permissionPoliciesHelp\")}\n          fieldLabelId=\"policies\"\n        />\n      }\n      fieldId=\"policies\"\n      isRequired\n    >\n      <Controller\n        name=\"policies\"\n        control={control}\n        defaultValue={[]}\n        rules={{\n          validate: (value?: { id: string }[]) => {\n            if (!value || value.length === 0) return false;\n            return value.every(({ id }) => id && id.trim().length > 0);\n          },\n        }}\n        render={() => (\n          <>\n            {existingPoliciesOpen && (\n              <ExistingPoliciesDialog\n                permissionClientId={permissionClientId}\n                open={existingPoliciesOpen}\n                toggleDialog={() =>\n                  setExistingPoliciesOpen(!existingPoliciesOpen)\n                }\n                onAssign={assign}\n              />\n            )}\n            {newPolicyOpen && (\n              <NewPermissionPolicyDialog\n                toggleDialog={() => setNewPolicyOpen(!newPolicyOpen)}\n                permissionClientId={permissionClientId}\n                providers={providers!}\n                policies={policies!}\n                resourceType={resourceType}\n                onAssign={(newPolicy) => {\n                  assign([{ policy: newPolicy }]);\n                }}\n              />\n            )}\n            <Button\n              data-testid=\"select-assignedPolicy-button\"\n              variant=\"secondary\"\n              onClick={() => {\n                setExistingPoliciesOpen(true);\n              }}\n            >\n              {t(\"assignExistingPolicies\")}\n            </Button>\n            <Button\n              data-testid=\"select-createNewPolicy-button\"\n              className=\"pf-v5-u-ml-md\"\n              variant=\"secondary\"\n              onClick={() => {\n                setNewPolicyOpen(true);\n              }}\n            >\n              {t(\"createNewPolicy\")}\n            </Button>\n          </>\n        )}\n      />\n      {selectedPolicies.length > 0 && (\n        <KeycloakDataTable\n          loader={filteredPolicies}\n          ariaLabelKey={t(\"policies\")}\n          searchPlaceholderKey={t(\"searchClientAuthorizationPolicy\")}\n          isSearching={true}\n          searchTypeComponent={\n            <Dropdown\n              onSelect={(event, value) => {\n                setFilterType(value as string | undefined);\n                toggleIsFilterTypeDropdownOpen();\n              }}\n              onOpenChange={toggleIsFilterTypeDropdownOpen}\n              toggle={(ref) => (\n                <MenuToggle\n                  ref={ref}\n                  data-testid=\"filter-type-dropdown-existingPolicies\"\n                  id=\"toggle-id-10\"\n                  onClick={toggleIsFilterTypeDropdownOpen}\n                  icon={<FilterIcon />}\n                  statusIcon={<CaretDownIcon />}\n                >\n                  {filterType ? capitalize(filterType) : t(\"allTypes\")}\n                </MenuToggle>\n              )}\n              isOpen={isFilterTypeDropdownOpen}\n            >\n              <DropdownList>\n                <DropdownItem\n                  data-testid=\"filter-type-dropdown-existingPolicies-all\"\n                  key=\"all\"\n                  onClick={() => setFilterType(undefined)}\n                >\n                  {t(\"allTypes\")}\n                </DropdownItem>\n                {sortedProviders.map((name) => (\n                  <DropdownItem\n                    data-testid={`filter-type-dropdown-existingPolicies-${name}`}\n                    key={name}\n                    onClick={() => setFilterType(name)}\n                  >\n                    {name}\n                  </DropdownItem>\n                ))}\n              </DropdownList>\n            </Dropdown>\n          }\n          actionResolver={(rowData: IRowData) => [\n            {\n              title: t(\"unAssignPolicy\"),\n              onClick: () => unAssign(rowData.data as PolicyRepresentation),\n            } as Action<PolicyRepresentation>,\n          ]}\n          columns={[\n            { name: \"name\", displayKey: t(\"name\") },\n            {\n              name: \"type\",\n              displayKey: t(\"type\"),\n              cellFormatters: [(value) => capitalize(String(value || \"\"))],\n            },\n            { name: \"description\", displayKey: t(\"description\") },\n          ]}\n          emptyState={\n            <ListEmptyState\n              message={t(\"emptyAssignExistingPolicies\")}\n              instructions={t(\"emptyAssignExistingPoliciesInstructions\")}\n            />\n          }\n        />\n      )}\n      {errors.policies && <FormErrorText message={t(\"requiredPolicies\")} />}\n    </FormGroup>\n  );\n};\n","import PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport { useAlerts, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { useMemo, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { ViewHeader } from \"../../components/view-header/ViewHeader\";\nimport { useParams } from \"../../utils/useParams\";\nimport {\n  PermissionConfigurationDetailsParams,\n  toPermissionConfigurationDetails,\n} from \"../routes/PermissionConfigurationDetails\";\nimport { toPermissionsConfigurationTabs } from \"../routes/PermissionsConfigurationTabs\";\nimport PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport { AssignedPolicies } from \"./AssignedPolicies\";\nimport { ScopePicker } from \"../../clients/authorization/ScopePicker\";\nimport { ResourceType } from \"../resource-types/ResourceType\";\nimport { sortBy } from \"lodash-es\";\nimport { NameDescription } from \"../../clients/authorization/policy/NameDescription\";\nimport useSortedResourceTypes from \"../../utils/useSortedResourceTypes\";\n\nexport default function PermissionConfigurationDetails() {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation();\n  const { realm, permissionClientId, permissionId, resourceType } =\n    useParams<PermissionConfigurationDetailsParams>();\n  const navigate = useNavigate();\n  const form = useForm();\n  const { handleSubmit, reset } = form;\n  const { addAlert, addError } = useAlerts();\n  const [permission, setPermission] = useState<PolicyRepresentation>();\n  const [providers, setProviders] = useState<PolicyProviderRepresentation[]>();\n  const [policies, setPolicies] = useState<PolicyRepresentation[]>();\n  const resourceTypes = useSortedResourceTypes({\n    clientId: permissionClientId,\n  });\n\n  const resourceTypeScopes = useMemo(\n    () =>\n      resourceTypes\n        .filter(({ type }) => type === resourceType)\n        .flatMap(({ scopes = [] }) => scopes)\n        .map((scope) => scope || \"\"),\n    [resourceTypes, resourceType],\n  );\n\n  useFetch(\n    async () => {\n      if (!permissionClientId) {\n        return {};\n      }\n\n      const [providers, policies] = await Promise.all([\n        adminClient.clients.listPolicyProviders({ id: permissionClientId }),\n        adminClient.clients.listPolicies({\n          id: permissionClientId,\n          permission: \"false\",\n        }),\n      ]);\n\n      return { providers, policies };\n    },\n    ({ providers, policies }) => {\n      const filteredProviders = providers?.filter(\n        (p) => p.type !== \"resource\" && p.type !== \"scope\",\n      );\n\n      setProviders(\n        sortBy(\n          filteredProviders,\n          (provider: PolicyProviderRepresentation) => provider.type,\n        ),\n      );\n      setPolicies(policies || []);\n    },\n    [permissionClientId],\n  );\n\n  useFetch(\n    async () => {\n      if (!permissionId) {\n        return {};\n      }\n      const [permission, resources, policies, scopes] = await Promise.all([\n        adminClient.clients.findOnePermission({\n          id: permissionClientId,\n          type: \"scope\",\n          permissionId,\n        }),\n        adminClient.clients.getAssociatedResources({\n          id: permissionClientId,\n          permissionId,\n        }),\n        adminClient.clients.getAssociatedPolicies({\n          id: permissionClientId,\n          permissionId,\n        }),\n        adminClient.clients.getAssociatedScopes({\n          id: permissionClientId,\n          permissionId,\n        }),\n      ]);\n\n      if (!permission) {\n        throw new Error(t(\"notFound\"));\n      }\n\n      return {\n        permission,\n        resources,\n        policies,\n        scopes,\n      };\n    },\n    ({ permission, resources, policies, scopes }) => {\n      const resourceIds = resources?.map((resource) => resource.name!) || [];\n      const policyIds = policies?.map((policy) => policy.id!) || [];\n      const scopeNames = scopes?.map((scope) => scope.name) || [];\n\n      reset({\n        ...permission,\n        resources: resourceIds!,\n        policies,\n        scopes,\n      });\n\n      setPermission({\n        ...permission,\n        resources: resourceIds!,\n        policies: policyIds,\n        scopes: scopeNames,\n      });\n    },\n    [permissionClientId, permissionId],\n  );\n\n  const save = async (permission: PolicyRepresentation) => {\n    try {\n      const newPermission = {\n        ...permission,\n        policies: permission.policies?.map((policy: any) => policy.id),\n        scopes: permission.scopes?.map((scope: any) => scope.name),\n        resourceType: resourceType,\n      };\n\n      if (permissionId) {\n        await adminClient.clients.updatePermission(\n          { id: permissionClientId, type: \"scope\", permissionId },\n          newPermission,\n        );\n      } else {\n        const result = await adminClient.clients.createPermission(\n          { id: permissionClientId, type: \"scope\" },\n          newPermission,\n        );\n        setPermission(result);\n        navigate(\n          toPermissionConfigurationDetails({\n            realm,\n            permissionClientId: permissionClientId,\n            permissionId: result.id!,\n            resourceType,\n          }),\n        );\n      }\n\n      addAlert(\n        t(permissionId ? \"updatePermissionSuccess\" : \"createPermissionSuccess\"),\n        AlertVariant.success,\n      );\n    } catch (error) {\n      addError(\"permissionSaveError\", error);\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deletePermission\",\n    messageKey: t(\"deleteAdminPermissionConfirm\", {\n      permission: permission?.name,\n    }),\n    continueButtonVariant: ButtonVariant.danger,\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delPermission({\n          id: permissionClientId!,\n          type: \"scope\",\n          permissionId: permissionId,\n        });\n        addAlert(t(\"permissionDeletedSuccess\"), AlertVariant.success);\n        navigate(\n          toPermissionsConfigurationTabs({\n            realm,\n            permissionClientId,\n            tab: \"permissions\",\n          }),\n        );\n      } catch (error) {\n        addError(\"permissionDeletedError\", error);\n      }\n    },\n  });\n\n  if (!permission) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <DeleteConfirm />\n      <ViewHeader\n        titleKey={permissionId ? permission?.name! : t(\"createPermission\")}\n        subKey={\n          permissionId\n            ? permission?.description!\n            : t(\"createPermissionOfType\", { resourceType })\n        }\n        dropdownItems={\n          permissionId\n            ? [\n                <DropdownItem\n                  key=\"delete\"\n                  data-testid=\"delete-permission\"\n                  onClick={() => toggleDeleteDialog()}\n                >\n                  {t(\"delete\")}\n                </DropdownItem>,\n              ]\n            : undefined\n        }\n      />\n      <PageSection variant=\"light\">\n        <FormAccess isHorizontal onSubmit={handleSubmit(save)} role=\"anyone\">\n          <FormProvider {...form}>\n            <NameDescription clientId={permissionClientId} />\n            <ScopePicker\n              clientId={permissionClientId}\n              resourceTypeScopes={resourceTypeScopes ?? []}\n            />\n            <ResourceType resourceType={resourceType} />\n            <AssignedPolicies\n              permissionClientId={permissionClientId}\n              providers={providers!}\n              policies={policies!}\n              resourceType={resourceType}\n            />\n          </FormProvider>\n          <ActionGroup>\n            <div className=\"pf-v5-u-mt-md\">\n              <Button\n                variant={ButtonVariant.primary}\n                className=\"pf-v5-u-mr-md\"\n                type=\"submit\"\n                data-testid=\"save\"\n              >\n                {t(\"save\")}\n              </Button>\n              <Button\n                variant=\"link\"\n                data-testid=\"cancel\"\n                component={(props) => (\n                  <Link\n                    {...props}\n                    to={toPermissionsConfigurationTabs({\n                      realm,\n                      permissionClientId,\n                      tab: \"permissions\",\n                    })}\n                  />\n                )}\n              >\n                {t(\"cancel\")}\n              </Button>\n            </div>\n          </ActionGroup>\n        </FormAccess>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["defaultValues","DecisionStrategy","Logic","COMPONENTS","Aggregate","Client","User","ClientScope","Group","Regex","Role","Time","JavaScript","isValidComponentType","value","NewPermissionPolicyDialog","permissionClientId","providers","policies","toggleDialog","onAssign","adminClient","useAdminClient","realmRepresentation","useRealm","t","useTranslation","form","useForm","addAlert","addError","useAlerts","handleSubmit","reset","isPermissionClient","policyTypeSelector","useWatch","getComponentType","ComponentType","useEffect","name","description","decisionStrategy","logic","save","policy","groups","roles","clients","rest","cleanedPolicy","createdPolicy","AlertVariant","error","jsx","Modal","ModalVariant","TextContent","Text","TextVariants","jsxs","Form","e","FormProvider","TextControl","SelectControl","provider","capitalize","LogicSelector","ActionGroup","Button","ButtonVariant","ExistingPoliciesDialog","open","rows","setRows","useState","filterType","setFilterType","isFilterTypeDropdownOpen","toggleIsFilterTypeDropdownOpen","useToggle","setProviders","useFetch","formattedProviders","p","sortBy","loader","first","max","search","params","Fragment","selectedPolicies","KeycloakDataTable","Dropdown","_","ref","MenuToggle","FilterIcon","CaretDownIcon","DropdownList","DropdownItem","selectedRows","capitalizeFirstLetterFormatter","ListEmptyState","AssignedPolicies","resourceType","control","getValues","setValue","trigger","errors","useFormContext","values","existingPoliciesOpen","setExistingPoliciesOpen","newPolicyOpen","setNewPolicyOpen","setSelectedPolicies","filteredPolicy","sortedProviders","assign","assignedPolicies","unAssign","updatedPolicies","selectedPolicy","filteredPolicies","FormGroup","HelpItem","Controller","id","newPolicy","event","rowData","FormErrorText","PermissionConfigurationDetails","realm","permissionId","useParams","navigate","useNavigate","permission","setPermission","setPolicies","resourceTypes","useSortedResourceTypes","resourceTypeScopes","useMemo","type","scopes","scope","filteredProviders","resources","resourceIds","resource","policyIds","scopeNames","newPermission","result","toPermissionConfigurationDetails","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","toPermissionsConfigurationTabs","ViewHeader","PageSection","FormAccess","NameDescription","ScopePicker","ResourceType","props","Link","KeycloakSpinner"],"mappings":"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"}