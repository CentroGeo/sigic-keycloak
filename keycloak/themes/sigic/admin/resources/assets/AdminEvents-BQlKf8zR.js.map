{"version":3,"file":"AdminEvents-BQlKf8zR.js","sources":["../../../../../../../src/events/ResourceLinks.tsx","../../../../../../../src/events/AdminEvents.tsx"],"sourcesContent":["import { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Tooltip } from \"@patternfly/react-core\";\n\nimport type AdminEventRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/adminEventRepresentation\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toClient } from \"../clients/routes/Client\";\nimport { toGroups } from \"../groups/routes/Groups\";\nimport { toClientScope } from \"../client-scopes/routes/ClientScope\";\nimport { toUser } from \"../user/routes/User\";\nimport { toRealmRole } from \"../realm-roles/routes/RealmRole\";\nimport { toFlow } from \"../authentication/routes/Flow\";\nimport { toEditOrganization } from \"../organizations/routes/EditOrganization\";\n\ntype ResourceLinkProps = {\n  event: AdminEventRepresentation;\n};\n\nconst MAX_TEXT_LENGTH = 38;\nconst Truncate = ({\n  text,\n  children,\n}: {\n  text?: string;\n  children: (text: string) => ReactElement;\n}) => {\n  const definedText = text || \"\";\n  const needsTruncation = definedText.length > MAX_TEXT_LENGTH;\n  const truncatedText = definedText.substring(0, MAX_TEXT_LENGTH);\n  return needsTruncation ? (\n    <Tooltip content={text}>{children(truncatedText + \"â€¦\")}</Tooltip>\n  ) : (\n    children(definedText)\n  );\n};\n\nconst isLinkable = (event: AdminEventRepresentation) => {\n  if (event.operationType === \"DELETE\") {\n    return false;\n  }\n  return (\n    event.resourceType === \"USER\" ||\n    event.resourceType === \"GROUP_MEMBERSHIP\" ||\n    event.resourceType === \"GROUP\" ||\n    event.resourceType === \"CLIENT\" ||\n    event.resourceType === \"ORGANIZATION\" ||\n    event.resourceType === \"ORGANIZATION_MEMBERSHIP\" ||\n    event.resourceType?.startsWith(\"AUTHORIZATION_RESOURCE\") ||\n    event.resourceType === \"CLIENT_SCOPE\" ||\n    event.resourceType === \"AUTH_FLOW\" ||\n    event.resourcePath?.startsWith(\"roles-by-id\")\n  );\n};\n\nconst idRegex = new RegExp(\n  /([0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})/,\n);\n\nconst createLink = (realm: string, event: AdminEventRepresentation) => {\n  const part = idRegex.exec(event.resourcePath!);\n  if (!part) {\n    console.warn(\"event didn't contain a valid link\", event);\n    return \"\";\n  }\n  const id = part[1];\n\n  if (\n    event.resourceType === \"CLIENT\" ||\n    event.resourceType?.startsWith(\"AUTHORIZATION_RESOURCE\")\n  ) {\n    return toClient({\n      realm,\n      clientId: id,\n      tab: event.resourceType === \"CLIENT\" ? \"settings\" : \"authorization\",\n    });\n  }\n\n  if (event.resourceType === \"GROUP\") {\n    return toGroups({ realm, id });\n  }\n\n  if (event.resourceType === \"CLIENT_SCOPE\") {\n    return toClientScope({ realm, id, tab: \"settings\" });\n  }\n\n  if (\n    event.resourceType === \"USER\" ||\n    event.resourceType === \"GROUP_MEMBERSHIP\"\n  ) {\n    return toUser({ realm, id, tab: \"settings\" });\n  }\n\n  if (event.resourceType === \"AUTH_FLOW\") {\n    return toFlow({ realm, id, usedBy: \"-\" });\n  }\n\n  if (event.resourcePath?.startsWith(\"roles-by-id\")) {\n    return toRealmRole({ realm, id, tab: \"details\" });\n  }\n\n  if (event.resourceType === \"ORGANIZATION\") {\n    return toEditOrganization({ realm, id, tab: \"settings\" });\n  }\n\n  if (event.resourceType === \"ORGANIZATION_MEMBERSHIP\") {\n    return toEditOrganization({ realm, id, tab: \"members\" });\n  }\n\n  return \"\";\n};\n\nexport const ResourceLink = ({ event }: ResourceLinkProps) => {\n  const { realm } = useRealm();\n  return (\n    <Truncate text={event.resourcePath}>\n      {(text) =>\n        isLinkable(event) ? (\n          <Link to={createLink(realm, event)}>{text}</Link>\n        ) : (\n          <span>{text}</span>\n        )\n      }\n    </Truncate>\n  );\n};\n\nexport const CellResourceLinkRenderer = (\n  adminEvent: AdminEventRepresentation,\n) => <ResourceLink event={adminEvent} />;\n","import type AdminEventRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/adminEventRepresentation\";\nimport {\n  Action,\n  KeycloakDataTable,\n  KeycloakSelect,\n  ListEmptyState,\n  SelectVariant,\n  TextControl,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Button,\n  Chip,\n  ChipGroup,\n  DatePicker,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport {\n  Table,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  cellWidth,\n} from \"@patternfly/react-table\";\nimport { pickBy } from \"lodash-es\";\nimport { PropsWithChildren, useMemo, useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { EventsBanners } from \"../Banners\";\nimport DropdownPanel from \"../components/dropdown-panel/DropdownPanel\";\nimport CodeEditor from \"../components/form/CodeEditor\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { prettyPrintJSON } from \"../util\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../utils/useFormatDate\";\nimport { CellResourceLinkRenderer } from \"./ResourceLinks\";\n\nimport \"./events.css\";\n\ntype DisplayDialogProps = {\n  titleKey: string;\n  onClose: () => void;\n};\n\ntype AdminEventSearchForm = {\n  resourceTypes: string[];\n  operationTypes: string[];\n  resourcePath: string;\n  dateFrom: string;\n  dateTo: string;\n  authClient: string;\n  authUser: string;\n  authRealm: string;\n  authIpAddress: string;\n};\n\nconst DisplayDialog = ({\n  titleKey,\n  onClose,\n  children,\n}: PropsWithChildren<DisplayDialogProps>) => {\n  const { t } = useTranslation();\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(titleKey)}\n      isOpen={true}\n      onClose={onClose}\n    >\n      {children}\n    </Modal>\n  );\n};\n\nconst DetailCell = (event: AdminEventRepresentation) => (\n  <DescriptionList isHorizontal className=\"keycloak_eventsection_details\">\n    {event.details &&\n      Object.entries(event.details).map(([key, value]) => (\n        <DescriptionListGroup key={key}>\n          <DescriptionListTerm>{key}</DescriptionListTerm>\n          <DescriptionListDescription>{value}</DescriptionListDescription>\n        </DescriptionListGroup>\n      ))}\n    {event.error && (\n      <DescriptionListGroup key=\"error\">\n        <DescriptionListTerm>error</DescriptionListTerm>\n        <DescriptionListDescription>{event.error}</DescriptionListDescription>\n      </DescriptionListGroup>\n    )}\n  </DescriptionList>\n);\n\ntype AdminEventsProps = {\n  resourcePath?: string;\n};\n\nexport const AdminEvents = ({ resourcePath }: AdminEventsProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const serverInfo = useServerInfo();\n  const formatDate = useFormatDate();\n  const resourceTypes = serverInfo.enums?.[\"resourceType\"];\n  const operationTypes = serverInfo.enums?.[\"operationType\"];\n\n  const [key, setKey] = useState(0);\n  const [searchDropdownOpen, setSearchDropdownOpen] = useState(false);\n  const [selectResourceTypesOpen, setSelectResourceTypesOpen] = useState(false);\n  const [selectOperationTypesOpen, setSelectOperationTypesOpen] =\n    useState(false);\n  const [activeFilters, setActiveFilters] = useState<\n    Partial<AdminEventSearchForm>\n  >({});\n\n  const defaultValues: AdminEventSearchForm = {\n    resourceTypes: [],\n    operationTypes: [],\n    resourcePath: resourcePath ? resourcePath : \"\",\n    dateFrom: \"\",\n    dateTo: \"\",\n    authClient: \"\",\n    authUser: \"\",\n    authRealm: \"\",\n    authIpAddress: \"\",\n  };\n\n  const [authEvent, setAuthEvent] = useState<AdminEventRepresentation>();\n  const [adminEventsEnabled, setAdminEventsEnabled] = useState<boolean>();\n  const [representationEvent, setRepresentationEvent] =\n    useState<AdminEventRepresentation>();\n\n  const filterLabels: Record<keyof AdminEventSearchForm, string> = {\n    resourceTypes: t(\"resourceTypes\"),\n    operationTypes: t(\"operationTypes\"),\n    resourcePath: t(\"resourcePath\"),\n    dateFrom: t(\"dateFrom\"),\n    dateTo: t(\"dateTo\"),\n    authClient: t(\"client\"),\n    authUser: t(\"userId\"),\n    authRealm: t(\"realm\"),\n    authIpAddress: t(\"ipAddress\"),\n  };\n\n  const form = useForm<AdminEventSearchForm>({\n    mode: \"onChange\",\n    defaultValues,\n  });\n  const {\n    getValues,\n    reset,\n    formState: { isDirty },\n    control,\n  } = form;\n\n  useFetch(\n    () => adminClient.realms.getConfigEvents({ realm }),\n    (events) => {\n      setAdminEventsEnabled(events?.adminEventsEnabled!);\n    },\n    [],\n  );\n\n  function loader(first?: number, max?: number) {\n    return adminClient.realms.findAdminEvents({\n      resourcePath,\n      // The admin client wants 'dateFrom' and 'dateTo' to be Date objects, however it cannot actually handle them so we need to cast to any.\n      ...(activeFilters as any),\n      realm,\n      first,\n      max,\n    });\n  }\n\n  function submitSearch() {\n    setSearchDropdownOpen(false);\n    commitFilters();\n  }\n\n  function resetSearch() {\n    reset();\n    commitFilters();\n  }\n\n  function removeFilter(key: keyof AdminEventSearchForm) {\n    const formValues: AdminEventSearchForm = { ...getValues() };\n    delete formValues[key];\n\n    reset({ ...defaultValues, ...formValues });\n    commitFilters();\n  }\n\n  function removeFilterValue(\n    key: keyof AdminEventSearchForm,\n    valueToRemove: string,\n  ) {\n    const formValues = getValues();\n    const fieldValue = formValues[key];\n    const newFieldValue = Array.isArray(fieldValue)\n      ? fieldValue.filter((val) => val !== valueToRemove)\n      : fieldValue;\n\n    reset({ ...formValues, [key]: newFieldValue });\n    commitFilters();\n  }\n\n  function commitFilters() {\n    const newFilters: Partial<AdminEventSearchForm> = pickBy(\n      getValues(),\n      (value) => value !== \"\" || (Array.isArray(value) && value.length > 0),\n    );\n\n    if (resourcePath) {\n      delete newFilters.resourcePath;\n    }\n\n    setActiveFilters(newFilters);\n    setKey(key + 1);\n  }\n\n  const code = useMemo(\n    () =>\n      representationEvent?.representation\n        ? prettyPrintJSON(JSON.parse(representationEvent.representation))\n        : \"\",\n    [representationEvent?.representation],\n  );\n\n  return (\n    <>\n      {authEvent && (\n        <DisplayDialog titleKey=\"auth\" onClose={() => setAuthEvent(undefined)}>\n          <Table\n            aria-label=\"authData\"\n            data-testid=\"auth-dialog\"\n            variant={TableVariant.compact}\n          >\n            <Thead>\n              <Tr>\n                <Th>{t(\"attribute\")}</Th>\n                <Th>{t(\"value\")}</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              <Tr>\n                <Td>{t(\"realm\")}</Td>\n                <Td>{authEvent.authDetails?.realmId}</Td>\n              </Tr>\n              <Tr>\n                <Td>{t(\"client\")}</Td>\n                <Td>{authEvent.authDetails?.clientId}</Td>\n              </Tr>\n              <Tr>\n                <Td>{t(\"user\")}</Td>\n                <Td>{authEvent.authDetails?.userId}</Td>\n              </Tr>\n              <Tr>\n                <Td>{t(\"ipAddress\")}</Td>\n                <Td>{authEvent.authDetails?.ipAddress}</Td>\n              </Tr>\n            </Tbody>\n          </Table>\n        </DisplayDialog>\n      )}\n      {representationEvent && (\n        <DisplayDialog\n          titleKey=\"representation\"\n          data-testid=\"representation-dialog\"\n          onClose={() => setRepresentationEvent(undefined)}\n        >\n          <CodeEditor readOnly value={code} language=\"json\" />\n        </DisplayDialog>\n      )}\n      {!adminEventsEnabled && <EventsBanners type=\"adminEvents\" />}\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        detailColumns={[\n          {\n            name: \"details\",\n            enabled: (event) => event.details !== undefined,\n            cellRenderer: DetailCell,\n          },\n        ]}\n        isPaginated\n        ariaLabelKey=\"adminEvents\"\n        toolbarItem={\n          <FormProvider {...form}>\n            <Flex\n              direction={{ default: \"column\" }}\n              spaceItems={{ default: \"spaceItemsNone\" }}\n            >\n              <FlexItem>\n                <DropdownPanel\n                  buttonText={t(\"searchForAdminEvent\")}\n                  setSearchDropdownOpen={setSearchDropdownOpen}\n                  searchDropdownOpen={searchDropdownOpen}\n                  marginRight=\"2.5rem\"\n                  width=\"15vw\"\n                >\n                  <Form\n                    isHorizontal\n                    className=\"keycloak__events_search__form\"\n                    data-testid=\"searchForm\"\n                  >\n                    <FormGroup\n                      label={t(\"resourceTypes\")}\n                      fieldId=\"kc-resourceTypes\"\n                      className=\"keycloak__events_search__form_label\"\n                    >\n                      <Controller\n                        name=\"resourceTypes\"\n                        control={control}\n                        render={({ field }) => (\n                          <KeycloakSelect\n                            className=\"keycloak__events_search__type_select\"\n                            data-testid=\"resource-types-searchField\"\n                            chipGroupProps={{\n                              numChips: 1,\n                              expandedText: t(\"hide\"),\n                              collapsedText: t(\"showRemaining\"),\n                            }}\n                            variant={SelectVariant.typeaheadMulti}\n                            typeAheadAriaLabel=\"Select\"\n                            onToggle={(isOpen) =>\n                              setSelectResourceTypesOpen(isOpen)\n                            }\n                            selections={field.value}\n                            onSelect={(selectedValue) => {\n                              const option = selectedValue.toString();\n                              const changedValue = field.value.includes(option)\n                                ? field.value.filter((item) => item !== option)\n                                : [...field.value, option];\n\n                              field.onChange(changedValue);\n                            }}\n                            onClear={() => {\n                              field.onChange([]);\n                            }}\n                            isOpen={selectResourceTypesOpen}\n                            aria-labelledby={\"resourceTypes\"}\n                            chipGroupComponent={\n                              <ChipGroup>\n                                {field.value.map((chip) => (\n                                  <Chip\n                                    key={chip}\n                                    onClick={(resource) => {\n                                      resource.stopPropagation();\n                                      field.onChange(\n                                        field.value.filter(\n                                          (val) => val !== chip,\n                                        ),\n                                      );\n                                    }}\n                                  >\n                                    {chip}\n                                  </Chip>\n                                ))}\n                              </ChipGroup>\n                            }\n                          >\n                            {resourceTypes?.map((option) => (\n                              <SelectOption key={option} value={option}>\n                                {option}\n                              </SelectOption>\n                            ))}\n                          </KeycloakSelect>\n                        )}\n                      />\n                    </FormGroup>\n                    <FormGroup\n                      label={t(\"operationTypes\")}\n                      fieldId=\"kc-operationTypes\"\n                      className=\"keycloak__events_search__form_label\"\n                    >\n                      <Controller\n                        name=\"operationTypes\"\n                        control={control}\n                        render={({ field }) => (\n                          <KeycloakSelect\n                            className=\"keycloak__events_search__type_select\"\n                            data-testid=\"operation-types-searchField\"\n                            chipGroupProps={{\n                              numChips: 1,\n                              expandedText: t(\"hide\"),\n                              collapsedText: t(\"showRemaining\"),\n                            }}\n                            variant={SelectVariant.typeaheadMulti}\n                            typeAheadAriaLabel=\"Select\"\n                            onToggle={(isOpen) =>\n                              setSelectOperationTypesOpen(isOpen)\n                            }\n                            selections={field.value}\n                            onSelect={(selectedValue) => {\n                              const option = selectedValue.toString();\n                              const changedValue = field.value.includes(option)\n                                ? field.value.filter((item) => item !== option)\n                                : [...field.value, option];\n\n                              field.onChange(changedValue);\n                            }}\n                            onClear={() => {\n                              field.onChange([]);\n                            }}\n                            isOpen={selectOperationTypesOpen}\n                            aria-labelledby={\"operationTypes\"}\n                            chipGroupComponent={\n                              <ChipGroup>\n                                {field.value.map((chip) => (\n                                  <Chip\n                                    key={chip}\n                                    onClick={(operation) => {\n                                      operation.stopPropagation();\n                                      field.onChange(\n                                        field.value.filter(\n                                          (val) => val !== chip,\n                                        ),\n                                      );\n                                    }}\n                                  >\n                                    {chip}\n                                  </Chip>\n                                ))}\n                              </ChipGroup>\n                            }\n                          >\n                            {operationTypes?.map((option) => (\n                              <SelectOption\n                                key={option.toString()}\n                                value={option}\n                              >\n                                {option}\n                              </SelectOption>\n                            ))}\n                          </KeycloakSelect>\n                        )}\n                      />\n                    </FormGroup>\n                    {!resourcePath && (\n                      <TextControl\n                        name=\"resourcePath\"\n                        label={t(\"resourcePath\")}\n                      />\n                    )}\n                    <TextControl name=\"authRealm\" label={t(\"realm\")} />\n                    <TextControl name=\"authClient\" label={t(\"client\")} />\n                    <TextControl name=\"authUser\" label={t(\"userId\")} />\n                    <TextControl name=\"authIpAddress\" label={t(\"ipAddress\")} />\n                    <FormGroup\n                      label={t(\"dateFrom\")}\n                      fieldId=\"kc-dateFrom\"\n                      className=\"keycloak__events_search__form_label\"\n                    >\n                      <Controller\n                        name=\"dateFrom\"\n                        control={control}\n                        render={({ field }) => (\n                          <DatePicker\n                            className=\"pf-v5-u-w-100\"\n                            value={field.value}\n                            onChange={(_, value) => field.onChange(value)}\n                            inputProps={{ id: \"kc-dateFrom\" }}\n                          />\n                        )}\n                      />\n                    </FormGroup>\n                    <FormGroup\n                      label={t(\"dateTo\")}\n                      fieldId=\"kc-dateTo\"\n                      className=\"keycloak__events_search__form_label\"\n                    >\n                      <Controller\n                        name=\"dateTo\"\n                        control={control}\n                        render={({ field }) => (\n                          <DatePicker\n                            className=\"pf-v5-u-w-100\"\n                            value={field.value}\n                            onChange={(_, value) => field.onChange(value)}\n                            inputProps={{ id: \"kc-dateTo\" }}\n                          />\n                        )}\n                      />\n                    </FormGroup>\n                    <ActionGroup>\n                      <Button\n                        variant={\"primary\"}\n                        onClick={submitSearch}\n                        data-testid=\"search-events-btn\"\n                        isDisabled={!isDirty}\n                      >\n                        {t(\"searchAdminEventsBtn\")}\n                      </Button>\n                      <Button\n                        variant=\"secondary\"\n                        onClick={resetSearch}\n                        isDisabled={!isDirty}\n                      >\n                        {t(\"resetBtn\")}\n                      </Button>\n                    </ActionGroup>\n                  </Form>\n                </DropdownPanel>\n              </FlexItem>\n              <FlexItem>\n                {Object.entries(activeFilters).length > 0 && (\n                  <div className=\"keycloak__searchChips pf-v5-u-ml-md\">\n                    {Object.entries(activeFilters).map((filter) => {\n                      const [key, value] = filter as [\n                        keyof AdminEventSearchForm,\n                        string | string[],\n                      ];\n\n                      if (key === \"resourcePath\" && !!resourcePath) {\n                        return null;\n                      }\n\n                      return (\n                        <ChipGroup\n                          className=\"pf-v5-u-mt-md pf-v5-u-mr-md\"\n                          key={key}\n                          categoryName={filterLabels[key]}\n                          onClick={() => removeFilter(key)}\n                        >\n                          {typeof value === \"string\" ? (\n                            <Chip isReadOnly>{value}</Chip>\n                          ) : (\n                            value.map((entry) => (\n                              <Chip\n                                key={entry}\n                                onClick={() => removeFilterValue(key, entry)}\n                              >\n                                {entry}\n                              </Chip>\n                            ))\n                          )}\n                        </ChipGroup>\n                      );\n                    })}\n                  </div>\n                )}\n              </FlexItem>\n            </Flex>\n          </FormProvider>\n        }\n        actions={\n          [\n            {\n              title: t(\"auth\"),\n              onRowClick: (event) => setAuthEvent(event),\n            },\n            {\n              title: t(\"representation\"),\n              onRowClick: (event) => setRepresentationEvent(event),\n            },\n          ] as Action<AdminEventRepresentation>[]\n        }\n        columns={[\n          {\n            name: \"time\",\n            displayKey: \"time\",\n            cellRenderer: (row) =>\n              formatDate(new Date(row.time!), FORMAT_DATE_AND_TIME),\n          },\n          {\n            name: \"resourcePath\",\n            displayKey: \"resourcePath\",\n            cellRenderer: CellResourceLinkRenderer,\n          },\n          {\n            name: \"resourceType\",\n            displayKey: \"resourceType\",\n          },\n          {\n            name: \"operationType\",\n            displayKey: \"operationType\",\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"\",\n            displayKey: \"user\",\n            cellRenderer: (event) => event.authDetails?.userId || \"\",\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyAdminEvents\")}\n            instructions={t(\"emptyAdminEventsInstructions\")}\n            primaryActionText={t(\"refresh\")}\n            onPrimaryAction={() => setKey(key + 1)}\n          />\n        }\n        isSearching={Object.keys(activeFilters).length > 0}\n      />\n    </>\n  );\n};\n"],"names":["MAX_TEXT_LENGTH","Truncate","text","children","definedText","needsTruncation","truncatedText","jsx","Tooltip","isLinkable","event","idRegex","createLink","realm","part","id","toClient","toGroups","toClientScope","toUser","toFlow","toRealmRole","toEditOrganization","ResourceLink","useRealm","Link","CellResourceLinkRenderer","adminEvent","DisplayDialog","titleKey","onClose","t","useTranslation","Modal","ModalVariant","DetailCell","jsxs","DescriptionList","key","value","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","AdminEvents","resourcePath","adminClient","useAdminClient","serverInfo","useServerInfo","formatDate","useFormatDate","resourceTypes","operationTypes","setKey","useState","searchDropdownOpen","setSearchDropdownOpen","selectResourceTypesOpen","setSelectResourceTypesOpen","selectOperationTypesOpen","setSelectOperationTypesOpen","activeFilters","setActiveFilters","defaultValues","authEvent","setAuthEvent","adminEventsEnabled","setAdminEventsEnabled","representationEvent","setRepresentationEvent","filterLabels","form","useForm","getValues","reset","isDirty","control","useFetch","events","loader","first","max","submitSearch","commitFilters","resetSearch","removeFilter","formValues","removeFilterValue","valueToRemove","fieldValue","newFieldValue","val","newFilters","pickBy","code","useMemo","prettyPrintJSON","Fragment","Table","TableVariant","Thead","Tr","Th","Tbody","Td","CodeEditor","EventsBanners","KeycloakDataTable","FormProvider","Flex","FlexItem","DropdownPanel","Form","FormGroup","Controller","field","KeycloakSelect","SelectVariant","isOpen","selectedValue","option","changedValue","item","ChipGroup","chip","Chip","resource","SelectOption","operation","TextControl","DatePicker","_","ActionGroup","Button","filter","entry","row","FORMAT_DATE_AND_TIME","cellWidth","ListEmptyState"],"mappings":"0yBAkBA,MAAMA,EAAkB,GAClBC,GAAW,CAAC,CAChB,KAAAC,EACA,SAAAC,CACF,IAGM,CACJ,MAAMC,EAAcF,GAAQ,GACtBG,EAAkBD,EAAY,OAASJ,EACvCM,EAAgBF,EAAY,UAAU,EAAGJ,CAAe,EACvD,OAAAK,EACJE,EAAAC,GAAA,CAAQ,QAASN,EAAO,SAASC,EAAAG,EAAgB,GAAG,CAAE,CAAA,EAEvDH,EAASC,CAAW,CAExB,EAEMK,GAAcC,GACdA,EAAM,gBAAkB,SACnB,GAGPA,EAAM,eAAiB,QACvBA,EAAM,eAAiB,oBACvBA,EAAM,eAAiB,SACvBA,EAAM,eAAiB,UACvBA,EAAM,eAAiB,gBACvBA,EAAM,eAAiB,2BACvBA,EAAM,cAAc,WAAW,wBAAwB,GACvDA,EAAM,eAAiB,gBACvBA,EAAM,eAAiB,aACvBA,EAAM,cAAc,WAAW,aAAa,EAI1CC,GAAU,IAAI,OAClB,sDACF,EAEMC,GAAa,CAACC,EAAeH,IAAoC,CACrE,MAAMI,EAAOH,GAAQ,KAAKD,EAAM,YAAa,EAC7C,GAAI,CAACI,EACK,eAAA,KAAK,oCAAqCJ,CAAK,EAChD,GAEH,MAAAK,EAAKD,EAAK,CAAC,EAEjB,OACEJ,EAAM,eAAiB,UACvBA,EAAM,cAAc,WAAW,wBAAwB,EAEhDM,GAAS,CACd,MAAAH,EACA,SAAUE,EACV,IAAKL,EAAM,eAAiB,SAAW,WAAa,eAAA,CACrD,EAGCA,EAAM,eAAiB,QAClBO,GAAS,CAAE,MAAAJ,EAAO,GAAAE,EAAI,EAG3BL,EAAM,eAAiB,eAClBQ,GAAc,CAAE,MAAAL,EAAO,GAAAE,EAAI,IAAK,WAAY,EAInDL,EAAM,eAAiB,QACvBA,EAAM,eAAiB,mBAEhBS,GAAO,CAAE,MAAAN,EAAO,GAAAE,EAAI,IAAK,WAAY,EAG1CL,EAAM,eAAiB,YAClBU,GAAO,CAAE,MAAAP,EAAO,GAAAE,EAAI,OAAQ,IAAK,EAGtCL,EAAM,cAAc,WAAW,aAAa,EACvCW,GAAY,CAAE,MAAAR,EAAO,GAAAE,EAAI,IAAK,UAAW,EAG9CL,EAAM,eAAiB,eAClBY,EAAmB,CAAE,MAAAT,EAAO,GAAAE,EAAI,IAAK,WAAY,EAGtDL,EAAM,eAAiB,0BAClBY,EAAmB,CAAE,MAAAT,EAAO,GAAAE,EAAI,IAAK,UAAW,EAGlD,EACT,EAEaQ,GAAe,CAAC,CAAE,MAAAb,KAA+B,CACtD,KAAA,CAAE,MAAAG,CAAM,EAAIW,EAAS,EAEzB,OAAAjB,EAACN,IAAS,KAAMS,EAAM,aACnB,SAACR,GACAO,GAAWC,CAAK,EACdH,EAACkB,IAAK,GAAIb,GAAWC,EAAOH,CAAK,EAAI,WAAK,EAE1CH,EAAC,OAAM,CAAA,SAAAL,CAAA,CAAK,CAGlB,CAAA,CAEJ,EAEawB,GACXC,GACIpB,EAAAgB,GAAA,CAAa,MAAOI,EAAY,ECzDhCC,EAAgB,CAAC,CACrB,SAAAC,EACA,QAAAC,EACA,SAAA3B,CACF,IAA6C,CACrC,KAAA,CAAE,EAAA4B,CAAE,EAAIC,EAAe,EAE3B,OAAAzB,EAAC0B,GAAA,CACC,QAASC,GAAa,OACtB,MAAOH,EAAEF,CAAQ,EACjB,OAAQ,GACR,QAAAC,EAEC,SAAA3B,CAAA,CACH,CAEJ,EAEMgC,GAAczB,GAClB0B,EAACC,IAAgB,aAAY,GAAC,UAAU,gCACrC,SAAA,CAAA3B,EAAM,SACL,OAAO,QAAQA,EAAM,OAAO,EAAE,IAAI,CAAC,CAAC4B,EAAKC,CAAK,MAC3CC,EACC,CAAA,SAAA,CAAAjC,EAACkC,GAAqB,SAAIH,CAAA,CAAA,EAC1B/B,EAACmC,GAA4B,SAAMH,CAAA,CAAA,CAAA,CAAA,EAFVD,CAG3B,CACD,EACF5B,EAAM,OACL0B,EAACI,EACC,CAAA,SAAA,CAAAjC,EAACkC,GAAoB,SAAK,OAAA,CAAA,EAC1BlC,EAACmC,EAA4B,CAAA,SAAAhC,EAAM,KAAM,CAAA,CAAA,CAAA,EAFjB,OAG1B,CAAA,EAEJ,EAOWiC,GAAc,CAAC,CAAE,aAAAC,KAAqC,CAC3D,KAAA,CAAE,YAAAC,CAAY,EAAIC,GAAe,EAEjC,CAAE,EAAAf,CAAE,EAAIC,EAAe,EACvB,CAAE,MAAAnB,CAAM,EAAIW,EAAS,EACrBuB,EAAaC,GAAc,EAC3BC,EAAaC,GAAc,EAC3BC,EAAgBJ,EAAW,OAAQ,aACnCK,EAAiBL,EAAW,OAAQ,cAEpC,CAACT,EAAKe,CAAM,EAAIC,EAAS,CAAC,EAC1B,CAACC,EAAoBC,CAAqB,EAAIF,EAAS,EAAK,EAC5D,CAACG,GAAyBC,EAA0B,EAAIJ,EAAS,EAAK,EACtE,CAACK,GAA0BC,EAA2B,EAC1DN,EAAS,EAAK,EACV,CAACO,EAAeC,EAAgB,EAAIR,EAExC,CAAA,CAAE,EAEES,EAAsC,CAC1C,cAAe,CAAC,EAChB,eAAgB,CAAC,EACjB,aAAcnB,GAA8B,GAC5C,SAAU,GACV,OAAQ,GACR,WAAY,GACZ,SAAU,GACV,UAAW,GACX,cAAe,EACjB,EAEM,CAACoB,EAAWC,CAAY,EAAIX,EAAmC,EAC/D,CAACY,GAAoBC,EAAqB,EAAIb,EAAkB,EAChE,CAACc,EAAqBC,CAAsB,EAChDf,EAAmC,EAE/BgB,GAA2D,CAC/D,cAAevC,EAAE,eAAe,EAChC,eAAgBA,EAAE,gBAAgB,EAClC,aAAcA,EAAE,cAAc,EAC9B,SAAUA,EAAE,UAAU,EACtB,OAAQA,EAAE,QAAQ,EAClB,WAAYA,EAAE,QAAQ,EACtB,SAAUA,EAAE,QAAQ,EACpB,UAAWA,EAAE,OAAO,EACpB,cAAeA,EAAE,WAAW,CAC9B,EAEMwC,EAAOC,GAA8B,CACzC,KAAM,WACN,cAAAT,CAAA,CACD,EACK,CACJ,UAAAU,EACA,MAAAC,EACA,UAAW,CAAE,QAAAC,CAAQ,EACrB,QAAAC,CAAA,EACEL,EAEJM,GACE,IAAMhC,EAAY,OAAO,gBAAgB,CAAE,MAAAhC,EAAO,EACjDiE,GAAW,CACVX,GAAsBW,GAAQ,kBAAmB,CACnD,EACA,CAAA,CACF,EAES,SAAAC,GAAOC,EAAgBC,EAAc,CACrC,OAAApC,EAAY,OAAO,gBAAgB,CACxC,aAAAD,EAEA,GAAIiB,EACJ,MAAAhD,EACA,MAAAmE,EACA,IAAAC,CAAA,CACD,CAAA,CAGH,SAASC,IAAe,CACtB1B,EAAsB,EAAK,EACb2B,EAAA,CAAA,CAGhB,SAASC,IAAc,CACfV,EAAA,EACQS,EAAA,CAAA,CAGhB,SAASE,GAAa/C,EAAiC,CACrD,MAAMgD,EAAmC,CAAE,GAAGb,GAAY,EAC1D,OAAOa,EAAWhD,CAAG,EAErBoC,EAAM,CAAE,GAAGX,EAAe,GAAGuB,EAAY,EAC3BH,EAAA,CAAA,CAGP,SAAAI,GACPjD,EACAkD,EACA,CACA,MAAMF,EAAab,EAAU,EACvBgB,EAAaH,EAAWhD,CAAG,EAC3BoD,EAAgB,MAAM,QAAQD,CAAU,EAC1CA,EAAW,OAAQE,IAAQA,KAAQH,CAAa,EAChDC,EAEJf,EAAM,CAAE,GAAGY,EAAY,CAAChD,CAAG,EAAGoD,EAAe,EAC/BP,EAAA,CAAA,CAGhB,SAASA,GAAgB,CACvB,MAAMS,EAA4CC,GAChDpB,EAAU,EACTlC,GAAUA,IAAU,IAAO,MAAM,QAAQA,CAAK,GAAKA,EAAM,OAAS,CACrE,EAEIK,GACF,OAAOgD,EAAW,aAGpB9B,GAAiB8B,CAAU,EAC3BvC,EAAOf,EAAM,CAAC,CAAA,CAGhB,MAAMwD,GAAOC,GACX,IACE3B,GAAqB,eACjB4B,GAAgB,KAAK,MAAM5B,EAAoB,cAAc,CAAC,EAC9D,GACN,CAACA,GAAqB,cAAc,CACtC,EAEA,OAEKhC,EAAA6D,GAAA,CAAA,SAAA,CACCjC,GAAAzD,EAACqB,GAAc,SAAS,OAAO,QAAS,IAAMqC,EAAa,MAAS,EAClE,SAAA7B,EAAC8D,GAAA,CACC,aAAW,WACX,cAAY,cACZ,QAASC,GAAa,QAEtB,SAAA,CAAC5F,EAAA6F,GAAA,CACC,WAACC,EACC,CAAA,SAAA,CAAC9F,EAAA+F,EAAA,CAAI,SAAEvE,EAAA,WAAW,CAAE,CAAA,EACnBxB,EAAA+F,EAAA,CAAI,SAAEvE,EAAA,OAAO,CAAE,CAAA,CAAA,CAAA,CAClB,CACF,CAAA,IACCwE,GACC,CAAA,SAAA,CAAAnE,EAACiE,EACC,CAAA,SAAA,CAAC9F,EAAAiG,EAAA,CAAI,SAAEzE,EAAA,OAAO,CAAE,CAAA,EACfxB,EAAAiG,EAAA,CAAI,SAAUxC,EAAA,aAAa,OAAQ,CAAA,CAAA,EACtC,IACCqC,EACC,CAAA,SAAA,CAAC9F,EAAAiG,EAAA,CAAI,SAAEzE,EAAA,QAAQ,CAAE,CAAA,EAChBxB,EAAAiG,EAAA,CAAI,SAAUxC,EAAA,aAAa,QAAS,CAAA,CAAA,EACvC,IACCqC,EACC,CAAA,SAAA,CAAC9F,EAAAiG,EAAA,CAAI,SAAEzE,EAAA,MAAM,CAAE,CAAA,EACdxB,EAAAiG,EAAA,CAAI,SAAUxC,EAAA,aAAa,MAAO,CAAA,CAAA,EACrC,IACCqC,EACC,CAAA,SAAA,CAAC9F,EAAAiG,EAAA,CAAI,SAAEzE,EAAA,WAAW,CAAE,CAAA,EACnBxB,EAAAiG,EAAA,CAAI,SAAUxC,EAAA,aAAa,SAAU,CAAA,CAAA,CACxC,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CAAA,EAEJ,EAEDI,GACC7D,EAACqB,EAAA,CACC,SAAS,iBACT,cAAY,wBACZ,QAAS,IAAMyC,EAAuB,MAAS,EAE/C,WAACoC,GAAW,CAAA,SAAQ,GAAC,MAAOX,GAAM,SAAS,MAAO,CAAA,CAAA,CACpD,EAED,CAAC5B,IAAuB3D,EAAAmG,GAAA,CAAc,KAAK,aAAc,CAAA,EAC1DnG,EAACoG,GAAA,CAEC,OAAA5B,GACA,cAAe,CACb,CACE,KAAM,UACN,QAAUrE,GAAUA,EAAM,UAAY,OACtC,aAAcyB,EAAA,CAElB,EACA,YAAW,GACX,aAAa,cACb,YACE5B,EAACqG,GAAc,CAAA,GAAGrC,EAChB,SAAAnC,EAACyE,GAAA,CACC,UAAW,CAAE,QAAS,QAAS,EAC/B,WAAY,CAAE,QAAS,gBAAiB,EAExC,SAAA,CAAAtG,EAACuG,EACC,CAAA,SAAAvG,EAACwG,GAAA,CACC,WAAYhF,EAAE,qBAAqB,EACnC,sBAAAyB,EACA,mBAAAD,EACA,YAAY,SACZ,MAAM,OAEN,SAAAnB,EAAC4E,GAAA,CACC,aAAY,GACZ,UAAU,gCACV,cAAY,aAEZ,SAAA,CAAAzG,EAAC0G,EAAA,CACC,MAAOlF,EAAE,eAAe,EACxB,QAAQ,mBACR,UAAU,sCAEV,SAAAxB,EAAC2G,EAAA,CACC,KAAK,gBACL,QAAAtC,EACA,OAAQ,CAAC,CAAE,MAAAuC,CAAA,IACT5G,EAAC6G,EAAA,CACC,UAAU,uCACV,cAAY,6BACZ,eAAgB,CACd,SAAU,EACV,aAAcrF,EAAE,MAAM,EACtB,cAAeA,EAAE,eAAe,CAClC,EACA,QAASsF,EAAc,eACvB,mBAAmB,SACnB,SAAWC,GACT5D,GAA2B4D,CAAM,EAEnC,WAAYH,EAAM,MAClB,SAAWI,GAAkB,CACrB,MAAAC,EAASD,EAAc,SAAS,EAChCE,EAAeN,EAAM,MAAM,SAASK,CAAM,EAC5CL,EAAM,MAAM,OAAQO,GAASA,IAASF,CAAM,EAC5C,CAAC,GAAGL,EAAM,MAAOK,CAAM,EAE3BL,EAAM,SAASM,CAAY,CAC7B,EACA,QAAS,IAAM,CACPN,EAAA,SAAS,EAAE,CACnB,EACA,OAAQ1D,GACR,kBAAiB,gBACjB,mBACGlD,EAAAoH,EAAA,CACE,WAAM,MAAM,IAAKC,GAChBrH,EAACsH,EAAA,CAEC,QAAUC,GAAa,CACrBA,EAAS,gBAAgB,EACnBX,EAAA,SACJA,EAAM,MAAM,OACTxB,GAAQA,IAAQiC,CAAA,CAErB,CACF,EAEC,SAAAA,CAAA,EAVIA,CAYR,CAAA,EACH,EAGD,SAAAzE,GAAe,IAAKqE,GACnBjH,EAACwH,GAA0B,MAAOP,EAC/B,SADgBA,CAAA,EAAAA,CAEnB,CACD,CAAA,CAAA,CACH,CAAA,CAEJ,CACF,EACAjH,EAAC0G,EAAA,CACC,MAAOlF,EAAE,gBAAgB,EACzB,QAAQ,oBACR,UAAU,sCAEV,SAAAxB,EAAC2G,EAAA,CACC,KAAK,iBACL,QAAAtC,EACA,OAAQ,CAAC,CAAE,MAAAuC,CAAA,IACT5G,EAAC6G,EAAA,CACC,UAAU,uCACV,cAAY,8BACZ,eAAgB,CACd,SAAU,EACV,aAAcrF,EAAE,MAAM,EACtB,cAAeA,EAAE,eAAe,CAClC,EACA,QAASsF,EAAc,eACvB,mBAAmB,SACnB,SAAWC,GACT1D,GAA4B0D,CAAM,EAEpC,WAAYH,EAAM,MAClB,SAAWI,GAAkB,CACrB,MAAAC,EAASD,EAAc,SAAS,EAChCE,EAAeN,EAAM,MAAM,SAASK,CAAM,EAC5CL,EAAM,MAAM,OAAQO,GAASA,IAASF,CAAM,EAC5C,CAAC,GAAGL,EAAM,MAAOK,CAAM,EAE3BL,EAAM,SAASM,CAAY,CAC7B,EACA,QAAS,IAAM,CACPN,EAAA,SAAS,EAAE,CACnB,EACA,OAAQxD,GACR,kBAAiB,iBACjB,mBACGpD,EAAAoH,EAAA,CACE,WAAM,MAAM,IAAKC,GAChBrH,EAACsH,EAAA,CAEC,QAAUG,GAAc,CACtBA,EAAU,gBAAgB,EACpBb,EAAA,SACJA,EAAM,MAAM,OACTxB,GAAQA,IAAQiC,CAAA,CAErB,CACF,EAEC,SAAAA,CAAA,EAVIA,CAYR,CAAA,EACH,EAGD,SAAAxE,GAAgB,IAAKoE,GACpBjH,EAACwH,EAAA,CAEC,MAAOP,EAEN,SAAAA,CAAA,EAHIA,EAAO,SAAS,CAKxB,CAAA,CAAA,CAAA,CACH,CAAA,CAEJ,CACF,EACC,CAAC5E,GACArC,EAAC0H,EAAA,CACC,KAAK,eACL,MAAOlG,EAAE,cAAc,CAAA,CACzB,IAEDkG,EAAY,CAAA,KAAK,YAAY,MAAOlG,EAAE,OAAO,EAAG,IAChDkG,EAAY,CAAA,KAAK,aAAa,MAAOlG,EAAE,QAAQ,EAAG,IAClDkG,EAAY,CAAA,KAAK,WAAW,MAAOlG,EAAE,QAAQ,EAAG,IAChDkG,EAAY,CAAA,KAAK,gBAAgB,MAAOlG,EAAE,WAAW,EAAG,EACzDxB,EAAC0G,EAAA,CACC,MAAOlF,EAAE,UAAU,EACnB,QAAQ,cACR,UAAU,sCAEV,SAAAxB,EAAC2G,EAAA,CACC,KAAK,WACL,QAAAtC,EACA,OAAQ,CAAC,CAAE,MAAAuC,CAAA,IACT5G,EAAC2H,EAAA,CACC,UAAU,gBACV,MAAOf,EAAM,MACb,SAAU,CAACgB,EAAG5F,IAAU4E,EAAM,SAAS5E,CAAK,EAC5C,WAAY,CAAE,GAAI,aAAc,CAAA,CAAA,CAClC,CAAA,CAEJ,CACF,EACAhC,EAAC0G,EAAA,CACC,MAAOlF,EAAE,QAAQ,EACjB,QAAQ,YACR,UAAU,sCAEV,SAAAxB,EAAC2G,EAAA,CACC,KAAK,SACL,QAAAtC,EACA,OAAQ,CAAC,CAAE,MAAAuC,CAAA,IACT5G,EAAC2H,EAAA,CACC,UAAU,gBACV,MAAOf,EAAM,MACb,SAAU,CAACgB,EAAG5F,IAAU4E,EAAM,SAAS5E,CAAK,EAC5C,WAAY,CAAE,GAAI,WAAY,CAAA,CAAA,CAChC,CAAA,CAEJ,CACF,IACC6F,GACC,CAAA,SAAA,CAAA7H,EAAC8H,EAAA,CACC,QAAS,UACT,QAASnD,GACT,cAAY,oBACZ,WAAY,CAACP,EAEZ,WAAE,sBAAsB,CAAA,CAC3B,EACApE,EAAC8H,EAAA,CACC,QAAQ,YACR,QAASjD,GACT,WAAY,CAACT,EAEZ,WAAE,UAAU,CAAA,CAAA,CACf,CACF,CAAA,CAAA,CAAA,CAAA,CACF,CAAA,EAEJ,IACCmC,EACE,CAAA,SAAA,OAAO,QAAQjD,CAAa,EAAE,OAAS,GACtCtD,EAAC,MAAI,CAAA,UAAU,sCACZ,SAAO,OAAA,QAAQsD,CAAa,EAAE,IAAKyE,GAAW,CACvC,KAAA,CAAChG,EAAKC,CAAK,EAAI+F,EAKrB,OAAIhG,IAAQ,gBAAoBM,EACvB,KAIPrC,EAACoH,EAAA,CACC,UAAU,8BAEV,aAAcrD,GAAahC,CAAG,EAC9B,QAAS,IAAM+C,GAAa/C,CAAG,EAE9B,SAAO,OAAAC,GAAU,SAChBhC,EAACsH,EAAK,CAAA,WAAU,GAAE,SAAAtF,CAAA,CAAM,EAExBA,EAAM,IAAKgG,GACThI,EAACsH,EAAA,CAEC,QAAS,IAAMtC,GAAkBjD,EAAKiG,CAAK,EAE1C,SAAAA,CAAA,EAHIA,CAKR,CAAA,CAAA,EAdEjG,CAgBP,CAEH,CAAA,CACH,CAAA,CAEJ,CAAA,CAAA,CAAA,CAAA,EAEJ,EAEF,QACE,CACE,CACE,MAAOP,EAAE,MAAM,EACf,WAAarB,GAAUuD,EAAavD,CAAK,CAC3C,EACA,CACE,MAAOqB,EAAE,gBAAgB,EACzB,WAAarB,GAAU2D,EAAuB3D,CAAK,CAAA,CAEvD,EAEF,QAAS,CACP,CACE,KAAM,OACN,WAAY,OACZ,aAAe8H,GACbvF,EAAW,IAAI,KAAKuF,EAAI,IAAK,EAAGC,EAAoB,CACxD,EACA,CACE,KAAM,eACN,WAAY,eACZ,aAAc/G,EAChB,EACA,CACE,KAAM,eACN,WAAY,cACd,EACA,CACE,KAAM,gBACN,WAAY,gBACZ,WAAY,CAACgH,GAAU,EAAE,CAAC,CAC5B,EACA,CACE,KAAM,GACN,WAAY,OACZ,aAAehI,GAAUA,EAAM,aAAa,QAAU,EAAA,CAE1D,EACA,WACEH,EAACoI,GAAA,CACC,QAAS5G,EAAE,kBAAkB,EAC7B,aAAcA,EAAE,8BAA8B,EAC9C,kBAAmBA,EAAE,SAAS,EAC9B,gBAAiB,IAAMsB,EAAOf,EAAM,CAAC,CAAA,CACvC,EAEF,YAAa,OAAO,KAAKuB,CAAa,EAAE,OAAS,CAAA,EA7T5CvB,CAAA,CA8TP,EACF,CAEJ"}