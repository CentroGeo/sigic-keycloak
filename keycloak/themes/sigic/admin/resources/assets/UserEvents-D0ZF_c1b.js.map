{"version":3,"file":"UserEvents-D0ZF_c1b.js","sources":["../../../../../../../src/events/UserEvents.tsx"],"sourcesContent":["import type EventRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/eventRepresentation\";\nimport type EventType from \"@keycloak/keycloak-admin-client/lib/defs/eventTypes\";\nimport {\n  KeycloakDataTable,\n  KeycloakSelect,\n  ListEmptyState,\n  SelectVariant,\n  TextControl,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Button,\n  Chip,\n  ChipGroup,\n  DatePicker,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  Icon,\n  SelectOption,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { CheckCircleIcon, WarningTriangleIcon } from \"@patternfly/react-icons\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport { pickBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { EventsBanners } from \"../Banners\";\nimport DropdownPanel from \"../components/dropdown-panel/DropdownPanel\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toUser } from \"../user/routes/User\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../utils/useFormatDate\";\nimport useLocaleSort from \"../utils/useLocaleSort\";\n\nimport \"./events.css\";\n\ntype UserEventSearchForm = {\n  client: string;\n  dateFrom: string;\n  dateTo: string;\n  user: string;\n  type: EventType[];\n  ipAddress: string;\n};\n\nconst StatusRow = (event: EventRepresentation) =>\n  !event.error ? (\n    <span>\n      <Icon status=\"success\">\n        <CheckCircleIcon />\n      </Icon>\n      {event.type}\n    </span>\n  ) : (\n    <Tooltip content={event.error}>\n      <span>\n        <Icon status=\"warning\">\n          <WarningTriangleIcon />\n        </Icon>\n        {event.type}\n      </span>\n    </Tooltip>\n  );\n\nconst DetailCell = (event: EventRepresentation) => (\n  <DescriptionList isHorizontal className=\"keycloak_eventsection_details\">\n    {event.details &&\n      Object.entries(event.details).map(([key, value]) => (\n        <DescriptionListGroup key={key}>\n          <DescriptionListTerm>{key}</DescriptionListTerm>\n          <DescriptionListDescription>{value}</DescriptionListDescription>\n        </DescriptionListGroup>\n      ))}\n    {event.error && (\n      <DescriptionListGroup key=\"error\">\n        <DescriptionListTerm>error</DescriptionListTerm>\n        <DescriptionListDescription>{event.error}</DescriptionListDescription>\n      </DescriptionListGroup>\n    )}\n  </DescriptionList>\n);\n\nconst UserDetailLink = (event: EventRepresentation) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n\n  return (\n    <>\n      {event.userId && (\n        <Link\n          key={`link-${event.time}-${event.type}`}\n          to={toUser({\n            realm,\n            id: event.userId,\n            tab: \"settings\",\n          })}\n        >\n          {event.userId}\n        </Link>\n      )}\n      {!event.userId && t(\"noUserDetails\")}\n    </>\n  );\n};\n\ntype UserEventsProps = {\n  user?: string;\n  client?: string;\n};\n\nexport const UserEvents = ({ user, client }: UserEventsProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const localeSort = useLocaleSort();\n  const { realm } = useRealm();\n  const formatDate = useFormatDate();\n  const [key, setKey] = useState(0);\n  const [searchDropdownOpen, setSearchDropdownOpen] = useState(false);\n  const [selectOpen, setSelectOpen] = useState(false);\n  const [events, setEvents] = useState<string[]>();\n  const [userEventsEnabled, setUserEventsEnabled] = useState<boolean>();\n  const [activeFilters, setActiveFilters] = useState<\n    Partial<UserEventSearchForm>\n  >({});\n\n  const defaultValues: UserEventSearchForm = {\n    client: client ? client : \"\",\n    dateFrom: \"\",\n    dateTo: \"\",\n    user: user ? user : \"\",\n    type: [],\n    ipAddress: \"\",\n  };\n\n  const filterLabels: Record<keyof UserEventSearchForm, string> = {\n    client: t(\"client\"),\n    dateFrom: t(\"dateFrom\"),\n    dateTo: t(\"dateTo\"),\n    user: t(\"userId\"),\n    type: t(\"eventType\"),\n    ipAddress: t(\"ipAddress\"),\n  };\n\n  const form = useForm<UserEventSearchForm>({\n    mode: \"onChange\",\n    defaultValues,\n  });\n\n  const {\n    getValues,\n    reset,\n    formState: { isDirty },\n    control,\n    handleSubmit,\n  } = form;\n\n  useFetch(\n    () => adminClient.realms.getConfigEvents({ realm }),\n    (events) => {\n      setUserEventsEnabled(events?.eventsEnabled!);\n      setEvents(localeSort(events?.enabledEventTypes || [], (e) => e));\n    },\n    [],\n  );\n\n  function loader(first?: number, max?: number) {\n    return adminClient.realms.findEvents({\n      client,\n      user,\n      // The admin client wants 'dateFrom' and 'dateTo' to be Date objects, however it cannot actually handle them so we need to cast to any.\n      ...(activeFilters as any),\n      realm,\n      first,\n      max,\n    });\n  }\n\n  function onSubmit() {\n    setSearchDropdownOpen(false);\n    commitFilters();\n  }\n\n  function resetSearch() {\n    reset();\n    commitFilters();\n  }\n\n  function removeFilter(key: keyof UserEventSearchForm) {\n    const formValues: UserEventSearchForm = { ...getValues() };\n    delete formValues[key];\n\n    reset({ ...defaultValues, ...formValues });\n    commitFilters();\n  }\n\n  function removeFilterValue(\n    key: keyof UserEventSearchForm,\n    valueToRemove: EventType,\n  ) {\n    const formValues = getValues();\n    const fieldValue = formValues[key];\n    const newFieldValue = Array.isArray(fieldValue)\n      ? fieldValue.filter((val) => val !== valueToRemove)\n      : fieldValue;\n\n    reset({ ...formValues, [key]: newFieldValue });\n    commitFilters();\n  }\n\n  function commitFilters() {\n    const newFilters: Partial<UserEventSearchForm> = pickBy(\n      getValues(),\n      (value) => value !== \"\" || (Array.isArray(value) && value.length > 0),\n    );\n\n    if (user) {\n      delete newFilters.user;\n    }\n\n    if (client) {\n      delete newFilters.client;\n    }\n\n    setActiveFilters(newFilters);\n    setKey(key + 1);\n  }\n\n  const userEventSearchFormDisplay = () => {\n    return (\n      <FormProvider {...form}>\n        <Flex\n          direction={{ default: \"column\" }}\n          spaceItems={{ default: \"spaceItemsNone\" }}\n        >\n          <FlexItem>\n            <DropdownPanel\n              buttonText={t(\"searchUserEventsBtn\")}\n              setSearchDropdownOpen={setSearchDropdownOpen}\n              searchDropdownOpen={searchDropdownOpen}\n              marginRight=\"2.5rem\"\n              width=\"15vw\"\n            >\n              <Form\n                data-testid=\"searchForm\"\n                className=\"keycloak__events_search__form\"\n                onSubmit={handleSubmit(onSubmit)}\n                isHorizontal\n              >\n                {!user && (\n                  <TextControl\n                    name=\"user\"\n                    label={t(\"userId\")}\n                    data-testid=\"userId-searchField\"\n                  />\n                )}\n                <FormGroup\n                  label={t(\"eventType\")}\n                  fieldId=\"kc-eventType\"\n                  className=\"keycloak__events_search__form_label\"\n                >\n                  <Controller\n                    name=\"type\"\n                    control={control}\n                    render={({ field }) => (\n                      <KeycloakSelect\n                        className=\"keycloak__events_search__type_select\"\n                        data-testid=\"event-type-searchField\"\n                        chipGroupProps={{\n                          numChips: 1,\n                          expandedText: t(\"hide\"),\n                          collapsedText: t(\"showRemaining\"),\n                        }}\n                        variant={SelectVariant.typeaheadMulti}\n                        typeAheadAriaLabel=\"Select\"\n                        onToggle={(isOpen) => setSelectOpen(isOpen)}\n                        selections={field.value}\n                        onSelect={(selectedValue) => {\n                          const option = selectedValue.toString() as EventType;\n                          const changedValue = field.value.includes(option)\n                            ? field.value.filter((item) => item !== option)\n                            : [...field.value, option];\n\n                          field.onChange(changedValue);\n                        }}\n                        onClear={() => {\n                          field.onChange([]);\n                        }}\n                        isOpen={selectOpen}\n                        aria-labelledby={\"eventType\"}\n                        chipGroupComponent={\n                          <ChipGroup>\n                            {field.value.map((chip) => (\n                              <Chip\n                                key={chip}\n                                onClick={(event) => {\n                                  event.stopPropagation();\n                                  field.onChange(\n                                    field.value.filter((val) => val !== chip),\n                                  );\n                                }}\n                              >\n                                {t(`eventTypes.${chip}.name`)}\n                              </Chip>\n                            ))}\n                          </ChipGroup>\n                        }\n                      >\n                        {events?.map((option) => (\n                          <SelectOption key={option} value={option}>\n                            {t(`eventTypes.${option}.name`)}\n                          </SelectOption>\n                        ))}\n                      </KeycloakSelect>\n                    )}\n                  />\n                </FormGroup>\n                {!client && (\n                  <TextControl\n                    name=\"client\"\n                    label={t(\"client\")}\n                    data-testid=\"client-searchField\"\n                  />\n                )}\n                <FormGroup\n                  label={t(\"dateFrom\")}\n                  fieldId=\"kc-dateFrom\"\n                  className=\"keycloak__events_search__form_label\"\n                >\n                  <Controller\n                    name=\"dateFrom\"\n                    control={control}\n                    render={({ field }) => (\n                      <DatePicker\n                        className=\"pf-v5-u-w-100\"\n                        value={field.value}\n                        onChange={(_, value) => field.onChange(value)}\n                        inputProps={{ id: \"kc-dateFrom\" }}\n                      />\n                    )}\n                  />\n                </FormGroup>\n                <FormGroup\n                  label={t(\"dateTo\")}\n                  fieldId=\"kc-dateTo\"\n                  className=\"keycloak__events_search__form_label\"\n                >\n                  <Controller\n                    name=\"dateTo\"\n                    control={control}\n                    render={({ field }) => (\n                      <DatePicker\n                        className=\"pf-v5-u-w-100\"\n                        value={field.value}\n                        onChange={(_, value) => field.onChange(value)}\n                        inputProps={{ id: \"kc-dateTo\" }}\n                      />\n                    )}\n                  />\n                </FormGroup>\n                <TextControl\n                  name=\"ipAddress\"\n                  label={t(\"ipAddress\")}\n                  data-testid=\"ipAddress-searchField\"\n                />\n                <ActionGroup>\n                  <Button\n                    data-testid=\"search-events-btn\"\n                    variant=\"primary\"\n                    type=\"submit\"\n                    isDisabled={!isDirty}\n                  >\n                    {t(\"searchUserEventsBtn\")}\n                  </Button>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={resetSearch}\n                    isDisabled={!isDirty}\n                  >\n                    {t(\"resetBtn\")}\n                  </Button>\n                </ActionGroup>\n              </Form>\n            </DropdownPanel>\n          </FlexItem>\n          <FlexItem>\n            {Object.entries(activeFilters).length > 0 && (\n              <div className=\"keycloak__searchChips pf-v5-u-ml-md\">\n                {Object.entries(activeFilters).map((filter) => {\n                  const [key, value] = filter as [\n                    keyof UserEventSearchForm,\n                    string | EventType[],\n                  ];\n\n                  if (\n                    (key === \"user\" && !!user) ||\n                    (key === \"client\" && !!client)\n                  ) {\n                    return null;\n                  }\n\n                  return (\n                    <ChipGroup\n                      className=\"pf-v5-u-mt-md pf-v5-u-mr-md\"\n                      key={key}\n                      categoryName={filterLabels[key]}\n                      onClick={() => removeFilter(key)}\n                      isClosable\n                    >\n                      {typeof value === \"string\" ? (\n                        <Chip isReadOnly>{value}</Chip>\n                      ) : (\n                        value.map((entry) => (\n                          <Chip\n                            key={entry}\n                            onClick={() => removeFilterValue(key, entry)}\n                          >\n                            {t(`eventTypes.${entry}.name`)}\n                          </Chip>\n                        ))\n                      )}\n                    </ChipGroup>\n                  );\n                })}\n              </div>\n            )}\n          </FlexItem>\n        </Flex>\n      </FormProvider>\n    );\n  };\n\n  return (\n    <>\n      {!userEventsEnabled && <EventsBanners type=\"userEvents\" />}\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        detailColumns={[\n          {\n            name: \"details\",\n            enabled: (event) => event.details !== undefined,\n            cellRenderer: DetailCell,\n          },\n        ]}\n        isPaginated\n        ariaLabelKey=\"titleEvents\"\n        toolbarItem={userEventSearchFormDisplay()}\n        columns={[\n          {\n            name: \"time\",\n            displayKey: \"time\",\n            cellRenderer: (row) =>\n              formatDate(new Date(row.time!), FORMAT_DATE_AND_TIME),\n          },\n          ...(!user\n            ? [\n                {\n                  name: \"userId\",\n                  cellRenderer: UserDetailLink,\n                },\n              ]\n            : []),\n          {\n            name: \"type\",\n            displayKey: \"eventType\",\n            cellRenderer: StatusRow,\n          },\n          {\n            name: \"ipAddress\",\n            displayKey: \"ipAddress\",\n            transforms: [cellWidth(10)],\n          },\n          ...(!client\n            ? [\n                {\n                  name: \"clientId\",\n                  displayKey: \"client\",\n                },\n              ]\n            : []),\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyUserEvents\")}\n            instructions={t(\"emptyUserEventsInstructions\")}\n            primaryActionText={t(\"refresh\")}\n            onPrimaryAction={() => setKey(key + 1)}\n          />\n        }\n        isSearching={Object.keys(activeFilters).length > 0}\n      />\n    </>\n  );\n};\n"],"names":["StatusRow","event","jsx","Tooltip","Icon","WarningTriangleIcon","CheckCircleIcon","DetailCell","jsxs","DescriptionList","key","value","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","UserDetailLink","t","useTranslation","realm","useRealm","Fragment","Link","toUser","UserEvents","user","client","adminClient","useAdminClient","localeSort","useLocaleSort","formatDate","useFormatDate","setKey","useState","searchDropdownOpen","setSearchDropdownOpen","selectOpen","setSelectOpen","events","setEvents","userEventsEnabled","setUserEventsEnabled","activeFilters","setActiveFilters","defaultValues","filterLabels","form","useForm","getValues","reset","isDirty","control","handleSubmit","useFetch","e","loader","first","max","onSubmit","commitFilters","resetSearch","removeFilter","formValues","removeFilterValue","valueToRemove","fieldValue","newFieldValue","val","newFilters","pickBy","EventsBanners","KeycloakDataTable","FormProvider","Flex","FlexItem","DropdownPanel","Form","TextControl","FormGroup","Controller","field","KeycloakSelect","SelectVariant","isOpen","selectedValue","option","changedValue","item","ChipGroup","chip","Chip","SelectOption","DatePicker","_","ActionGroup","Button","filter","entry","row","FORMAT_DATE_AND_TIME","cellWidth","ListEmptyState"],"mappings":"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"}