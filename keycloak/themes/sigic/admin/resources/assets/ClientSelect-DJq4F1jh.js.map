{"version":3,"file":"ClientSelect-DJq4F1jh.js","sources":["../../../../../../../src/components/client/ClientSelect.tsx"],"sourcesContent":["import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type { ClientQuery } from \"@keycloak/keycloak-admin-client/lib/resources/clients\";\nimport {\n  SelectControl,\n  SelectControlOption,\n  SelectVariant,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport type { ComponentProps } from \"../dynamic/components\";\nimport { PermissionsConfigurationTabsParams } from \"../../permissions-configuration/routes/PermissionsConfigurationTabs\";\nimport { useParams } from \"react-router-dom\";\nimport { useFormContext, useWatch } from \"react-hook-form\";\n\ntype ClientSelectProps = Omit<ComponentProps, \"convertToName\"> & {\n  variant?: `${SelectVariant}`;\n  isRequired?: boolean;\n  clientKey?: keyof ClientRepresentation;\n  placeholderText?: string;\n};\n\nexport const ClientSelect = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isDisabled = false,\n  isRequired,\n  variant = \"typeahead\",\n  clientKey = \"clientId\",\n  placeholderText,\n}: ClientSelectProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n\n  const [clients, setClients] = useState<ClientRepresentation[]>([]);\n  const [selectedClients, setSelectedClients] =\n    useState<SelectControlOption[]>();\n  const [search, setSearch] = useState(\"\");\n  const { tab } = useParams<PermissionsConfigurationTabsParams>();\n\n  const { control } = useFormContext();\n  const value = useWatch({\n    control,\n    name: name!,\n    defaultValue: defaultValue || \"\",\n  });\n\n  const getValue = (): string[] => {\n    if (typeof value === \"string\") {\n      return [value];\n    }\n    return value || [];\n  };\n\n  useFetch(\n    () => {\n      const params: ClientQuery = {\n        max: 20,\n      };\n      if (search) {\n        params.clientId = search;\n        params.search = true;\n      }\n      return adminClient.clients.find(params);\n    },\n    (clients) => setClients(clients),\n    [search],\n  );\n\n  useFetch(\n    () => {\n      const values = getValue().map(async (clientId) => {\n        if (clientKey === \"clientId\") {\n          return (await adminClient.clients.find({ clientId }))[0];\n        } else {\n          return adminClient.clients.findOne({ id: clientId });\n        }\n      });\n      return Promise.all(values);\n    },\n    (clients) => {\n      setSelectedClients(\n        clients\n          .filter((client) => !!client)\n          .map((client) => ({\n            key: client[clientKey] as string,\n            value: client.clientId!,\n          })),\n      );\n    },\n    [],\n  );\n\n  return (\n    <SelectControl\n      name={name!}\n      label={tab !== \"evaluation\" ? t(label!) : t(\"client\")}\n      labelIcon={tab !== \"evaluation\" ? t(helpText!) : t(\"selectClient\")}\n      controller={{\n        defaultValue: defaultValue || \"\",\n        rules: {\n          required: {\n            value: isRequired || false,\n            message: t(\"required\"),\n          },\n        },\n      }}\n      onFilter={(value) => setSearch(value)}\n      variant={variant}\n      isDisabled={isDisabled}\n      selectedOptions={selectedClients}\n      options={clients.map((client) => ({\n        key: client[clientKey] as string,\n        value: client.clientId!,\n      }))}\n      placeholderText={placeholderText}\n    />\n  );\n};\n"],"names":["ClientSelect","name","label","helpText","defaultValue","isDisabled","isRequired","variant","clientKey","placeholderText","adminClient","useAdminClient","t","useTranslation","clients","setClients","useState","selectedClients","setSelectedClients","search","setSearch","tab","useParams","control","useFormContext","value","useWatch","getValue","useFetch","params","values","clientId","client","jsx","SelectControl"],"mappings":"qJAuBO,MAAMA,EAAe,CAAC,CAC3B,KAAAC,EACA,MAAAC,EACA,SAAAC,EACA,aAAAC,EACA,WAAAC,EAAa,GACb,WAAAC,EACA,QAAAC,EAAU,YACV,UAAAC,EAAY,WACZ,gBAAAC,CACF,IAAyB,CACjB,KAAA,CAAE,YAAAC,CAAY,EAAIC,EAAe,EAEjC,CAAE,EAAAC,CAAE,EAAIC,EAAe,EAEvB,CAACC,EAASC,CAAU,EAAIC,EAAiC,CAAA,CAAE,EAC3D,CAACC,EAAiBC,CAAkB,EACxCF,EAAgC,EAC5B,CAACG,EAAQC,CAAS,EAAIJ,EAAS,EAAE,EACjC,CAAE,IAAAK,CAAI,EAAIC,EAA8C,EAExD,CAAE,QAAAC,CAAQ,EAAIC,EAAe,EAC7BC,EAAQC,EAAS,CACrB,QAAAH,EACA,KAAAtB,EACA,aAAcG,GAAgB,EAAA,CAC/B,EAEKuB,EAAW,IACX,OAAOF,GAAU,SACZ,CAACA,CAAK,EAERA,GAAS,CAAC,EAGnBG,OAAAA,EACE,IAAM,CACJ,MAAMC,EAAsB,CAC1B,IAAK,EACP,EACA,OAAIV,IACFU,EAAO,SAAWV,EAClBU,EAAO,OAAS,IAEXnB,EAAY,QAAQ,KAAKmB,CAAM,CACxC,EACCf,GAAYC,EAAWD,CAAO,EAC/B,CAACK,CAAM,CACT,EAEAS,EACE,IAAM,CACJ,MAAME,EAASH,EAAA,EAAW,IAAI,MAAOI,GAC/BvB,IAAc,YACR,MAAME,EAAY,QAAQ,KAAK,CAAE,SAAAqB,CAAS,CAAC,GAAG,CAAC,EAEhDrB,EAAY,QAAQ,QAAQ,CAAE,GAAIqB,EAAU,CAEtD,EACM,OAAA,QAAQ,IAAID,CAAM,CAC3B,EACChB,GAAY,CACXI,EACEJ,EACG,OAAQkB,GAAW,CAAC,CAACA,CAAM,EAC3B,IAAKA,IAAY,CAChB,IAAKA,EAAOxB,CAAS,EACrB,MAAOwB,EAAO,QAAA,EACd,CACN,CACF,EACA,CAAA,CACF,EAGEC,EAACC,EAAA,CACC,KAAAjC,EACA,MAA8BW,EAAvBS,IAAQ,aAAiBnB,EAAY,QAAN,EACtC,UAAkCU,EAAvBS,IAAQ,aAAiBlB,EAAe,cAAN,EAC7C,WAAY,CACV,aAAcC,GAAgB,GAC9B,MAAO,CACL,SAAU,CACR,MAAOE,GAAc,GACrB,QAASM,EAAE,UAAU,CAAA,CACvB,CAEJ,EACA,SAAWa,GAAUL,EAAUK,CAAK,EACpC,QAAAlB,EACA,WAAAF,EACA,gBAAiBY,EACjB,QAASH,EAAQ,IAAKkB,IAAY,CAChC,IAAKA,EAAOxB,CAAS,EACrB,MAAOwB,EAAO,QAAA,EACd,EACF,gBAAAvB,CAAA,CACF,CAEJ"}