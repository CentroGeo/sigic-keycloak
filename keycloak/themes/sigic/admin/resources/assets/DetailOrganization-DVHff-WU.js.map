{"version":3,"file":"DetailOrganization-DVHff-WU.js","sources":["../../../../../../../src/organizations/DetailOraganzationHeader.tsx","../../../../../../../src/organizations/IdentityProviderSelect.tsx","../../../../../../../src/organizations/LinkIdentityProviderModal.tsx","../../../../../../../src/organizations/IdentityProviders.tsx","../../../../../../../src/organizations/InviteMemberModal.tsx","../../../../../../../src/organizations/Members.tsx","../../../../../../../src/organizations/DetailOrganization.tsx"],"sourcesContent":["import { ButtonVariant, DropdownItem } from \"@patternfly/react-core\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useTranslation } from \"react-i18next\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { Controller, useFormContext, useWatch } from \"react-hook-form\";\nimport { toOrganizations } from \"./routes/Organizations\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\n\ntype DetailOrganizationHeaderProps = {\n  save: () => void;\n};\n\nexport const DetailOrganizationHeader = ({\n  save,\n}: DetailOrganizationHeaderProps) => {\n  const { adminClient } = useAdminClient();\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const id = useWatch({ name: \"id\" });\n  const name = useWatch({ name: \"name\" });\n\n  const { setValue } = useFormContext();\n\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"disableConfirmOrganizationTitle\",\n    messageKey: \"disableConfirmOrganization\",\n    continueButtonLabel: \"disable\",\n    onConfirm: () => {\n      setValue(\"enabled\", false);\n      save();\n    },\n  });\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"organizationDelete\",\n    messageKey: \"organizationDeleteConfirm\",\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.organizations.delById({ id });\n        addAlert(t(\"organizationDeletedSuccess\"));\n        navigate(toOrganizations({ realm }));\n      } catch (error) {\n        addError(\"organizationDeleteError\", error);\n      }\n    },\n  });\n\n  return (\n    <Controller\n      name=\"enabled\"\n      render={({ field: { value, onChange } }) => (\n        <>\n          <DeleteConfirm />\n          <DisableConfirm />\n          <ViewHeader\n            titleKey={name || \"\"}\n            divider={false}\n            dropdownItems={[\n              <DropdownItem\n                data-testid=\"delete-client\"\n                key=\"delete\"\n                onClick={toggleDeleteDialog}\n              >\n                {t(\"delete\")}\n              </DropdownItem>,\n            ]}\n            isEnabled={value}\n            onToggle={(value) => {\n              if (!value) {\n                toggleDisableDialog();\n              } else {\n                onChange(value);\n                save();\n              }\n            }}\n          />\n        </>\n      )}\n    />\n  );\n};\n","import IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport { IdentityProvidersQuery } from \"@keycloak/keycloak-admin-client/lib/resources/identityProviders\";\nimport {\n  FormErrorText,\n  HelpItem,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  Chip,\n  ChipGroup,\n  FormGroup,\n  MenuToggle,\n  Select,\n  SelectList,\n  SelectOption,\n  TextInputGroup,\n  TextInputGroupMain,\n  TextInputGroupUtilities,\n} from \"@patternfly/react-core\";\nimport { TimesIcon } from \"@patternfly/react-icons\";\nimport { debounce } from \"lodash-es\";\nimport { useCallback, useRef, useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { ComponentProps } from \"../components/dynamic/components\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport useToggle from \"../utils/useToggle\";\n\ntype IdentityProviderSelectProps = Omit<ComponentProps, \"convertToName\"> & {\n  variant?: \"typeaheadMulti\" | \"typeahead\";\n  isRequired?: boolean;\n};\n\nexport const IdentityProviderSelect = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isRequired,\n  variant = \"typeahead\",\n  isDisabled,\n}: IdentityProviderSelectProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const {\n    control,\n    getValues,\n    formState: { errors },\n  } = useFormContext();\n  const values: string[] | undefined = getValues(name!);\n\n  const [open, toggleOpen, setOpen] = useToggle();\n  const [inputValue, setInputValue] = useState(\"\");\n  const textInputRef = useRef<HTMLInputElement>();\n  const [idps, setIdps] = useState<\n    (IdentityProviderRepresentation | undefined)[]\n  >([]);\n  const [search, setSearch] = useState(\"\");\n\n  const debounceFn = useCallback(debounce(setSearch, 1000), []);\n\n  useFetch(\n    async () => {\n      const params: IdentityProvidersQuery = {\n        max: 20,\n        realmOnly: true,\n      };\n      if (search) {\n        params.search = search;\n      }\n\n      return await adminClient.identityProviders.find(params);\n    },\n    setIdps,\n    [search],\n  );\n\n  const convert = (\n    identityProviders: (IdentityProviderRepresentation | undefined)[],\n  ) => {\n    const options = identityProviders.map((option) => (\n      <SelectOption\n        key={option!.alias}\n        value={option}\n        selected={values?.includes(option!.alias!)}\n      >\n        {option!.alias}\n      </SelectOption>\n    ));\n    if (options.length === 0) {\n      return <SelectOption value=\"\">{t(\"noResultsFound\")}</SelectOption>;\n    }\n    return options;\n  };\n\n  if (!idps) {\n    return <KeycloakSpinner />;\n  }\n  return (\n    <FormGroup\n      label={t(label!)}\n      isRequired={isRequired}\n      labelIcon={\n        helpText ? (\n          <HelpItem helpText={helpText!} fieldLabelId={label!} />\n        ) : undefined\n      }\n      fieldId={name!}\n    >\n      <Controller\n        name={name!}\n        defaultValue={defaultValue}\n        control={control}\n        rules={{\n          validate: (value: string[]) =>\n            isRequired && value.filter((i) => i !== undefined).length === 0\n              ? t(\"required\")\n              : undefined,\n        }}\n        render={({ field }) => (\n          <Select\n            id={name!}\n            onOpenChange={toggleOpen}\n            toggle={(ref) => (\n              <MenuToggle\n                data-testid={name!}\n                ref={ref}\n                variant=\"typeahead\"\n                onClick={toggleOpen}\n                isExpanded={open}\n                isFullWidth\n                isDisabled={isDisabled}\n                status={errors[name!] ? \"danger\" : undefined}\n              >\n                <TextInputGroup isPlain>\n                  <TextInputGroupMain\n                    value={inputValue || field.value}\n                    onClick={toggleOpen}\n                    onChange={(_, value) => {\n                      setOpen(true);\n                      setInputValue(value);\n                      debounceFn(value);\n                    }}\n                    autoComplete=\"off\"\n                    innerRef={textInputRef}\n                    placeholderText={t(\"selectAUser\")}\n                    {...(field.value && {\n                      \"aria-activedescendant\": field.value,\n                    })}\n                    role=\"combobox\"\n                    isExpanded={open}\n                    aria-controls=\"select-create-typeahead-listbox\"\n                  >\n                    {variant === \"typeaheadMulti\" &&\n                      Array.isArray(field.value) && (\n                        <ChipGroup aria-label=\"Current selections\">\n                          {field.value.map(\n                            (selection: string, index: number) => (\n                              <Chip\n                                key={index}\n                                onClick={(ev) => {\n                                  ev.stopPropagation();\n                                  field.onChange(\n                                    field.value.filter(\n                                      (item: string) => item !== selection,\n                                    ),\n                                  );\n                                }}\n                              >\n                                {selection}\n                              </Chip>\n                            ),\n                          )}\n                        </ChipGroup>\n                      )}\n                  </TextInputGroupMain>\n                  <TextInputGroupUtilities>\n                    {!!search && (\n                      <Button\n                        variant=\"plain\"\n                        onClick={() => {\n                          setInputValue(\"\");\n                          setSearch(\"\");\n                          field.onChange([]);\n                          textInputRef?.current?.focus();\n                        }}\n                        aria-label={t(\"clear\")}\n                      >\n                        <TimesIcon aria-hidden />\n                      </Button>\n                    )}\n                  </TextInputGroupUtilities>\n                </TextInputGroup>\n              </MenuToggle>\n            )}\n            isOpen={open}\n            selected={field.value}\n            onSelect={(_, v) => {\n              const idp = v as IdentityProviderRepresentation;\n              const option = idp.alias!;\n              if (variant !== \"typeaheadMulti\") {\n                const removed = field.value.includes(option);\n\n                if (removed) {\n                  field.onChange([]);\n                } else {\n                  field.onChange([option]);\n                }\n\n                setInputValue(removed ? \"\" : option || \"\");\n                setOpen(false);\n              } else {\n                const changedValue = field.value.find(\n                  (v: string) => v === option,\n                )\n                  ? field.value.filter((v: string) => v !== option)\n                  : [...field.value, option];\n                field.onChange(changedValue);\n              }\n            }}\n            aria-label={t(name!)}\n          >\n            <SelectList>{convert(idps)}</SelectList>\n          </Select>\n        )}\n      />\n      {errors[name!] && <FormErrorText message={t(\"required\")} />}\n    </FormGroup>\n  );\n};\n","import IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport { FormSubmitButton, SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  ButtonVariant,\n  Form,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { FormProvider, useForm, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { DefaultSwitchControl } from \"../components/SwitchControl\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  convertAttributeNameToForm,\n  convertFormValuesToObject,\n  convertToFormValues,\n} from \"../util\";\nimport { IdentityProviderSelect } from \"./IdentityProviderSelect\";\nimport { OrganizationFormType } from \"./OrganizationForm\";\n\ntype LinkIdentityProviderModalProps = {\n  orgId: string;\n  identityProvider?: IdentityProviderRepresentation;\n  onClose: () => void;\n};\n\ntype LinkRepresentation = {\n  alias: string[] | string;\n  hideOnLogin: boolean;\n  config: {\n    \"kc.org.domain\": string;\n  };\n};\n\nexport const LinkIdentityProviderModal = ({\n  orgId,\n  identityProvider,\n  onClose,\n}: LinkIdentityProviderModalProps) => {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const form = useForm<LinkRepresentation>({ mode: \"onChange\" });\n  const { handleSubmit, formState, setValue } = form;\n  const { getValues } = useFormContext<OrganizationFormType>();\n\n  useEffect(\n    () =>\n      convertToFormValues(\n        {\n          ...identityProvider,\n          alias: [identityProvider?.alias],\n          hideOnLogin: identityProvider?.hideOnLogin,\n        },\n        setValue,\n      ),\n    [],\n  );\n\n  const submitForm = async (data: LinkRepresentation) => {\n    try {\n      const foundIdentityProvider = await adminClient.identityProviders.findOne(\n        {\n          alias: data.alias[0],\n        },\n      );\n      if (!foundIdentityProvider) {\n        throw new Error(t(\"notFound\"));\n      }\n      const { config } = convertFormValuesToObject(data);\n      foundIdentityProvider.config = {\n        ...foundIdentityProvider.config,\n        ...config,\n      };\n      foundIdentityProvider.hideOnLogin = data.hideOnLogin ?? true;\n      await adminClient.identityProviders.update(\n        { alias: data.alias[0] },\n        foundIdentityProvider,\n      );\n\n      if (!identityProvider) {\n        await adminClient.organizations.linkIdp({\n          orgId,\n          alias: data.alias[0],\n        });\n      }\n      addAlert(\n        t(!identityProvider ? \"linkSuccessful\" : \"linkUpdatedSuccessful\"),\n      );\n      onClose();\n    } catch (error) {\n      addError(!identityProvider ? \"linkError\" : \"linkUpdatedError\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"linkIdentityProvider\")}\n      isOpen\n      onClose={onClose}\n      actions={[\n        <FormSubmitButton\n          formState={formState}\n          data-testid=\"confirm\"\n          key=\"confirm\"\n          form=\"form\"\n          allowInvalid\n          allowNonDirty\n        >\n          {t(\"save\")}\n        </FormSubmitButton>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <FormProvider {...form}>\n        <Form id=\"form\" onSubmit={handleSubmit(submitForm)}>\n          <IdentityProviderSelect\n            name=\"alias\"\n            label={t(\"identityProvider\")}\n            defaultValue={[]}\n            isRequired\n            isDisabled={!!identityProvider}\n          />\n          <SelectControl\n            name={convertAttributeNameToForm(\"config.kc.org.domain\")}\n            label={t(\"domain\")}\n            controller={{ defaultValue: \"\" }}\n            options={[\n              { key: \"\", value: t(\"none\") },\n              { key: \"ANY\", value: t(\"any\") },\n              ...getValues(\"domains\")!.map((d) => ({ key: d, value: d })),\n            ]}\n            menuAppendTo=\"parent\"\n          />\n          <DefaultSwitchControl\n            name=\"hideOnLogin\"\n            label={t(\"hideOnLoginPage\")}\n            labelIcon={t(\"hideOnLoginPageHelp\")}\n            defaultValue={true}\n          />\n          <DefaultSwitchControl\n            name={convertAttributeNameToForm(\n              \"config.kc.org.broker.redirect.mode.email-matches\",\n            )}\n            label={t(\"redirectWhenEmailMatches\")}\n            labelIcon={t(\"redirectWhenEmailMatchesHelp\")}\n            stringify\n          />\n        </Form>\n      </FormProvider>\n    </Modal>\n  );\n};\n","import IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport {\n  KeycloakDataTable,\n  ListEmptyState,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  ButtonVariant,\n  PageSection,\n  Switch,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { sortBy } from \"lodash-es\";\nimport { BellIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useParams } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { ManageOrderDialog } from \"../identity-providers/ManageOrderDialog\";\nimport useToggle from \"../utils/useToggle\";\nimport { LinkIdentityProviderModal } from \"./LinkIdentityProviderModal\";\nimport { EditOrganizationParams } from \"./routes/EditOrganization\";\n\ntype ShownOnLoginPageCheckProps = {\n  row: IdentityProviderRepresentation;\n  refresh: () => void;\n};\n\nconst ShownOnLoginPageCheck = ({\n  row,\n  refresh,\n}: ShownOnLoginPageCheckProps) => {\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n  const { t } = useTranslation();\n\n  const toggle = async (value: boolean) => {\n    try {\n      await adminClient.identityProviders.update(\n        { alias: row.alias! },\n        {\n          ...row,\n          hideOnLogin: value,\n        },\n      );\n      addAlert(t(\"linkUpdatedSuccessful\"));\n\n      refresh();\n    } catch (error) {\n      addError(\"linkUpdatedError\", error);\n    }\n  };\n\n  return (\n    <Switch\n      label={t(\"on\")}\n      labelOff={t(\"off\")}\n      isChecked={row.hideOnLogin}\n      onChange={(_, value) => toggle(value)}\n    />\n  );\n};\n\nexport const IdentityProviders = () => {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation();\n  const { id: orgId } = useParams<EditOrganizationParams>();\n  const { addAlert, addError } = useAlerts();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [manageDisplayDialog, setManageDisplayDialog] = useState(false);\n  const [hasProviders, setHasProviders] = useState(false);\n  const [selectedRow, setSelectedRow] =\n    useState<IdentityProviderRepresentation>();\n  const [open, toggleOpen] = useToggle();\n\n  useFetch(\n    async () => adminClient.identityProviders.find({ max: 1 }),\n    (providers) => {\n      setHasProviders(providers.length === 1);\n    },\n    [],\n  );\n\n  const loader = async () => {\n    const providers = await adminClient.organizations.listIdentityProviders({\n      orgId: orgId!,\n    });\n    return sortBy(providers, \"alias\");\n  };\n\n  const [toggleUnlinkDialog, UnlinkConfirm] = useConfirmDialog({\n    titleKey: \"identityProviderUnlink\",\n    messageKey: \"identityProviderUnlinkConfirm\",\n    continueButtonLabel: \"unLinkIdentityProvider\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.organizations.unLinkIdp({\n          orgId: orgId!,\n          alias: selectedRow!.alias! as string,\n        });\n        setSelectedRow(undefined);\n        addAlert(t(\"unLinkSuccessful\"));\n        refresh();\n      } catch (error) {\n        addError(\"unLinkError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      {manageDisplayDialog && (\n        <ManageOrderDialog\n          orgId={orgId!}\n          onClose={() => {\n            setManageDisplayDialog(false);\n            refresh();\n          }}\n        />\n      )}\n      <PageSection variant=\"light\">\n        <UnlinkConfirm />\n        {open && (\n          <LinkIdentityProviderModal\n            orgId={orgId!}\n            identityProvider={selectedRow}\n            onClose={() => {\n              toggleOpen();\n              refresh();\n            }}\n          />\n        )}\n        {!hasProviders ? (\n          <ListEmptyState\n            icon={BellIcon}\n            message={t(\"noIdentityProvider\")}\n            instructions={t(\"noIdentityProviderInstructions\")}\n          />\n        ) : (\n          <KeycloakDataTable\n            key={key}\n            loader={loader}\n            ariaLabelKey=\"identityProviders\"\n            searchPlaceholderKey=\"searchProvider\"\n            toolbarItem={\n              <>\n                <ToolbarItem>\n                  <Button\n                    onClick={() => {\n                      setSelectedRow(undefined);\n                      toggleOpen();\n                    }}\n                  >\n                    {t(\"linkIdentityProvider\")}\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button\n                    data-testid=\"manageDisplayOrder\"\n                    variant=\"link\"\n                    onClick={() => setManageDisplayDialog(true)}\n                  >\n                    {t(\"manageDisplayOrder\")}\n                  </Button>\n                </ToolbarItem>\n              </>\n            }\n            actions={[\n              {\n                title: t(\"edit\"),\n                onRowClick: (row) => {\n                  setSelectedRow(row);\n                  toggleOpen();\n                },\n              },\n              {\n                title: t(\"unLinkIdentityProvider\"),\n                onRowClick: (row) => {\n                  setSelectedRow(row);\n                  toggleUnlinkDialog();\n                },\n              },\n            ]}\n            columns={[\n              {\n                name: \"alias\",\n              },\n              {\n                name: \"config['kc.org.domain']\",\n                displayKey: \"domain\",\n              },\n              {\n                name: \"providerId\",\n                displayKey: \"providerDetails\",\n              },\n              {\n                name: \"hideOnLogin\",\n                displayKey: \"hideOnLoginPage\",\n                cellRenderer: (row) => (\n                  <ShownOnLoginPageCheck row={row} refresh={refresh} />\n                ),\n              },\n            ]}\n            emptyState={\n              <ListEmptyState\n                message={t(\"emptyIdentityProviderLink\")}\n                instructions={t(\"emptyIdentityProviderLinkInstructions\")}\n                primaryActionText={t(\"linkIdentityProvider\")}\n                onPrimaryAction={toggleOpen}\n              />\n            }\n          />\n        )}\n      </PageSection>\n    </>\n  );\n};\n","import { FormSubmitButton, TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  ButtonVariant,\n  Form,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\n\ntype InviteMemberModalProps = {\n  orgId: string;\n  onClose: () => void;\n};\n\nexport const InviteMemberModal = ({\n  orgId,\n  onClose,\n}: InviteMemberModalProps) => {\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const { t } = useTranslation();\n  const form = useForm<Record<string, string>>();\n  const { handleSubmit, formState } = form;\n\n  const submitForm = async (data: Record<string, string>) => {\n    try {\n      const formData = new FormData();\n      for (const key in data) {\n        formData.append(key, data[key]);\n      }\n      await adminClient.organizations.invite({ orgId }, formData);\n      addAlert(t(\"inviteSent\"));\n      onClose();\n    } catch (error) {\n      addError(\"inviteSentError\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"inviteMember\")}\n      isOpen\n      onClose={onClose}\n      actions={[\n        <FormSubmitButton\n          formState={formState}\n          data-testid=\"save\"\n          key=\"confirm\"\n          form=\"form\"\n          allowInvalid\n          allowNonDirty\n        >\n          {t(\"send\")}\n        </FormSubmitButton>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <FormProvider {...form}>\n        <Form id=\"form\" onSubmit={handleSubmit(submitForm)}>\n          <TextControl\n            name=\"email\"\n            label={t(\"email\")}\n            rules={{ required: t(\"required\") }}\n            autoFocus\n          />\n          <TextControl name=\"firstName\" label={t(\"firstName\")} />\n          <TextControl name=\"lastName\" label={t(\"lastName\")} />\n        </Form>\n      </FormProvider>\n    </Modal>\n  );\n};\n","import UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  Button,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  MenuToggle,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { MemberModal } from \"../groups/MembersModal\";\nimport { toUser } from \"../user/routes/User\";\nimport { useParams } from \"../utils/useParams\";\nimport useToggle from \"../utils/useToggle\";\nimport { InviteMemberModal } from \"./InviteMemberModal\";\nimport { EditOrganizationParams } from \"./routes/EditOrganization\";\nimport { CheckboxFilterComponent } from \"../components/dynamic/CheckboxFilterComponent\";\nimport { SearchInputComponent } from \"../components/dynamic/SearchInputComponent\";\nimport { translationFormatter } from \"../utils/translationFormatter\";\n\ntype MembershipTypeRepresentation = UserRepresentation & {\n  membershipType?: string;\n};\n\nconst UserDetailLink = (user: any) => {\n  const { realm } = useRealm();\n  return (\n    <Link to={toUser({ realm, id: user.id!, tab: \"settings\" })}>\n      {user.username}\n    </Link>\n  );\n};\n\nexport const Members = () => {\n  const { t } = useTranslation();\n  const { adminClient } = useAdminClient();\n  const { id: orgId } = useParams<EditOrganizationParams>();\n  const { addAlert, addError } = useAlerts();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const [open, toggle] = useToggle();\n  const [openAddMembers, toggleAddMembers] = useToggle();\n  const [openInviteMembers, toggleInviteMembers] = useToggle();\n  const [selectedMembers, setSelectedMembers] = useState<UserRepresentation[]>(\n    [],\n  );\n  const [searchText, setSearchText] = useState<string>(\"\");\n  const [searchTriggerText, setSearchTriggerText] = useState<string>(\"\");\n  const [filteredMembershipTypes, setFilteredMembershipTypes] = useState<\n    string[]\n  >([]);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const membershipOptions = [\n    { value: \"Managed\", label: \"Managed\" },\n    { value: \"Unmanaged\", label: \"Unmanaged\" },\n  ];\n\n  const onToggleClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onSelect = (_event: any, value: string) => {\n    if (filteredMembershipTypes.includes(value)) {\n      setFilteredMembershipTypes(\n        filteredMembershipTypes.filter((item) => item !== value),\n      );\n    } else {\n      setFilteredMembershipTypes([...filteredMembershipTypes, value]);\n    }\n    setIsOpen(false);\n    refresh();\n  };\n\n  const loader = async (first?: number, max?: number) => {\n    try {\n      const membershipType =\n        filteredMembershipTypes.length === 1\n          ? filteredMembershipTypes[0]\n          : undefined;\n\n      const memberships: MembershipTypeRepresentation[] =\n        await adminClient.organizations.listMembers({\n          orgId,\n          first,\n          max,\n          search: searchTriggerText,\n          membershipType,\n        });\n\n      return memberships;\n    } catch (error) {\n      addError(\"organizationsMembersListError\", error);\n      return [];\n    }\n  };\n\n  const handleChange = (value: string) => {\n    setSearchText(value);\n  };\n\n  const handleSearch = () => {\n    setSearchTriggerText(searchText);\n    refresh();\n  };\n\n  const clearInput = () => {\n    setSearchText(\"\");\n    setSearchTriggerText(\"\");\n    refresh();\n  };\n\n  const removeMember = async (selectedMembers: UserRepresentation[]) => {\n    try {\n      await Promise.all(\n        selectedMembers.map((user) =>\n          adminClient.organizations.delMember({\n            orgId,\n            userId: user.id!,\n          }),\n        ),\n      );\n      addAlert(t(\"organizationUsersLeft\", { count: selectedMembers.length }));\n    } catch (error) {\n      addError(\"organizationUsersLeftError\", error);\n    }\n\n    refresh();\n  };\n\n  return (\n    <>\n      {openAddMembers && (\n        <MemberModal\n          membersQuery={() => adminClient.organizations.listMembers({ orgId })}\n          onAdd={async (selectedRows) => {\n            try {\n              await Promise.all(\n                selectedRows.map((user) =>\n                  adminClient.organizations.addMember({\n                    orgId,\n                    userId: user.id!,\n                  }),\n                ),\n              );\n              addAlert(\n                t(\"organizationUsersAdded\", { count: selectedRows.length }),\n              );\n            } catch (error) {\n              addError(\"organizationUsersAddedError\", error);\n            }\n          }}\n          onClose={() => {\n            toggleAddMembers();\n            refresh();\n          }}\n        />\n      )}\n      {openInviteMembers && (\n        <InviteMemberModal orgId={orgId} onClose={toggleInviteMembers} />\n      )}\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        isPaginated\n        ariaLabelKey=\"membersList\"\n        onSelect={(members) => setSelectedMembers([...members])}\n        canSelectAll\n        toolbarItem={\n          <>\n            <ToolbarItem>\n              <SearchInputComponent\n                value={searchText}\n                onChange={handleChange}\n                onSearch={handleSearch}\n                onClear={clearInput}\n                placeholder={t(\"searchMembers\")}\n                aria-label={t(\"searchMembers\")}\n              />\n            </ToolbarItem>\n            <ToolbarItem>\n              <Dropdown\n                onOpenChange={toggle}\n                toggle={(ref) => (\n                  <MenuToggle\n                    ref={ref}\n                    onClick={toggle}\n                    isExpanded={open}\n                    variant=\"primary\"\n                  >\n                    {t(\"addMember\")}\n                  </MenuToggle>\n                )}\n                isOpen={open}\n              >\n                <DropdownList>\n                  <DropdownItem\n                    onClick={() => {\n                      toggleAddMembers();\n                      toggle();\n                    }}\n                  >\n                    {t(\"addRealmUser\")}\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      toggleInviteMembers();\n                      toggle();\n                    }}\n                  >\n                    {t(\"inviteMember\")}\n                  </DropdownItem>\n                </DropdownList>\n              </Dropdown>\n            </ToolbarItem>\n            <ToolbarItem>\n              <Button\n                variant=\"plain\"\n                isDisabled={selectedMembers.length === 0}\n                onClick={() => removeMember(selectedMembers)}\n              >\n                {t(\"removeMember\")}\n              </Button>\n            </ToolbarItem>\n            <ToolbarItem>\n              <CheckboxFilterComponent\n                filterPlaceholderText={t(\"filterByMembershipType\")}\n                isOpen={isOpen}\n                options={membershipOptions}\n                onOpenChange={(nextOpen) => setIsOpen(nextOpen)}\n                onToggleClick={onToggleClick}\n                onSelect={onSelect}\n                selectedItems={filteredMembershipTypes}\n                width={\"260px\"}\n              />\n            </ToolbarItem>\n          </>\n        }\n        actions={[\n          {\n            title: t(\"remove\"),\n            onRowClick: async (member) => {\n              await removeMember([member]);\n            },\n          },\n        ]}\n        columns={[\n          {\n            name: \"username\",\n            cellRenderer: UserDetailLink,\n          },\n          {\n            name: \"email\",\n          },\n          {\n            name: \"firstName\",\n          },\n          {\n            name: \"lastName\",\n          },\n          {\n            name: \"membershipType\",\n            cellFormatters: [translationFormatter(t)],\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyMembers\")}\n            instructions={t(\"emptyMembersInstructions\")}\n            secondaryActions={[\n              {\n                text: t(\"addRealmUser\"),\n                onClick: toggleAddMembers,\n              },\n              {\n                text: t(\"inviteMember\"),\n                onClick: toggleInviteMembers,\n              },\n            ]}\n          />\n        }\n        isSearching={filteredMembershipTypes.length > 0}\n      />\n    </>\n  );\n};\n","import {\n  FormSubmitButton,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Button,\n  PageSection,\n  Tab,\n  Tabs,\n  TabTitleText,\n} from \"@patternfly/react-core\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { AttributesForm } from \"../components/key-value-form/AttributeForm\";\nimport { arrayToKeyValue } from \"../components/key-value-form/key-value-convert\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useParams } from \"../utils/useParams\";\nimport { DetailOrganizationHeader } from \"./DetailOraganzationHeader\";\nimport { IdentityProviders } from \"./IdentityProviders\";\nimport { Members } from \"./Members\";\nimport {\n  OrganizationForm,\n  OrganizationFormType,\n  convertToOrg,\n} from \"./OrganizationForm\";\nimport {\n  EditOrganizationParams,\n  OrganizationTab,\n  toEditOrganization,\n} from \"./routes/EditOrganization\";\nimport { useAccess } from \"../context/access/Access\";\nimport { AdminEvents } from \"../events/AdminEvents\";\nimport { useState } from \"react\";\n\nexport default function DetailOrganization() {\n  const { adminClient } = useAdminClient();\n  const { addAlert, addError } = useAlerts();\n\n  const { realm, realmRepresentation } = useRealm();\n  const { id } = useParams<EditOrganizationParams>();\n  const { t } = useTranslation();\n\n  const form = useForm<OrganizationFormType>();\n\n  const save = async (org: OrganizationFormType) => {\n    try {\n      const organization = convertToOrg(org);\n      await adminClient.organizations.updateById({ id }, organization);\n      addAlert(t(\"organizationSaveSuccess\"));\n    } catch (error) {\n      addError(\"organizationSaveError\", error);\n    }\n  };\n\n  useFetch(\n    () => adminClient.organizations.findOne({ id }),\n    (org) => {\n      if (!org) {\n        throw new Error(t(\"notFound\"));\n      }\n      form.reset({\n        ...org,\n        domains: org.domains?.map((d) => d.name),\n        attributes: arrayToKeyValue(org.attributes),\n      });\n    },\n    [id],\n  );\n\n  const useTab = (tab: OrganizationTab) =>\n    useRoutableTab(\n      toEditOrganization({\n        realm,\n        id,\n        tab,\n      }),\n    );\n\n  const settingsTab = useTab(\"settings\");\n  const attributesTab = useTab(\"attributes\");\n  const membersTab = useTab(\"members\");\n  const identityProvidersTab = useTab(\"identityProviders\");\n  const eventsTab = useTab(\"events\");\n\n  const { hasAccess } = useAccess();\n  const [activeEventsTab, setActiveEventsTab] = useState(\"adminEvents\");\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      <FormProvider {...form}>\n        <DetailOrganizationHeader save={() => save(form.getValues())} />\n        <RoutableTabs\n          data-testid=\"organization-tabs\"\n          aria-label={t(\"organization\")}\n          isBox\n          mountOnEnter\n        >\n          <Tab\n            id=\"settings\"\n            data-testid=\"settingsTab\"\n            title={<TabTitleText>{t(\"settings\")}</TabTitleText>}\n            {...settingsTab}\n          >\n            <PageSection>\n              <FormAccess\n                role=\"anyone\"\n                onSubmit={form.handleSubmit(save)}\n                isHorizontal\n              >\n                <OrganizationForm readOnly />\n                <ActionGroup>\n                  <FormSubmitButton\n                    formState={form.formState}\n                    data-testid=\"save\"\n                  >\n                    {t(\"save\")}\n                  </FormSubmitButton>\n                  <Button\n                    onClick={() => form.reset()}\n                    data-testid=\"reset\"\n                    variant=\"link\"\n                  >\n                    {t(\"reset\")}\n                  </Button>\n                </ActionGroup>\n              </FormAccess>\n            </PageSection>\n          </Tab>\n          <Tab\n            id=\"attributes\"\n            data-testid=\"attributeTab\"\n            title={<TabTitleText>{t(\"attributes\")}</TabTitleText>}\n            {...attributesTab}\n          >\n            <PageSection variant=\"light\">\n              <AttributesForm\n                form={form}\n                save={save}\n                reset={() =>\n                  form.reset({\n                    ...form.getValues(),\n                  })\n                }\n                name=\"attributes\"\n              />\n            </PageSection>\n          </Tab>\n          <Tab\n            id=\"members\"\n            data-testid=\"membersTab\"\n            title={<TabTitleText>{t(\"members\")}</TabTitleText>}\n            {...membersTab}\n          >\n            <Members />\n          </Tab>\n          <Tab\n            id=\"identityProviders\"\n            data-testid=\"identityProvidersTab\"\n            title={<TabTitleText>{t(\"identityProviders\")}</TabTitleText>}\n            {...identityProvidersTab}\n          >\n            <IdentityProviders />\n          </Tab>\n          {realmRepresentation?.adminEventsEnabled &&\n            hasAccess(\"view-events\") && (\n              <Tab\n                data-testid=\"admin-events-tab\"\n                title={<TabTitleText>{t(\"adminEvents\")}</TabTitleText>}\n                {...eventsTab}\n              >\n                <Tabs\n                  activeKey={activeEventsTab}\n                  onSelect={(_, key) => setActiveEventsTab(key as string)}\n                >\n                  <Tab\n                    eventKey=\"adminEvents\"\n                    title={<TabTitleText>{t(\"adminEvents\")}</TabTitleText>}\n                  >\n                    <AdminEvents resourcePath={`organizations/${id}`} />\n                  </Tab>\n                  <Tab\n                    eventKey=\"membershipEvents\"\n                    title={<TabTitleText>{t(\"membershipEvents\")}</TabTitleText>}\n                  >\n                    <AdminEvents resourcePath={`organizations/${id}/members`} />\n                  </Tab>\n                </Tabs>\n              </Tab>\n            )}\n        </RoutableTabs>\n      </FormProvider>\n    </PageSection>\n  );\n}\n"],"names":["DetailOrganizationHeader","save","adminClient","useAdminClient","realm","useRealm","navigate","useNavigate","t","useTranslation","addAlert","addError","useAlerts","id","useWatch","name","setValue","useFormContext","toggleDisableDialog","DisableConfirm","useConfirmDialog","toggleDeleteDialog","DeleteConfirm","ButtonVariant","toOrganizations","error","jsx","Controller","value","onChange","jsxs","Fragment","ViewHeader","DropdownItem","IdentityProviderSelect","label","helpText","defaultValue","isRequired","variant","isDisabled","control","getValues","errors","values","open","toggleOpen","setOpen","useToggle","inputValue","setInputValue","useState","textInputRef","useRef","idps","setIdps","search","setSearch","debounceFn","useCallback","debounce","useFetch","params","convert","identityProviders","options","option","SelectOption","FormGroup","HelpItem","i","field","Select","ref","MenuToggle","TextInputGroup","TextInputGroupMain","_","ChipGroup","selection","index","Chip","ev","item","TextInputGroupUtilities","Button","TimesIcon","v","removed","changedValue","SelectList","FormErrorText","KeycloakSpinner","LinkIdentityProviderModal","orgId","identityProvider","onClose","form","useForm","handleSubmit","formState","useEffect","convertToFormValues","submitForm","data","foundIdentityProvider","config","convertFormValuesToObject","Modal","ModalVariant","FormSubmitButton","FormProvider","Form","SelectControl","convertAttributeNameToForm","DefaultSwitchControl","ShownOnLoginPageCheck","row","refresh","toggle","Switch","IdentityProviders","useParams","key","setKey","manageDisplayDialog","setManageDisplayDialog","hasProviders","setHasProviders","selectedRow","setSelectedRow","providers","loader","sortBy","toggleUnlinkDialog","UnlinkConfirm","ManageOrderDialog","PageSection","KeycloakDataTable","ToolbarItem","ListEmptyState","BellIcon","InviteMemberModal","formData","TextControl","UserDetailLink","user","Link","toUser","Members","openAddMembers","toggleAddMembers","openInviteMembers","toggleInviteMembers","selectedMembers","setSelectedMembers","searchText","setSearchText","searchTriggerText","setSearchTriggerText","filteredMembershipTypes","setFilteredMembershipTypes","isOpen","setIsOpen","membershipOptions","onToggleClick","onSelect","_event","first","max","membershipType","handleChange","handleSearch","clearInput","removeMember","MemberModal","selectedRows","members","SearchInputComponent","Dropdown","DropdownList","CheckboxFilterComponent","nextOpen","member","translationFormatter","DetailOrganization","realmRepresentation","org","organization","convertToOrg","d","arrayToKeyValue","useTab","tab","useRoutableTab","toEditOrganization","settingsTab","attributesTab","membersTab","identityProvidersTab","eventsTab","hasAccess","useAccess","activeEventsTab","setActiveEventsTab","RoutableTabs","Tab","TabTitleText","FormAccess","OrganizationForm","ActionGroup","AttributesForm","Tabs","AdminEvents"],"mappings":"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"}