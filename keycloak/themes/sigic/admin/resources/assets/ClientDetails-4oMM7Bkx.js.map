{"version":3,"file":"ClientDetails-4oMM7Bkx.js","sources":["../../../../../../../../../node_modules/.pnpm/@patternfly+react-styles@5.4.1/node_modules/@patternfly/react-styles/css/components/CodeBlock/code-block.mjs","../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.14_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlock.js","../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.14_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlockAction.js","../../../../../../../src/components/download-dialog/DownloadDialog.tsx","../../../../../../../src/clients/advanced/TokenLifespan.tsx","../../../../../../../src/clients/advanced/AdvancedSettings.tsx","../../../../../../../src/clients/advanced/AuthenticationOverrides.tsx","../../../../../../../src/components/time-selector/TimeSelectorForm.tsx","../../../../../../../src/clients/advanced/AddHostDialog.tsx","../../../../../../../src/clients/advanced/ClusteringPanel.tsx","../../../../../../../src/clients/advanced/ApplicationUrls.tsx","../../../../../../../src/clients/advanced/FineGrainOpenIdConnect.tsx","../../../../../../../src/clients/advanced/FineGrainSamlEndpointConfig.tsx","../../../../../../../src/clients/advanced/OpenIdConnectCompatibilityModes.tsx","../../../../../../../src/clients/AdvancedTab.tsx","../../../../../../../src/clients/ClientSessions.tsx","../../../../../../../src/clients/add/AccessSettings.tsx","../../../../../../../src/clients/add/LoginSettingsPanel.tsx","../../../../../../../src/clients/add/LogoutPanel.tsx","../../../../../../../src/clients/ClientSettings.tsx","../../../../../../../src/clients/authorization/KeyBasedAttributeInput.tsx","../../../../../../../src/clients/authorization/AuthorizationDataModal.tsx","../../../../../../../src/clients/authorization/AuthorizationEvaluateResourcePolicies.tsx","../../../../../../../src/clients/authorization/AuthorizationEvaluateResource.tsx","../../../../../../../src/clients/authorization/evaluate/Results.tsx","../../../../../../../src/clients/authorization/AuthorizationEvaluate.tsx","../../../../../../../src/clients/authorization/AuthorizationExport.tsx","../../../../../../../src/clients/authorization/EmptyPermissionsState.tsx","../../../../../../../src/clients/authorization/Permissions.tsx","../../../../../../../src/clients/authorization/DetailCell.tsx","../../../../../../../src/clients/authorization/Resources.tsx","../../../../../../../src/clients/authorization/Scopes.tsx","../../../../../../../src/clients/authorization/ImportDialog.tsx","../../../../../../../src/clients/authorization/Settings.tsx","../../../../../../../src/clients/credentials/ClientSecret.tsx","../../../../../../../src/clients/credentials/SignedJWT.tsx","../../../../../../../src/clients/credentials/X509.tsx","../../../../../../../src/clients/credentials/Credentials.tsx","../../../../../../../src/clients/keys/Certificate.tsx","../../../../../../../src/clients/keys/StoreSettings.tsx","../../../../../../../src/clients/keys/GenerateKeyDialog.tsx","../../../../../../../src/clients/keys/ImportKeyDialog.tsx","../../../../../../../src/clients/keys/Keys.tsx","../../../../../../../src/clients/keys/ExportSamlKeyDialog.tsx","../../../../../../../src/clients/keys/SamlKeysDialog.tsx","../../../../../../../src/clients/keys/SamlImportKeyDialog.tsx","../../../../../../../src/clients/keys/SamlKeys.tsx","../../../../../../../src/clients/scopes/ClientScopes.tsx","../../../../../../../src/clients/scopes/GeneratedCodeTab.tsx","../../../../../../../src/clients/scopes/EvaluateScopes.tsx","../../../../../../../src/clients/service-account/ServiceAccount.tsx","../../../../../../../src/clients/ClientDetails.tsx"],"sourcesContent":["import './code-block.css';\nexport default {\n  \"codeBlock\": \"pf-v5-c-code-block\",\n  \"codeBlockActions\": \"pf-v5-c-code-block__actions\",\n  \"codeBlockCode\": \"pf-v5-c-code-block__code\",\n  \"codeBlockContent\": \"pf-v5-c-code-block__content\",\n  \"codeBlockHeader\": \"pf-v5-c-code-block__header\",\n  \"codeBlockPre\": \"pf-v5-c-code-block__pre\"\n};","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/CodeBlock/code-block.mjs';\nimport { css } from '@patternfly/react-styles';\nexport const CodeBlock = (_a) => {\n    var { children = null, className, actions = null } = _a, props = __rest(_a, [\"children\", \"className\", \"actions\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.codeBlock, className) }, props),\n        actions && (React.createElement(\"div\", { className: css(styles.codeBlockHeader) },\n            React.createElement(\"div\", { className: css(styles.codeBlockActions) }, actions))),\n        React.createElement(\"div\", { className: css(styles.codeBlockContent) }, children)));\n};\nCodeBlock.displayName = 'CodeBlock';\n//# sourceMappingURL=CodeBlock.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/CodeBlock/code-block.mjs';\nexport const CodeBlockAction = (_a) => {\n    var { children = null, className } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(`${styles.codeBlockActions}-item`, className) }, props), children));\n};\nCodeBlockAction.displayName = 'CodeBlockAction';\n//# sourceMappingURL=CodeBlockAction.js.map","import { fetchWithError } from \"@keycloak/keycloak-admin-client\";\nimport { HelpItem, useFetch, useHelp } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Form,\n  FormGroup,\n  MenuToggle,\n  ModalVariant,\n  Select,\n  SelectList,\n  SelectOption,\n  Stack,\n  StackItem,\n  TextArea,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { addTrailingSlash, prettyPrintJSON } from \"../../util\";\nimport { getAuthorizationHeaders } from \"../../utils/getAuthorizationHeaders\";\nimport { ConfirmDialogModal } from \"../confirm-dialog/ConfirmDialog\";\n\ntype DownloadDialogProps = {\n  id: string;\n  protocol?: string;\n  open: boolean;\n  toggleDialog: () => void;\n};\n\nexport const DownloadDialog = ({\n  id,\n  open,\n  toggleDialog,\n  protocol = \"openid-connect\",\n}: DownloadDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { realm } = useRealm();\n  const { t } = useTranslation();\n  const { enabled } = useHelp();\n  const serverInfo = useServerInfo();\n\n  const configFormats = serverInfo.clientInstallations![protocol];\n  const [selected, setSelected] = useState(\n    configFormats[configFormats.length - 1].id,\n  );\n  const [snippet, setSnippet] = useState<string | ArrayBuffer>();\n  const [openType, setOpenType] = useState(false);\n\n  const selectedConfig = useMemo(\n    () => configFormats.find((config) => config.id === selected) ?? null,\n    [selected],\n  );\n\n  const sanitizeSnippet = (snippet: string) =>\n    snippet.replace(\n      /<PrivateKeyPem>.*<\\/PrivateKeyPem>/gs,\n      `<PrivateKeyPem>${t(\"privateKeyMask\")}</PrivateKeyPem>`,\n    );\n\n  useFetch(\n    async () => {\n      if (selectedConfig?.mediaType === \"application/zip\") {\n        const response = await fetchWithError(\n          `${addTrailingSlash(\n            adminClient.baseUrl,\n          )}admin/realms/${realm}/clients/${id}/installation/providers/${selected}`,\n          {\n            method: \"GET\",\n            headers: getAuthorizationHeaders(\n              await adminClient.getAccessToken(),\n            ),\n          },\n        );\n\n        return response.arrayBuffer();\n      } else {\n        const snippet = await adminClient.clients.getInstallationProviders({\n          id,\n          providerId: selected,\n        });\n        if (typeof snippet === \"string\") {\n          return sanitizeSnippet(snippet);\n        } else {\n          return prettyPrintJSON(snippet);\n        }\n      }\n    },\n    (snippet) => setSnippet(snippet),\n    [id, selected],\n  );\n\n  // Clear snippet when selected config changes, this prevents old snippets from being displayed during fetch.\n  useEffect(() => setSnippet(\"\"), [id, selected]);\n\n  return (\n    <ConfirmDialogModal\n      titleKey={t(\"downloadAdaptorTitle\")}\n      continueButtonLabel={t(\"download\")}\n      onConfirm={() => {\n        saveAs(\n          new Blob([snippet!], { type: selectedConfig?.mediaType }),\n          selectedConfig?.filename,\n        );\n      }}\n      open={open}\n      toggleDialog={toggleDialog}\n      variant={ModalVariant.medium}\n    >\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <FormGroup\n              fieldId=\"type\"\n              label={t(\"formatOption\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"downloadType\")}\n                  fieldLabelId=\"formatOption\"\n                />\n              }\n            >\n              <Select\n                isOpen={openType}\n                onOpenChange={(isOpen) => setOpenType(isOpen)}\n                toggle={(ref) => (\n                  <MenuToggle\n                    id=\"type\"\n                    ref={ref}\n                    onClick={() => setOpenType(!openType)}\n                    isExpanded={openType}\n                  >\n                    {selected}\n                  </MenuToggle>\n                )}\n                selected={selected}\n                onSelect={(_, value) => {\n                  setSelected(value?.toString() || \"\");\n                  setOpenType(false);\n                }}\n                aria-label={t(\"selectOne\")}\n                popperProps={{\n                  appendTo: document.body,\n                }}\n              >\n                <SelectList>\n                  {configFormats.map((configFormat) => (\n                    <SelectOption\n                      key={configFormat.id}\n                      value={configFormat.id}\n                      isSelected={selected === configFormat.id}\n                      description={enabled ? configFormat.helpText : undefined}\n                    >\n                      {configFormat.displayType}\n                    </SelectOption>\n                  ))}\n                </SelectList>\n              </Select>\n            </FormGroup>\n          </StackItem>\n          {!selectedConfig?.downloadOnly && (\n            <StackItem isFilled>\n              <FormGroup\n                fieldId=\"details\"\n                label={t(\"details\")}\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"detailsHelp\")}\n                    fieldLabelId=\"details\"\n                  />\n                }\n              >\n                <TextArea\n                  id=\"details\"\n                  readOnly\n                  rows={12}\n                  resizeOrientation=\"vertical\"\n                  value={snippet && typeof snippet === \"string\" ? snippet : \"\"}\n                  aria-label=\"text area example\"\n                />\n              </FormGroup>\n            </StackItem>\n          )}\n        </Stack>\n      </Form>\n    </ConfirmDialogModal>\n  );\n};\n","import {\n  FormGroup,\n  MenuToggle,\n  Select,\n  SelectList,\n  SelectOption,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  TimeSelector,\n  Unit,\n} from \"../../components/time-selector/TimeSelector\";\n\ntype TokenLifespanProps = {\n  id: string;\n  name: string;\n  defaultValue?: number;\n  units?: Unit[];\n};\n\nconst inherited = \"tokenLifespan.inherited\";\nconst expires = \"tokenLifespan.expires\";\n\nexport const TokenLifespan = ({\n  id,\n  name,\n  defaultValue,\n  units,\n}: TokenLifespanProps) => {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n\n  const [focused, setFocused] = useState(false);\n  const onFocus = () => setFocused(true);\n  const onBlur = () => setFocused(false);\n\n  const { control } = useFormContext();\n  const isExpireSet = (value: string | number) =>\n    typeof value === \"number\" ||\n    (typeof value === \"string\" && value !== \"\") ||\n    focused;\n\n  return (\n    <FormGroup\n      label={t(id)}\n      fieldId={id}\n      labelIcon={<HelpItem helpText={t(`${id}Help`)} fieldLabelId={id} />}\n      data-testid={`token-lifespan-${id}`}\n    >\n      <Controller\n        name={name}\n        defaultValue=\"\"\n        control={control}\n        render={({ field }) => (\n          <Split hasGutter>\n            <SplitItem>\n              <Select\n                toggle={(ref) => (\n                  <MenuToggle\n                    ref={ref}\n                    onClick={() => setOpen(!open)}\n                    isExpanded={open}\n                  >\n                    {isExpireSet(field.value) ? t(expires) : t(inherited)}\n                  </MenuToggle>\n                )}\n                isOpen={open}\n                onOpenChange={(isOpen) => setOpen(isOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value);\n                  setOpen(false);\n                }}\n                selected={isExpireSet(field.value) ? t(expires) : t(inherited)}\n              >\n                <SelectList>\n                  <SelectOption value=\"\">{t(inherited)}</SelectOption>\n                  <SelectOption value={60}>{t(expires)}</SelectOption>\n                </SelectList>\n              </Select>\n            </SplitItem>\n            <SplitItem hidden={!isExpireSet(field.value)}>\n              <TimeSelector\n                validated={\n                  isExpireSet(field.value) && field.value! < 1\n                    ? \"warning\"\n                    : \"default\"\n                }\n                units={units}\n                value={field.value === \"\" ? defaultValue : field.value}\n                onChange={field.onChange}\n                onFocus={onFocus}\n                onBlur={onBlur}\n                min={1}\n                isDisabled={!isExpireSet(field.value)}\n              />\n            </SplitItem>\n          </Split>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { HelpItem, TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  MenuToggle,\n  Select,\n  SelectList,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeyValueInput } from \"../../components/key-value-form/KeyValueInput\";\nimport { MultiLineInput } from \"../../components/multi-line-input/MultiLineInput\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport useIsFeatureEnabled, { Feature } from \"../../utils/useIsFeatureEnabled\";\nimport { FormFields } from \"../ClientDetails\";\nimport { TokenLifespan } from \"./TokenLifespan\";\n\ntype AdvancedSettingsProps = {\n  save: () => void;\n  reset: () => void;\n  protocol?: string;\n  hasConfigureAccess?: boolean;\n};\n\nexport const AdvancedSettings = ({\n  save,\n  reset,\n  protocol,\n  hasConfigureAccess,\n}: AdvancedSettingsProps) => {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n\n  const { realmRepresentation: realm } = useRealm();\n\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const isDPoPEnabled = isFeatureEnabled(Feature.DPoP);\n\n  const { control } = useFormContext();\n  return (\n    <FormAccess\n      role=\"manage-realm\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      {protocol !== \"openid-connect\" && (\n        <FormGroup\n          label={t(\"assertionLifespan\")}\n          fieldId=\"assertionLifespan\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"assertionLifespanHelp\")}\n              fieldLabelId=\"assertionLifespan\"\n            />\n          }\n        >\n          <Controller\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.saml.assertion.lifespan\",\n            )}\n            defaultValue=\"\"\n            control={control}\n            render={({ field }) => (\n              <TimeSelector\n                units={[\"minute\", \"day\", \"hour\"]}\n                value={field.value}\n                onChange={field.onChange}\n              />\n            )}\n          />\n        </FormGroup>\n      )}\n      {protocol === \"openid-connect\" && (\n        <>\n          <TokenLifespan\n            id=\"accessTokenLifespan\"\n            name={convertAttributeNameToForm(\n              \"attributes.access.token.lifespan\",\n            )}\n            defaultValue={realm?.accessTokenLifespan}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n          <TokenLifespan\n            id=\"clientSessionIdle\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.session.idle.timeout\",\n            )}\n            defaultValue={realm?.clientSessionIdleTimeout}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n          <TokenLifespan\n            id=\"clientSessionMax\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.session.max.lifespan\",\n            )}\n            defaultValue={realm?.clientSessionMaxLifespan}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n          <TokenLifespan\n            id=\"clientOfflineSessionIdle\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.offline.session.idle.timeout\",\n            )}\n            defaultValue={realm?.offlineSessionIdleTimeout}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n\n          {realm?.offlineSessionMaxLifespanEnabled && (\n            <TokenLifespan\n              id=\"clientOfflineSessionMax\"\n              name={convertAttributeNameToForm(\n                \"attributes.client.offline.session.max.lifespan\",\n              )}\n              defaultValue={\n                realm?.offlineSessionMaxLifespanEnabled\n                  ? realm.offlineSessionMaxLifespan\n                  : undefined\n              }\n              units={[\"minute\", \"day\", \"hour\"]}\n            />\n          )}\n          <DefaultSwitchControl\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.tls.client.certificate.bound.access.tokens\",\n            )}\n            label={t(\"oAuthMutual\")}\n            labelIcon={t(\"oAuthMutualHelp\")}\n            stringify\n          />\n          {isDPoPEnabled && (\n            <DefaultSwitchControl\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.dpop.bound.access.tokens\",\n              )}\n              label={t(\"oAuthDPoP\")}\n              labelIcon={t(\"oAuthDPoPHelp\")}\n              stringify\n            />\n          )}\n          <FormGroup\n            label={t(\"keyForCodeExchange\")}\n            fieldId=\"keyForCodeExchange\"\n            hasNoPaddingTop\n            labelIcon={\n              <HelpItem\n                helpText={t(\"keyForCodeExchangeHelp\")}\n                fieldLabelId=\"keyForCodeExchange\"\n              />\n            }\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.pkce.code.challenge.method\",\n              )}\n              defaultValue=\"\"\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggle={(ref) => (\n                    <MenuToggle\n                      id=\"keyForCodeExchange\"\n                      ref={ref}\n                      onClick={() => setOpen(!open)}\n                      isExpanded={open}\n                    >\n                      {[field.value || t(\"choose\")]}\n                    </MenuToggle>\n                  )}\n                  isOpen={open}\n                  onOpenChange={(isOpen) => setOpen(isOpen)}\n                  onSelect={(_, value) => {\n                    field.onChange(value);\n                    setOpen(false);\n                  }}\n                  selected={field.value}\n                >\n                  <SelectList>\n                    {[\"\", \"S256\", \"plain\"].map((v) => (\n                      <SelectOption key={v} value={v}>\n                        {v || t(\"choose\")}\n                      </SelectOption>\n                    ))}\n                  </SelectList>\n                </Select>\n              )}\n            />\n          </FormGroup>\n          <DefaultSwitchControl\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.require.pushed.authorization.requests\",\n            )}\n            label={t(\"pushedAuthorizationRequestRequired\")}\n            labelIcon={t(\"pushedAuthorizationRequestRequiredHelp\")}\n            stringify\n          />\n          <DefaultSwitchControl\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.client.use.lightweight.access.token.enabled\",\n            )}\n            label={t(\"lightweightAccessToken\")}\n            labelIcon={t(\"lightweightAccessTokenHelp\")}\n            stringify\n          />\n\n          <DefaultSwitchControl\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.client.introspection.response.allow.jwt.claim.enabled\",\n            )}\n            label={t(\"supportJwtClaimInIntrospectionResponse\")}\n            labelIcon={t(\"supportJwtClaimInIntrospectionResponseHelp\")}\n            stringify\n          />\n          <FormGroup\n            label={t(\"acrToLoAMapping\")}\n            fieldId=\"acrToLoAMapping\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"acrToLoAMappingHelp\")}\n                fieldLabelId=\"acrToLoAMapping\"\n              />\n            }\n          >\n            <KeyValueInput\n              label={t(\"acrToLoAMapping\")}\n              name={convertAttributeNameToForm(\"attributes.acr.loa.map\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"defaultACRValues\")}\n            fieldId=\"defaultACRValues\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"defaultACRValuesHelp\")}\n                fieldLabelId=\"defaultACRValues\"\n              />\n            }\n          >\n            <MultiLineInput\n              id=\"defaultACRValues\"\n              aria-label=\"defaultACRValues\"\n              name={convertAttributeNameToForm(\"attributes.default.acr.values\")}\n              stringify\n            />\n          </FormGroup>\n          <TextControl\n            type=\"text\"\n            name={convertAttributeNameToForm(\"attributes.minimum.acr.value\")}\n            label={t(\"minimumACRValue\")}\n            labelIcon={t(\"minimumACRValueHelp\")}\n          />\n        </>\n      )}\n      <ActionGroup>\n        <Button\n          variant=\"secondary\"\n          onClick={save}\n          data-testid=\"OIDCAdvancedSave\"\n        >\n          {t(\"save\")}\n        </Button>\n        <Button variant=\"link\" onClick={reset} data-testid=\"OIDCAdvancedRevert\">\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import AuthenticationFlowRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/authenticationFlowRepresentation\";\nimport { SelectControl, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport { ActionGroup, Button } from \"@patternfly/react-core\";\nimport { sortBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\n\ntype AuthenticationOverridesProps = {\n  save: () => void;\n  reset: () => void;\n  protocol?: string;\n  hasConfigureAccess?: boolean;\n};\n\nexport const AuthenticationOverrides = ({\n  protocol,\n  save,\n  reset,\n  hasConfigureAccess,\n}: AuthenticationOverridesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const [flows, setFlows] = useState<AuthenticationFlowRepresentation[]>([]);\n\n  useFetch(\n    () => adminClient.authenticationManagement.getFlows(),\n    (flows) => {\n      let filteredFlows = [\n        ...flows.filter((flow) => flow.providerId !== \"client-flow\"),\n      ];\n      filteredFlows = sortBy(filteredFlows, [(f) => f.alias]);\n      setFlows(filteredFlows);\n    },\n    [],\n  );\n\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      <SelectControl\n        name=\"authenticationFlowBindingOverrides.browser\"\n        label={t(\"browserFlow\")}\n        labelIcon={t(\"browserFlowHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={[\n          { key: \"\", value: t(\"choose\") },\n          ...flows.map(({ id, alias }) => ({ key: id!, value: alias! })),\n        ]}\n      />\n      {protocol === \"openid-connect\" && (\n        <SelectControl\n          name=\"authenticationFlowBindingOverrides.direct_grant\"\n          label={t(\"directGrant\")}\n          labelIcon={t(\"directGrantHelp\")}\n          controller={{\n            defaultValue: \"\",\n          }}\n          options={[\n            { key: \"\", value: t(\"choose\") },\n            ...flows.map(({ id, alias }) => ({ key: id!, value: alias! })),\n          ]}\n        />\n      )}\n      <ActionGroup>\n        <Button\n          variant=\"secondary\"\n          onClick={save}\n          data-testid=\"OIDCAuthFlowOverrideSave\"\n        >\n          {t(\"save\")}\n        </Button>\n        <Button\n          variant=\"link\"\n          onClick={reset}\n          data-testid=\"OIDCAuthFlowOverrideRevert\"\n        >\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import { useController } from \"react-hook-form\";\nimport { TimeSelector, TimeSelectorProps } from \"./TimeSelector\";\n\ntype TimeSelectorFormProps = TimeSelectorProps & {\n  name: string;\n};\n\nexport const TimeSelectorForm = (props: TimeSelectorFormProps) => {\n  const { field } = useController(props);\n\n  return <TimeSelector {...props} {...field} />;\n};\n","import {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  Modal,\n} from \"@patternfly/react-core\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\n\ntype FormFields = {\n  node: string;\n};\n\ntype AddHostDialogProps = {\n  clientId: string;\n  isOpen: boolean;\n  onAdded: (host: string) => void;\n  onClose: () => void;\n};\n\nexport const AddHostDialog = ({\n  clientId: id,\n  isOpen,\n  onAdded,\n  onClose,\n}: AddHostDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const form = useForm<FormFields>();\n  const {\n    handleSubmit,\n    formState: { isDirty, isValid },\n  } = form;\n  const { addAlert, addError } = useAlerts();\n\n  async function onSubmit({ node }: FormFields) {\n    try {\n      await adminClient.clients.addClusterNode({\n        id,\n        node,\n      });\n      onAdded(node);\n      addAlert(t(\"addedNodeSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"addedNodeFail\", error);\n    }\n\n    onClose();\n  }\n\n  return (\n    <Modal\n      title={t(\"addNode\")}\n      isOpen={isOpen}\n      onClose={onClose}\n      variant=\"small\"\n      actions={[\n        <Button\n          key=\"confirm\"\n          id=\"add-node-confirm\"\n          type=\"submit\"\n          form=\"add-host-form\"\n          isDisabled={!isDirty || !isValid}\n        >\n          {t(\"save\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          id=\"add-node-cancel\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <FormProvider {...form}>\n        <Form id=\"add-host-form\" onSubmit={handleSubmit(onSubmit)} isHorizontal>\n          <TextControl\n            name=\"node\"\n            label={t(\"nodeHost\")}\n            rules={{\n              required: t(\"required\"),\n            }}\n          />\n        </Form>\n      </FormProvider>\n    </Modal>\n  );\n};\n","import {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  ExpandableSection,\n  FormGroup,\n  Split,\n  SplitItem,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { Action, KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { TimeSelectorForm } from \"../../components/time-selector/TimeSelectorForm\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../../utils/useFormatDate\";\nimport { AddHostDialog } from \".././advanced/AddHostDialog\";\nimport { AdvancedProps, parseResult } from \"../AdvancedTab\";\n\ntype Node = {\n  host: string;\n  registration: string;\n};\n\nexport const ClusteringPanel = ({\n  save,\n  client: { id, registeredNodes, access },\n}: AdvancedProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const formatDate = useFormatDate();\n\n  const [nodes, setNodes] = useState(registeredNodes || {});\n  const [expanded, setExpanded] = useState(false);\n  const [selectedNode, setSelectedNode] = useState(\"\");\n  const [addNodeOpen, setAddNodeOpen] = useState(false);\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(new Date().getTime());\n\n  const testCluster = async () => {\n    const result = await adminClient.clients.testNodesAvailable({ id: id! });\n    parseResult(result, \"testCluster\", addAlert, t);\n  };\n\n  const [toggleDeleteNodeConfirm, DeleteNodeConfirm] = useConfirmDialog({\n    titleKey: \"deleteNode\",\n    messageKey: t(\"deleteNodeBody\", {\n      node: selectedNode,\n    }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.deleteClusterNode({\n          id: id!,\n          node: selectedNode,\n        });\n        setNodes({\n          ...Object.keys(nodes).reduce((object: any, key) => {\n            if (key !== selectedNode) {\n              object[key] = nodes[key];\n            }\n            return object;\n          }, {}),\n        });\n        refresh();\n        addAlert(t(\"deleteNodeSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"deleteNodeFail\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <FormAccess\n        role=\"manage-clients\"\n        fineGrainedAccess={access?.configure}\n        isHorizontal\n      >\n        <FormGroup\n          label={t(\"nodeReRegistrationTimeout\")}\n          fieldId=\"kc-node-reregistration-timeout\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"nodeReRegistrationTimeoutHelp\")}\n              fieldLabelId=\"nodeReRegistrationTimeout\"\n            />\n          }\n        >\n          <Split hasGutter>\n            <SplitItem>\n              <TimeSelectorForm name=\"nodeReRegistrationTimeout\" />\n            </SplitItem>\n            <SplitItem>\n              <Button variant={ButtonVariant.secondary} onClick={() => save()}>\n                {t(\"save\")}\n              </Button>\n            </SplitItem>\n          </Split>\n        </FormGroup>\n      </FormAccess>\n      <>\n        <DeleteNodeConfirm />\n        <AddHostDialog\n          clientId={id!}\n          isOpen={addNodeOpen}\n          onAdded={(node) => {\n            nodes[node] = Date.now() / 1000;\n            refresh();\n          }}\n          onClose={() => setAddNodeOpen(false)}\n        />\n        <ExpandableSection\n          toggleText={t(\"registeredClusterNodes\")}\n          onToggle={(_event, val) => setExpanded(val)}\n          isExpanded={expanded}\n        >\n          <KeycloakDataTable\n            key={key}\n            ariaLabelKey=\"registeredClusterNodes\"\n            loader={() =>\n              Promise.resolve<Node[]>(\n                Object.entries(nodes || {}).map((entry) => {\n                  return { host: entry[0], registration: entry[1] };\n                }),\n              )\n            }\n            toolbarItem={\n              <>\n                <ToolbarItem>\n                  <Button\n                    id=\"testClusterAvailability\"\n                    data-testid=\"test-cluster-availability\"\n                    onClick={testCluster}\n                    variant={ButtonVariant.secondary}\n                    isDisabled={Object.keys(nodes).length === 0}\n                  >\n                    {t(\"testClusterAvailability\")}\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button\n                    id=\"registerNodeManually\"\n                    data-testid=\"registerNodeManually\"\n                    onClick={() => setAddNodeOpen(true)}\n                    variant={ButtonVariant.tertiary}\n                  >\n                    {t(\"registerNodeManually\")}\n                  </Button>\n                </ToolbarItem>\n              </>\n            }\n            actions={[\n              {\n                title: t(\"delete\"),\n                onRowClick: (node) => {\n                  setSelectedNode(node.host);\n                  toggleDeleteNodeConfirm();\n                },\n              } as Action<Node>,\n            ]}\n            columns={[\n              {\n                name: \"host\",\n                displayKey: \"nodeHost\",\n              },\n              {\n                name: \"registration\",\n                displayKey: \"lastRegistration\",\n                cellFormatters: [\n                  (value) =>\n                    value\n                      ? formatDate(\n                          new Date(parseInt(value.toString()) * 1000),\n                          FORMAT_DATE_AND_TIME,\n                        )\n                      : \"\",\n                ],\n              },\n            ]}\n            emptyState={\n              <ListEmptyState\n                message={t(\"noNodes\")}\n                instructions={t(\"noNodesInstructions\")}\n                primaryActionText={t(\"registerNodeManually\")}\n                onPrimaryAction={() => setAddNodeOpen(true)}\n              />\n            }\n          />\n        </ExpandableSection>\n      </>\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\n\ntype ApplicationUrlsProps = {\n  isDisabled?: boolean;\n};\n\nexport const ApplicationUrls = (props: ApplicationUrlsProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <TextControl\n        name=\"attributes.logoUri\"\n        label={t(\"logoUrl\")}\n        labelIcon={t(\"logoUrlHelp\")}\n        type=\"url\"\n        {...props}\n      />\n      <TextControl\n        name=\"attributes.policyUri\"\n        label={t(\"policyUrl\")}\n        labelIcon={t(\"policyUrlHelp\")}\n        type=\"url\"\n        {...props}\n      />\n      <TextControl\n        name=\"attributes.tosUri\"\n        label={t(\"termsOfServiceUrl\")}\n        labelIcon={t(\"termsOfServiceUrlHelp\")}\n        type=\"url\"\n        {...props}\n      />\n    </>\n  );\n};\n","import { ProviderRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/serverInfoRepesentation\";\nimport { ActionGroup, Button, FormGroup, Switch } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem, SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { MultiLineInput } from \"../../components/multi-line-input/MultiLineInput\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertAttributeNameToForm, sortProviders } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\nimport { ApplicationUrls } from \"./ApplicationUrls\";\nimport { Controller, useFormContext } from \"react-hook-form\";\n\ntype FineGrainOpenIdConnectProps = {\n  save: () => void;\n  reset: () => void;\n  hasConfigureAccess?: boolean;\n};\n\nexport const FineGrainOpenIdConnect = ({\n  save,\n  reset,\n  hasConfigureAccess,\n}: FineGrainOpenIdConnectProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n  const providers = useServerInfo().providers;\n  const clientSignatureProviders = providers?.clientSignature.providers;\n  const contentEncryptionProviders = providers?.contentencryption.providers;\n  const cekManagementProviders = providers?.cekmanagement.providers;\n  const signatureProviders = providers?.signature.providers;\n\n  const convert = (list: { [index: string]: ProviderRepresentation }) =>\n    sortProviders(list).map((i) => ({ key: i, value: i }));\n\n  const prependEmpty = (list: { [index: string]: ProviderRepresentation }) => [\n    { key: \"\", value: t(\"choose\") },\n    ...convert(list),\n  ];\n\n  const prependAny = (list: { [index: string]: ProviderRepresentation }) => [\n    { key: \"any\", value: t(\"any\") },\n    ...convert(list),\n  ];\n\n  const prependNone = (list: { [index: string]: ProviderRepresentation }) => [\n    { key: \"none\", value: t(\"none\") },\n    ...convert(list),\n  ];\n\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      <ApplicationUrls />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.access.token.signed.response.alg\",\n        )}\n        label={t(\"accessTokenSignatureAlgorithm\")}\n        labelIcon={t(\"accessTokenSignatureAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(clientSignatureProviders!)}\n      />\n      <FormGroup\n        label={t(\"useRfc9068AccessTokenType\")}\n        fieldId=\"useRfc9068AccessTokenType\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"useRfc9068AccessTokenTypeHelp\")}\n            fieldLabelId=\"useRfc9068AccessTokenType\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.access.token.header.type.rfc9068\",\n          )}\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"useRfc9068AccessTokenType\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(_event, value) => field.onChange(value.toString())}\n              aria-label={t(\"useRfc9068AccessTokenType\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.id.token.signed.response.alg\",\n        )}\n        label={t(\"idTokenSignatureAlgorithm\")}\n        labelIcon={t(\"idTokenSignatureAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(clientSignatureProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.id.token.encrypted.response.alg\",\n        )}\n        label={t(\"idTokenEncryptionKeyManagementAlgorithm\")}\n        labelIcon={t(\"idTokenEncryptionKeyManagementAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(cekManagementProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.id.token.encrypted.response.enc\",\n        )}\n        label={t(\"idTokenEncryptionContentEncryptionAlgorithm\")}\n        labelIcon={t(\"idTokenEncryptionContentEncryptionAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(contentEncryptionProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.user.info.response.signature.alg\",\n        )}\n        label={t(\"userInfoSignedResponseAlgorithm\")}\n        labelIcon={t(\"userInfoSignedResponseAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(signatureProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.user.info.encrypted.response.alg\",\n        )}\n        label={t(\"userInfoResponseEncryptionKeyManagementAlgorithm\")}\n        labelIcon={t(\"userInfoResponseEncryptionKeyManagementAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(cekManagementProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.user.info.encrypted.response.enc\",\n        )}\n        label={t(\"userInfoResponseEncryptionContentEncryptionAlgorithm\")}\n        labelIcon={t(\n          \"userInfoResponseEncryptionContentEncryptionAlgorithmHelp\",\n        )}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(contentEncryptionProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.request.object.signature.alg\",\n        )}\n        label={t(\"requestObjectSignatureAlgorithm\")}\n        labelIcon={t(\"requestObjectSignatureAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"any\",\n        }}\n        options={[\n          { key: \"any\", value: t(\"any\") },\n          ...prependNone(clientSignatureProviders!),\n        ]}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.request.object.encryption.alg\",\n        )}\n        label={t(\"requestObjectEncryption\")}\n        labelIcon={t(\"requestObjectEncryptionHelp\")}\n        controller={{\n          defaultValue: \"any\",\n        }}\n        options={prependAny(cekManagementProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.request.object.encryption.enc\",\n        )}\n        label={t(\"requestObjectEncoding\")}\n        labelIcon={t(\"requestObjectEncodingHelp\")}\n        controller={{\n          defaultValue: \"any\",\n        }}\n        options={prependAny(contentEncryptionProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.request.object.required\",\n        )}\n        label={t(\"requestObjectRequired\")}\n        labelIcon={t(\"requestObjectRequiredHelp\")}\n        controller={{\n          defaultValue: \"not required\",\n        }}\n        options={[\n          \"not required\",\n          \"request or request_uri\",\n          \"request only\",\n          \"request_uri only\",\n        ].map((p) => ({\n          key: p,\n          value: t(`requestObject.${p}`),\n        }))}\n      />\n      <FormGroup\n        label={t(\"validRequestURIs\")}\n        fieldId=\"validRequestURIs\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"validRequestURIsHelp\")}\n            fieldLabelId=\"validRequestURIs\"\n          />\n        }\n      >\n        <MultiLineInput\n          name={convertAttributeNameToForm(\"attributes.request.uris\")}\n          aria-label={t(\"validRequestURIs\")}\n          addButtonLabel=\"addRequestUri\"\n          stringify\n        />\n      </FormGroup>\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.authorization.signed.response.alg\",\n        )}\n        label={t(\"authorizationSignedResponseAlg\")}\n        labelIcon={t(\"authorizationSignedResponseAlgHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(signatureProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.authorization.encrypted.response.alg\",\n        )}\n        label={t(\"authorizationEncryptedResponseAlg\")}\n        labelIcon={t(\"authorizationEncryptedResponseAlgHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(cekManagementProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.authorization.encrypted.response.enc\",\n        )}\n        label={t(\"authorizationEncryptedResponseEnc\")}\n        labelIcon={t(\"authorizationEncryptedResponseEncHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(contentEncryptionProviders!)}\n      />\n      <ActionGroup>\n        <Button\n          variant=\"secondary\"\n          id=\"fineGrainSave\"\n          data-testid=\"fineGrainSave\"\n          onClick={save}\n        >\n          {t(\"save\")}\n        </Button>\n        <Button\n          id=\"fineGrainRevert\"\n          data-testid=\"fineGrainRevert\"\n          variant=\"link\"\n          onClick={reset}\n        >\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import { ActionGroup, Button } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport { ApplicationUrls } from \"./ApplicationUrls\";\n\ntype FineGrainSamlEndpointConfigProps = {\n  save: () => void;\n  reset: () => void;\n};\n\nexport const FineGrainSamlEndpointConfig = ({\n  save,\n  reset,\n}: FineGrainSamlEndpointConfigProps) => {\n  const { t } = useTranslation();\n  return (\n    <FormAccess role=\"manage-realm\" isHorizontal>\n      <ApplicationUrls />\n      <TextControl\n        name=\"attributes.saml_assertion_consumer_url_post\"\n        label={t(\"assertionConsumerServicePostBindingURL\")}\n        labelIcon={t(\"assertionConsumerServicePostBindingURLHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_assertion_consumer_url_redirect\"\n        label={t(\"assertionConsumerServiceRedirectBindingURL\")}\n        labelIcon={t(\"assertionConsumerServiceRedirectBindingURLHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_single_logout_service_url_post\"\n        label={t(\"logoutServicePostBindingURL\")}\n        labelIcon={t(\"logoutServicePostBindingURLHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_single_logout_service_url_redirect\"\n        label={t(\"logoutServiceRedirectBindingURL\")}\n        labelIcon={t(\"logoutServiceRedirectBindingURLHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_single_logout_service_url_soap\"\n        label={t(\"logoutServiceSoapBindingUrl\")}\n        labelIcon={t(\"logoutServiceSoapBindingUrlHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_single_logout_service_url_artifact\"\n        label={t(\"logoutServiceArtifactBindingUrl\")}\n        labelIcon={t(\"logoutServiceArtifactBindingUrlHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_artifact_binding_url\"\n        label={t(\"artifactBindingUrl\")}\n        labelIcon={t(\"artifactBindingUrlHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_artifact_resolution_service_url\"\n        label={t(\"artifactResolutionService\")}\n        labelIcon={t(\"artifactResolutionServiceHelp\")}\n        type=\"url\"\n      />\n\n      <ActionGroup>\n        <Button variant=\"tertiary\" onClick={save} data-testid=\"fineGrainSave\">\n          {t(\"save\")}\n        </Button>\n        <Button variant=\"link\" onClick={reset} data-testid=\"fineGrainRevert\">\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import { ActionGroup, Button, FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { HelpItem, SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\nimport useIsFeatureEnabled, { Feature } from \"../../utils/useIsFeatureEnabled\";\n\ntype OpenIdConnectCompatibilityModesProps = {\n  save: () => void;\n  reset: () => void;\n  hasConfigureAccess?: boolean;\n};\n\nexport const OpenIdConnectCompatibilityModes = ({\n  save,\n  reset,\n  hasConfigureAccess,\n}: OpenIdConnectCompatibilityModesProps) => {\n  const { t } = useTranslation();\n  const { control, watch } = useFormContext();\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const tokenExchangeEnabled = watch(\n    convertAttributeNameToForm<FormFields>(\n      \"attributes.standard.token.exchange.enabled\",\n    ),\n  );\n  const useRefreshTokens = watch(\n    convertAttributeNameToForm<FormFields>(\"attributes.use.refresh.tokens\"),\n    \"true\",\n  );\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      <FormGroup\n        label={t(\"excludeSessionStateFromAuthenticationResponse\")}\n        fieldId=\"excludeSessionStateFromAuthenticationResponse\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"excludeSessionStateFromAuthenticationResponseHelp\")}\n            fieldLabelId=\"excludeSessionStateFromAuthenticationResponse\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.exclude.session.state.from.auth.response\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"excludeSessionStateFromAuthenticationResponse-switch\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(_event, value) => field.onChange(value.toString())}\n              aria-label={t(\"excludeSessionStateFromAuthenticationResponse\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"excludeIssuerFromAuthenticationResponse\")}\n        fieldId=\"excludeIssuerFromAuthenticationResponse\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"excludeIssuerFromAuthenticationResponseHelp\")}\n            fieldLabelId=\"excludeIssuerFromAuthenticationResponse\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.exclude.issuer.from.auth.response\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"excludeIssuerFromAuthenticationResponse-switch\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(_event, value) => field.onChange(value.toString())}\n              aria-label={t(\"excludeIssuerFromAuthenticationResponse\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"useRefreshTokens\")}\n        fieldId=\"useRefreshTokens\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"useRefreshTokensHelp\")}\n            fieldLabelId=\"useRefreshTokens\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.use.refresh.tokens\",\n          )}\n          defaultValue=\"true\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"useRefreshTokens\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(_event, value) => field.onChange(value.toString())}\n              aria-label={t(\"useRefreshTokens\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"useRefreshTokenForClientCredentialsGrant\")}\n        fieldId=\"useRefreshTokenForClientCredentialsGrant\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"useRefreshTokenForClientCredentialsGrantHelp\")}\n            fieldLabelId=\"useRefreshTokenForClientCredentialsGrant\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.client_credentials.use_refresh_token\",\n          )}\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"useRefreshTokenForClientCredentialsGrant\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(_event, value) => field.onChange(value.toString())}\n              aria-label={t(\"useRefreshTokenForClientCredentialsGrant\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"useLowerCaseBearerType\")}\n        fieldId=\"useLowerCaseBearerType\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"useLowerCaseBearerTypeHelp\")}\n            fieldLabelId=\"useLowerCaseBearerType\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.token.response.type.bearer.lower-case\",\n          )}\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"useLowerCaseBearerType\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(_event, value) => field.onChange(value.toString())}\n              aria-label={t(\"useLowerCaseBearerType\")}\n            />\n          )}\n        />\n      </FormGroup>\n\n      {isFeatureEnabled(Feature.StandardTokenExchangeV2) && (\n        <SelectControl\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.standard.token.exchange.enableRefreshRequestedTokenType\",\n          )}\n          label={t(\"enableRefreshRequestedTokenType\")}\n          labelIcon={t(\"enableRefreshRequestedTokenTypeHelp\")}\n          controller={{\n            defaultValue: \"\",\n          }}\n          isDisabled={\n            tokenExchangeEnabled?.toString() !== \"true\" ||\n            useRefreshTokens?.toString() !== \"true\"\n          }\n          options={[\n            { key: \"\", value: t(\"choose\") },\n            { key: \"NO\", value: t(\"no\") },\n            { key: \"SAME_SESSION\", value: t(\"sameSession\") },\n          ]}\n        />\n      )}\n      <ActionGroup>\n        <Button\n          variant=\"secondary\"\n          onClick={save}\n          data-testid=\"OIDCCompatabilitySave\"\n        >\n          {t(\"save\")}\n        </Button>\n        <Button\n          variant=\"link\"\n          onClick={reset}\n          data-testid=\"OIDCCompatabilityRevert\"\n        >\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type GlobalRequestResult from \"@keycloak/keycloak-admin-client/lib/defs/globalRequestResult\";\nimport { AlertVariant, PageSection, Text } from \"@patternfly/react-core\";\nimport type { TFunction } from \"i18next\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { ScrollForm } from \"@keycloak/keycloak-ui-shared\";\nimport type { AddAlertFunction } from \"@keycloak/keycloak-ui-shared\";\nimport { convertAttributeNameToForm, toUpperCase } from \"../util\";\nimport type { FormFields, SaveOptions } from \"./ClientDetails\";\nimport { AdvancedSettings } from \"./advanced/AdvancedSettings\";\nimport { AuthenticationOverrides } from \"./advanced/AuthenticationOverrides\";\nimport { ClusteringPanel } from \"./advanced/ClusteringPanel\";\nimport { FineGrainOpenIdConnect } from \"./advanced/FineGrainOpenIdConnect\";\nimport { FineGrainSamlEndpointConfig } from \"./advanced/FineGrainSamlEndpointConfig\";\nimport { OpenIdConnectCompatibilityModes } from \"./advanced/OpenIdConnectCompatibilityModes\";\n\nexport const parseResult = (\n  result: GlobalRequestResult,\n  prefixKey: string,\n  addAlert: AddAlertFunction,\n  t: TFunction,\n) => {\n  const successCount = result.successRequests?.length || 0;\n  const failedCount = result.failedRequests?.length || 0;\n\n  if (successCount === 0 && failedCount === 0) {\n    addAlert(t(\"noAdminUrlSet\"), AlertVariant.warning);\n  } else if (failedCount > 0) {\n    addAlert(\n      t(prefixKey + \"Success\", { successNodes: result.successRequests }),\n      AlertVariant.success,\n    );\n    addAlert(\n      t(prefixKey + \"Fail\", { failedNodes: result.failedRequests }),\n      AlertVariant.danger,\n    );\n  } else {\n    addAlert(\n      t(prefixKey + \"Success\", { successNodes: result.successRequests }),\n      AlertVariant.success,\n    );\n  }\n};\n\nexport type AdvancedProps = {\n  save: (options?: SaveOptions) => void;\n  client: ClientRepresentation;\n};\n\nexport const AdvancedTab = ({ save, client }: AdvancedProps) => {\n  const { t } = useTranslation();\n  const openIdConnect = \"openid-connect\";\n\n  const { setValue } = useFormContext();\n  const {\n    publicClient,\n    attributes,\n    protocol,\n    authenticationFlowBindingOverrides,\n  } = client;\n\n  const resetFields = (names: string[]) => {\n    for (const name of names) {\n      setValue(\n        convertAttributeNameToForm<FormFields>(`attributes.${name}`),\n        attributes?.[name] || \"\",\n      );\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-py-0\">\n      <ScrollForm\n        label={t(\"jumpToSection\")}\n        sections={[\n          {\n            title: t(\"clustering\"),\n            isHidden: !publicClient,\n            panel: <ClusteringPanel client={client} save={save} />,\n          },\n          {\n            title: t(\"fineGrainOpenIdConnectConfiguration\"),\n            isHidden: protocol !== openIdConnect,\n            panel: (\n              <>\n                <Text className=\"pf-v5-u-pb-lg\">\n                  {t(\"fineGrainOpenIdConnectConfigurationHelp\")}\n                </Text>\n                <FineGrainOpenIdConnect\n                  save={save}\n                  reset={() => {\n                    resetFields([\n                      \"logoUri\",\n                      \"policyUri\",\n                      \"tosUri\",\n                      \"access.token.signed.response.alg\",\n                      \"access.token.header.type.rfc9068\",\n                      \"id.token.signed.response.alg\",\n                      \"id.token.encrypted.response.alg\",\n                      \"id.token.encrypted.response.enc\",\n                      \"user.info.response.signature.alg\",\n                      \"user.info.encrypted.response.alg\",\n                      \"user.info.encrypted.response.enc\",\n                      \"request.object.signature.alg\",\n                      \"request.object.encryption.alg\",\n                      \"request.object.encryption.enc\",\n                      \"request.object.required\",\n                      \"request.uris\",\n                      \"authorization.signed.response.alg\",\n                      \"authorization.encrypted.response.alg\",\n                      \"authorization.encrypted.response.enc\",\n                    ]);\n                  }}\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"openIdConnectCompatibilityModes\"),\n            isHidden: protocol !== openIdConnect,\n            panel: (\n              <>\n                <Text className=\"pf-v5-u-pb-lg\">\n                  {t(\"openIdConnectCompatibilityModesHelp\")}\n                </Text>\n                <OpenIdConnectCompatibilityModes\n                  save={() => save()}\n                  reset={() =>\n                    resetFields([\n                      \"exclude.session.state.from.auth.response\",\n                      \"use.refresh.tokens\",\n                      \"client_credentials.use_refresh_token\",\n                      \"token.response.type.bearer.lower-case\",\n                    ])\n                  }\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"fineGrainSamlEndpointConfig\"),\n            isHidden: protocol === openIdConnect,\n            panel: (\n              <>\n                <Text className=\"pf-v5-u-pb-lg\">\n                  {t(\"fineGrainSamlEndpointConfigHelp\")}\n                </Text>\n                <FineGrainSamlEndpointConfig\n                  save={() => save()}\n                  reset={() =>\n                    resetFields([\n                      \"logoUri\",\n                      \"policyUri\",\n                      \"tosUri\",\n                      \"saml_assertion_consumer_url_post\",\n                      \"saml_assertion_consumer_url_redirect\",\n                      \"saml_single_logout_service_url_post\",\n                      \"saml_single_logout_service_url_redirect\",\n                      \"saml_single_logout_service_url_artifact\",\n                      \"saml_artifact_binding_url\",\n                      \"saml_artifact_resolution_service_url\",\n                    ])\n                  }\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"advancedSettings\"),\n            panel: (\n              <>\n                <Text className=\"pf-v5-u-pb-lg\">\n                  {t(\"advancedSettings\" + toUpperCase(protocol || \"\"))}\n                </Text>\n                <AdvancedSettings\n                  protocol={protocol}\n                  save={() => save()}\n                  reset={() => {\n                    resetFields([\n                      \"saml.assertion.lifespan\",\n                      \"access.token.lifespan\",\n                      \"session.idle.timeout\",\n                      \"client.session.max.lifespan\",\n                      \"client.offline.session.idle.timeout\",\n                      \"client.offline.session.max.lifespan\",\n                      \"dpop.bound.access.tokens\",\n                      \"tls.client.certificate.bound.access.tokens\",\n                      \"require.pushed.authorization.requests\",\n                      \"client.use.lightweight.access.token.enabled\",\n                      \"client.introspection.response.allow.jwt.claim.enabled\",\n                      \"pkce.code.challenge.method\",\n                      \"acr.loa.map\",\n                      \"default.acr.values\",\n                      \"minimum.acr.value\",\n                    ]);\n                  }}\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"authenticationOverrides\"),\n            panel: (\n              <>\n                <Text className=\"pf-v5-u-pb-lg\">\n                  {t(\"authenticationOverridesHelp\")}\n                </Text>\n                <AuthenticationOverrides\n                  protocol={protocol}\n                  save={() => save()}\n                  reset={() => {\n                    setValue(\n                      \"authenticationFlowBindingOverrides.browser\",\n                      authenticationFlowBindingOverrides?.browser,\n                    );\n                    setValue(\n                      \"authenticationFlowBindingOverrides.direct_grant\",\n                      authenticationFlowBindingOverrides?.direct_grant,\n                    );\n                  }}\n                />\n              </>\n            ),\n          },\n        ]}\n        borders\n      />\n    </PageSection>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type UserSessionRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userSessionRepresentation\";\nimport { PageSection } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { fetchAdminUI } from \"../context/auth/admin-ui-endpoint\";\nimport SessionsTable from \"../sessions/SessionsTable\";\n\ntype ClientSessionsProps = {\n  client: ClientRepresentation;\n};\n\nexport const ClientSessions = ({ client }: ClientSessionsProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n\n  const loader = async (first?: number, max?: number, search?: string) =>\n    fetchAdminUI<UserSessionRepresentation[]>(\n      adminClient,\n      \"ui-ext/sessions/client\",\n      {\n        first: `${first}`,\n        max: `${max}`,\n        type: \"ALL\",\n        clientId: client.id!,\n        search: search || \"\",\n      },\n    );\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      <SessionsTable\n        loader={loader}\n        hiddenColumns={[\"clients\"]}\n        emptyInstructions={t(\"noSessionsForClient\")}\n      />\n    </PageSection>\n  );\n};\n","import { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\n\nimport { FixedButtonsGroup } from \"../../components/form/FixedButtonGroup\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { FormFields } from \"../ClientDetails\";\nimport type { ClientSettingsProps } from \"../ClientSettings\";\nimport { LoginSettings } from \"./LoginSettings\";\n\nexport const AccessSettings = ({\n  client,\n  save,\n  reset,\n}: ClientSettingsProps) => {\n  const { t } = useTranslation();\n  const { watch } = useFormContext<FormFields>();\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || client.access?.configure;\n\n  const protocol = watch(\"protocol\");\n\n  return (\n    <FormAccess\n      isHorizontal\n      fineGrainedAccess={client.access?.configure}\n      role=\"manage-clients\"\n    >\n      {!client.bearerOnly && <LoginSettings protocol={protocol} />}\n      {protocol !== \"saml\" && (\n        <TextControl\n          type=\"url\"\n          name=\"adminUrl\"\n          label={t(\"adminURL\")}\n          labelIcon={t(\"adminURLHelp\")}\n        />\n      )}\n      {client.bearerOnly && (\n        <FixedButtonsGroup\n          name=\"settings\"\n          save={save}\n          reset={reset}\n          isDisabled={isManager}\n        />\n      )}\n    </FormAccess>\n  );\n};\n","import { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { SelectControl, TextAreaControl } from \"@keycloak/keycloak-ui-shared\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\nexport const LoginSettingsPanel = ({ access }: { access?: boolean }) => {\n  const { t } = useTranslation();\n  const { watch } = useFormContext<FormFields>();\n\n  const loginThemes = useServerInfo().themes![\"login\"];\n  const consentRequired = watch(\"consentRequired\");\n  const displayOnConsentScreen: string = watch(\n    convertAttributeNameToForm<FormFields>(\n      \"attributes.display.on.consent.screen\",\n    ),\n  );\n\n  return (\n    <FormAccess isHorizontal fineGrainedAccess={access} role=\"manage-clients\">\n      <SelectControl\n        name=\"attributes.login_theme\"\n        label={t(\"loginTheme\")}\n        labelIcon={t(\"loginThemeHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={[\n          { key: \"\", value: t(\"choose\") },\n          ...loginThemes.map(({ name }) => ({ key: name, value: name })),\n        ]}\n      />\n      <DefaultSwitchControl\n        name=\"consentRequired\"\n        label={t(\"consentRequired\")}\n        labelIcon={t(\"consentRequiredHelp\")}\n      />\n      <DefaultSwitchControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.display.on.consent.screen\",\n        )}\n        label={t(\"displayOnClient\")}\n        labelIcon={t(\"displayOnClientHelp\")}\n        isDisabled={!consentRequired}\n        stringify\n      />\n      <TextAreaControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.consent.screen.text\",\n        )}\n        label={t(\"consentScreenText\")}\n        labelIcon={t(\"consentScreenTextHelp\")}\n        isDisabled={!(consentRequired && displayOnConsentScreen === \"true\")}\n      />\n    </FormAccess>\n  );\n};\n","import { FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem, TextControl } from \"@keycloak/keycloak-ui-shared\";\n\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { FixedButtonsGroup } from \"../../components/form/FixedButtonGroup\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\nimport type { ClientSettingsProps } from \"../ClientSettings\";\n\nconst validateUrl = (uri: string | undefined, error: string) =>\n  ((uri?.startsWith(\"https://\") || uri?.startsWith(\"http://\")) &&\n    !uri.includes(\"*\")) ||\n  uri === \"\" ||\n  error;\n\nexport const LogoutPanel = ({\n  save,\n  reset,\n  client: { access },\n}: ClientSettingsProps) => {\n  const { t } = useTranslation();\n  const { control, watch } = useFormContext<FormFields>();\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || access?.configure;\n\n  const protocol = watch(\"protocol\");\n  const frontchannelLogout = watch(\"frontchannelLogout\");\n  const frontchannelLogoutTooltip =\n    protocol === \"openid-connect\"\n      ? \"frontchannelLogoutOIDCHelp\"\n      : \"frontchannelLogoutHelp\";\n\n  return (\n    <FormAccess\n      isHorizontal\n      fineGrainedAccess={access?.configure}\n      role=\"manage-clients\"\n    >\n      <FormGroup\n        label={t(\"frontchannelLogout\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(frontchannelLogoutTooltip)}\n            fieldLabelId=\"frontchannelLogout\"\n          />\n        }\n        fieldId=\"kc-frontchannelLogout\"\n        hasNoPaddingTop\n      >\n        <Controller\n          name=\"frontchannelLogout\"\n          defaultValue={true}\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"kc-frontchannelLogout-switch\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value}\n              onChange={field.onChange}\n              aria-label={t(\"frontchannelLogout\")}\n            />\n          )}\n        />\n      </FormGroup>\n      {protocol === \"openid-connect\" && frontchannelLogout && (\n        <TextControl\n          data-testid=\"frontchannelLogoutUrl\"\n          type=\"url\"\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.frontchannel.logout.url\",\n          )}\n          label={t(\"frontchannelLogoutUrl\")}\n          labelIcon={t(\"frontchannelLogoutUrlHelp\")}\n          rules={{\n            validate: (uri) =>\n              validateUrl(uri, t(\"frontchannelUrlInvalid\").toString()),\n          }}\n        />\n      )}\n      {protocol === \"openid-connect\" && frontchannelLogout && (\n        <DefaultSwitchControl\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.frontchannel.logout.session.required\",\n          )}\n          defaultValue=\"true\"\n          label={t(\"frontchannelLogoutSessionRequired\")}\n          labelIcon={t(\"frontchannelLogoutSessionRequiredHelp\")}\n          stringify\n        />\n      )}\n      {protocol === \"openid-connect\" && !frontchannelLogout && (\n        <>\n          <TextControl\n            data-testid=\"backchannelLogoutUrl\"\n            type=\"url\"\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.backchannel.logout.url\",\n            )}\n            label={t(\"backchannelLogoutUrl\")}\n            labelIcon={t(\"backchannelLogoutUrlHelp\")}\n            rules={{\n              validate: (uri) =>\n                validateUrl(uri, t(\"backchannelUrlInvalid\").toString()),\n            }}\n          />\n          <FormGroup\n            label={t(\"backchannelLogoutSessionRequired\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"backchannelLogoutSessionRequiredHelp\")}\n                fieldLabelId=\"backchannelLogoutSessionRequired\"\n              />\n            }\n            fieldId=\"backchannelLogoutSessionRequired\"\n            hasNoPaddingTop\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.backchannel.logout.session.required\",\n              )}\n              defaultValue=\"true\"\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"backchannelLogoutSessionRequired\"\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(_event, value) => field.onChange(value.toString())}\n                  aria-label={t(\"backchannelLogoutSessionRequired\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"backchannelLogoutRevokeOfflineSessions\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"backchannelLogoutRevokeOfflineSessionsHelp\")}\n                fieldLabelId=\"backchannelLogoutRevokeOfflineSessions\"\n              />\n            }\n            fieldId=\"backchannelLogoutRevokeOfflineSessions\"\n            hasNoPaddingTop\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.backchannel.logout.revoke.offline.tokens\",\n              )}\n              defaultValue=\"false\"\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"backchannelLogoutRevokeOfflineSessions\"\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(_event, value) => field.onChange(value.toString())}\n                  aria-label={t(\"backchannelLogoutRevokeOfflineSessions\")}\n                />\n              )}\n            />\n          </FormGroup>\n        </>\n      )}\n      <FixedButtonsGroup\n        name=\"settings\"\n        save={save}\n        reset={reset}\n        isDisabled={!isManager}\n      />\n    </FormAccess>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport { Form } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { ScrollForm } from \"@keycloak/keycloak-ui-shared\";\nimport { ClientDescription } from \"./ClientDescription\";\nimport { FormFields } from \"./ClientDetails\";\nimport { AccessSettings } from \"./add/AccessSettings\";\nimport { CapabilityConfig } from \"./add/CapabilityConfig\";\nimport { LoginSettingsPanel } from \"./add/LoginSettingsPanel\";\nimport { LogoutPanel } from \"./add/LogoutPanel\";\nimport { SamlConfig } from \"./add/SamlConfig\";\nimport { SamlSignature } from \"./add/SamlSignature\";\n\nexport type ClientSettingsProps = {\n  client: ClientRepresentation;\n  save: () => void;\n  reset: () => void;\n};\n\nexport const ClientSettings = (props: ClientSettingsProps) => {\n  const { t } = useTranslation();\n\n  const { watch } = useFormContext<FormFields>();\n  const protocol = watch(\"protocol\");\n\n  const { client } = props;\n\n  return (\n    <ScrollForm\n      label={t(\"jumpToSection\")}\n      className=\"pf-v5-u-px-lg pf-v5-u-pb-lg\"\n      sections={[\n        {\n          title: t(\"generalSettings\"),\n          panel: (\n            <Form isHorizontal>\n              <ClientDescription\n                protocol={client.protocol}\n                hasConfigureAccess={client.access?.configure}\n              />\n            </Form>\n          ),\n        },\n        {\n          title: t(\"accessSettings\"),\n          panel: <AccessSettings {...props} />,\n        },\n        {\n          title: t(\"samlCapabilityConfig\"),\n          isHidden: protocol !== \"saml\" || client.bearerOnly,\n          panel: <SamlConfig />,\n        },\n        {\n          title: t(\"signatureAndEncryption\"),\n          isHidden: protocol !== \"saml\" || client.bearerOnly,\n          panel: <SamlSignature />,\n        },\n        {\n          title: t(\"capabilityConfig\"),\n          isHidden: protocol !== \"openid-connect\" || client.bearerOnly,\n          panel: <CapabilityConfig />,\n        },\n        {\n          title: t(\"loginSettings\"),\n          isHidden: client.bearerOnly,\n          panel: <LoginSettingsPanel access={client.access?.configure} />,\n        },\n        {\n          title: t(\"logoutSettings\"),\n          isHidden: client.bearerOnly,\n          panel: <LogoutPanel {...props} />,\n        },\n      ]}\n    />\n  );\n};\n","import type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport { KeycloakSelect, SelectVariant } from \"@keycloak/keycloak-ui-shared\";\nimport { Button, SelectOption, TextInput } from \"@patternfly/react-core\";\nimport { MinusCircleIcon, PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { Table, Tbody, Td, Th, Thead, Tr } from \"@patternfly/react-table\";\nimport { camelCase } from \"lodash-es\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { Controller, useFieldArray, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { defaultContextAttributes } from \"../utils\";\n\nimport \"./key-based-attribute-input.css\";\n\nexport type AttributeType = {\n  key?: string;\n  name: string;\n  custom?: boolean;\n  values?: {\n    [key: string]: string;\n  }[];\n};\n\ntype AttributeInputProps = {\n  name: string;\n  selectableValues?: AttributeType[];\n  resources?: ResourceRepresentation[];\n};\n\ntype ValueInputProps = {\n  name: string;\n  rowIndex: number;\n  attribute: any;\n  selectableValues?: AttributeType[];\n  resources?: ResourceRepresentation[];\n};\n\nconst ValueInput = ({\n  name,\n  rowIndex,\n  attribute,\n  selectableValues,\n  resources,\n}: ValueInputProps) => {\n  const { t } = useTranslation();\n  const { control, register, getValues } = useFormContext();\n  const [isValueOpenArray, setIsValueOpenArray] = useState([false]);\n\n  const toggleValueSelect = (rowIndex: number, open: boolean) => {\n    const arr = [...isValueOpenArray];\n    arr[rowIndex] = open;\n    setIsValueOpenArray(arr);\n  };\n\n  const attributeValues = useMemo(() => {\n    let values: AttributeType[] | undefined = [];\n\n    if (selectableValues) {\n      values = defaultContextAttributes.find(\n        (attr) => attr.key === getValues().context?.[rowIndex]?.key,\n      )?.values;\n    }\n\n    return values;\n  }, [getValues]);\n\n  const renderSelectOptionType = () => {\n    const scopeValues = resources?.find(\n      (resource) => resource.name === getValues().resources?.[rowIndex]?.key,\n    )?.scopes;\n\n    if (attributeValues?.length && !resources) {\n      return attributeValues.map((attr) => (\n        <SelectOption key={attr.key} value={attr.key}>\n          {attr.name}\n        </SelectOption>\n      ));\n    } else if (scopeValues?.length) {\n      return scopeValues.map((scope) => (\n        <SelectOption key={scope.name} value={scope.name}>\n          {scope.name}\n        </SelectOption>\n      ));\n    }\n  };\n\n  const getMessageBundleKey = (attributeName: string) =>\n    camelCase(attributeName).replace(/\\W/g, \"\");\n\n  return (\n    <Td>\n      {resources || attributeValues?.length ? (\n        <Controller\n          name={`${name}.${rowIndex}.value`}\n          defaultValue={[]}\n          control={control}\n          render={({ field }) => (\n            <KeycloakSelect\n              toggleId={`${attribute.id}-value`}\n              className=\"kc-attribute-value-selectable\"\n              chipGroupProps={{\n                numChips: 1,\n                expandedText: t(\"hide\"),\n                collapsedText: t(\"showRemaining\"),\n              }}\n              onToggle={(open) => toggleValueSelect(rowIndex, open)}\n              isOpen={isValueOpenArray[rowIndex]}\n              variant={SelectVariant.typeahead}\n              typeAheadAriaLabel={t(\"selectOrTypeAKey\")}\n              placeholderText={t(\"selectOrTypeAKey\")}\n              selections={field.value}\n              onSelect={(v) => {\n                field.onChange(v);\n\n                toggleValueSelect(rowIndex, false);\n              }}\n            >\n              {renderSelectOptionType()}\n            </KeycloakSelect>\n          )}\n        />\n      ) : (\n        <TextInput\n          id={`${getMessageBundleKey(attribute.key)}-value`}\n          className=\"value-input\"\n          defaultValue={attribute.value}\n          data-testid=\"attribute-value-input\"\n          aria-label={t(\"value\")}\n          {...register(`${name}.${rowIndex}.value`)}\n        />\n      )}\n    </Td>\n  );\n};\n\nexport const KeyBasedAttributeInput = ({\n  name,\n  selectableValues,\n  resources,\n}: AttributeInputProps) => {\n  const { t } = useTranslation();\n  const { control, watch } = useFormContext();\n  const { fields, append, remove } = useFieldArray({\n    control: control,\n    name,\n  });\n\n  const [isKeyOpenArray, setIsKeyOpenArray] = useState([false]);\n  const toggleKeySelect = (rowIndex: number, open: boolean) => {\n    const arr = [...isKeyOpenArray];\n    arr[rowIndex] = open;\n    setIsKeyOpenArray(arr);\n  };\n\n  useEffect(() => {\n    if (!fields.length) {\n      append({ key: \"\", value: \"\" }, { shouldFocus: false });\n    }\n  }, [fields]);\n\n  const watchLastValue = watch(`${name}.${fields.length - 1}.value`, \"\");\n\n  return (\n    <Table\n      className=\"kc-attributes__table\"\n      aria-label=\"Role attribute keys and values\"\n      variant=\"compact\"\n    >\n      <Thead>\n        <Tr>\n          <Th width={40}>{t(\"key\")}</Th>\n          <Th width={40}>{t(\"value\")}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {fields.map((attribute, rowIndex) => (\n          <Tr key={attribute.id} data-testid=\"attribute-row\">\n            <Td>\n              <Controller\n                name={`${name}.${rowIndex}.key`}\n                defaultValue=\"\"\n                control={control}\n                render={({ field }) => (\n                  <KeycloakSelect\n                    toggleId={`${name}.${rowIndex}.key`}\n                    className=\"kc-attribute-key-selectable\"\n                    onToggle={(open) => toggleKeySelect(rowIndex, open)}\n                    isOpen={isKeyOpenArray[rowIndex]}\n                    variant={SelectVariant.typeahead}\n                    typeAheadAriaLabel={t(\"selectOrTypeAKey\")}\n                    placeholderText={t(\"selectOrTypeAKey\")}\n                    selections={field.value}\n                    onSelect={(v) => {\n                      field.onChange(v.toString());\n\n                      toggleKeySelect(rowIndex, false);\n                    }}\n                  >\n                    {selectableValues?.map((attribute) => (\n                      <SelectOption\n                        selected={attribute.name === field.value}\n                        key={attribute.key}\n                        value={resources ? attribute.name : attribute.key}\n                      >\n                        {attribute.name}\n                      </SelectOption>\n                    ))}\n                  </KeycloakSelect>\n                )}\n              />\n            </Td>\n            <ValueInput\n              name={name}\n              attribute={attribute}\n              rowIndex={rowIndex}\n              selectableValues={selectableValues}\n              resources={resources}\n            />\n            <Td>\n              <Button\n                id={`${name}-minus-button-${rowIndex}`}\n                variant=\"link\"\n                className=\"kc-attributes__minus-icon\"\n                onClick={() => remove(rowIndex)}\n                aria-label={t(\"remove\")}\n              >\n                <MinusCircleIcon />\n              </Button>\n            </Td>\n          </Tr>\n        ))}\n        <Tr>\n          <Td>\n            <Button\n              aria-label={t(\"addAttribute\", { label: t(\"attribute\") })}\n              id={`${name}-plus-icon`}\n              variant=\"link\"\n              className=\"kc-attributes__plus-icon\"\n              onClick={() => {\n                append({ key: \"\", value: \"\" });\n                setIsKeyOpenArray([...isKeyOpenArray, false]);\n              }}\n              icon={<PlusCircleIcon />}\n              isDisabled={!watchLastValue}\n              data-testid=\"attribute-add-row\"\n            >\n              {t(\"addAttribute\", { label: t(\"attribute\") })}\n            </Button>\n          </Td>\n        </Tr>\n      </Tbody>\n    </Table>\n  );\n};\n","import type AccessTokenRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/accessTokenRepresentation\";\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Text,\n  TextArea,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { prettyPrintJSON } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\n\ntype AuthorizationDataModalProps = {\n  data: AccessTokenRepresentation;\n};\n\nexport const AuthorizationDataModal = ({\n  data,\n}: AuthorizationDataModalProps) => {\n  const { t } = useTranslation();\n  const [show, toggle] = useToggle();\n\n  return (\n    <>\n      <Button\n        data-testid=\"authorization-revert\"\n        onClick={toggle}\n        variant=\"secondary\"\n      >\n        {t(\"showAuthData\")}\n      </Button>\n      <Modal\n        variant={ModalVariant.medium}\n        isOpen={show}\n        aria-label={t(\"authData\")}\n        header={\n          <TextContent>\n            <Text component={TextVariants.h1}>{t(\"authData\")}</Text>\n            <Text>{t(\"authDataDescription\")}</Text>\n          </TextContent>\n        }\n        onClose={toggle}\n        actions={[\n          <Button\n            data-testid=\"cancel\"\n            id=\"modal-cancel\"\n            key=\"cancel\"\n            onClick={toggle}\n          >\n            {t(\"cancel\")}\n          </Button>,\n        ]}\n      >\n        <TextArea readOnly rows={20} value={prettyPrintJSON(data)} />\n      </Modal>\n    </>\n  );\n};\n","import type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport { DecisionEffect } from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport type PolicyResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyResultRepresentation\";\nimport {\n  capitalize,\n  DescriptionList,\n  TextContent,\n  TextList,\n  TextListItem,\n} from \"@patternfly/react-core\";\nimport { ExpandableRowContent, Tbody, Td, Tr } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useParams } from \"../../utils/useParams\";\nimport type { ClientParams } from \"../routes/Client\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\n\ntype Props = {\n  idx: number;\n  rowIndex: number;\n  outerPolicy: PolicyResultRepresentation;\n  resource: EvaluationResultRepresentation;\n};\n\nexport const AuthorizationEvaluateResourcePolicies = ({\n  idx,\n  rowIndex,\n  outerPolicy,\n  resource,\n}: Props) => {\n  const [expanded, setExpanded] = useState<boolean>(false);\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const { clientId } = useParams<ClientParams>();\n\n  return (\n    <Tbody key={idx} isExpanded={expanded}>\n      <Tr>\n        <Td\n          expand={{\n            rowIndex,\n            isExpanded: expanded,\n            onToggle: () => setExpanded((prev) => !prev),\n          }}\n        />\n        <Td data-testid={`name-column-${resource.resource}`}>\n          <Link\n            to={toPermissionDetails({\n              realm,\n              id: clientId,\n              permissionType: outerPolicy.policy?.type!,\n              permissionId: outerPolicy.policy?.id!,\n            })}\n          >\n            {outerPolicy.policy?.name}\n          </Link>\n        </Td>\n        <Td id={outerPolicy.status?.toLowerCase()}>\n          {t(outerPolicy.status?.toLowerCase() as string)}\n        </Td>\n        <Td>{t(`${outerPolicy.policy?.decisionStrategy?.toLowerCase()}`)}</Td>\n        <Td>\n          {outerPolicy.status === DecisionEffect.Permit\n            ? resource.policies?.[rowIndex]?.scopes?.join(\", \")\n            : \"-\"}\n        </Td>\n        <Td>\n          {outerPolicy.status === DecisionEffect.Deny &&\n          resource.policies?.[rowIndex]?.scopes?.length\n            ? resource.policies[rowIndex].scopes?.join(\", \")\n            : \"-\"}\n        </Td>\n      </Tr>\n      <Tr key={`child-${resource.resource}`} isExpanded={expanded}>\n        <Td />\n        <Td colSpan={5}>\n          {expanded && (\n            <ExpandableRowContent>\n              <DescriptionList\n                isHorizontal\n                className=\"keycloak_resource_details\"\n              >\n                <TextContent>\n                  <TextList>\n                    {outerPolicy.associatedPolicies?.map((item) => (\n                      <TextListItem key=\"policyDetails\">\n                        <Link\n                          to={toPolicyDetails({\n                            realm,\n                            id: clientId,\n                            policyType: item.policy?.type!,\n                            policyId: item.policy?.id!,\n                          })}\n                        >\n                          {item.policy?.name}\n                        </Link>{\" \"}\n                        {t(\"votedToStatus\", {\n                          status: capitalize(item.status as string),\n                        })}\n                      </TextListItem>\n                    ))}\n                  </TextList>\n                </TextContent>\n              </DescriptionList>\n            </ExpandableRowContent>\n          )}\n        </Td>\n      </Tr>\n    </Tbody>\n  );\n};\n","import { useState } from \"react\";\nimport {\n  ExpandableRowContent,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { DescriptionList } from \"@patternfly/react-core/dist/esm/components\";\nimport { useTranslation } from \"react-i18next\";\nimport { AuthorizationEvaluateResourcePolicies } from \"./AuthorizationEvaluateResourcePolicies\";\nimport type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport type PolicyResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyResultRepresentation\";\n\ntype Props = {\n  rowIndex: number;\n  resource: EvaluationResultRepresentation;\n  evaluateResults: any;\n};\n\nexport const AuthorizationEvaluateResource = ({\n  rowIndex,\n  resource,\n  evaluateResults,\n}: Props) => {\n  const [expanded, setExpanded] = useState<boolean>(false);\n  const { t } = useTranslation();\n\n  return (\n    <Tbody isExpanded={expanded}>\n      <Tr>\n        <Td\n          expand={{\n            rowIndex,\n            isExpanded: expanded,\n            onToggle: () => setExpanded((prev) => !prev),\n          }}\n        />\n        <Td data-testid={`name-column-${resource.resource}`}>\n          {resource.resource?.name}\n        </Td>\n        <Td id={resource.status?.toLowerCase()}>\n          {t(`${resource.status?.toLowerCase()}`)}\n        </Td>\n        <Td>\n          {resource.allowedScopes?.length\n            ? resource.allowedScopes.map((item) => item.name)\n            : \"-\"}\n        </Td>\n      </Tr>\n      <Tr key={`child-${resource.resource}`} isExpanded={expanded}>\n        <Td />\n        <Td colSpan={5}>\n          <ExpandableRowContent>\n            {expanded && (\n              <DescriptionList\n                isHorizontal\n                className=\"keycloak_resource_details\"\n              >\n                <Table aria-label={t(\"evaluationResults\")}>\n                  <Thead>\n                    <Tr>\n                      <Th aria-hidden=\"true\" />\n                      <Th>{t(\"permission\")}</Th>\n                      <Th>{t(\"results\")}</Th>\n                      <Th>{t(\"decisionStrategy\")}</Th>\n                      <Th>{t(\"grantedScopes\")}</Th>\n                      <Th>{t(\"deniedScopes\")}</Th>\n                      <Th aria-hidden=\"true\" />\n                    </Tr>\n                  </Thead>\n                  {Object.values(evaluateResults[rowIndex].policies).map(\n                    (outerPolicy, idx) => (\n                      <AuthorizationEvaluateResourcePolicies\n                        key={idx}\n                        idx={idx}\n                        rowIndex={rowIndex}\n                        outerPolicy={outerPolicy as PolicyResultRepresentation}\n                        resource={resource}\n                      />\n                    ),\n                  )}\n                </Table>\n              </DescriptionList>\n            )}\n          </ExpandableRowContent>\n        </Td>\n      </Tr>\n    </Tbody>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  Divider,\n  Form,\n  InputGroup,\n  PageSection,\n  TextInput,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  InputGroupItem,\n  Select,\n  MenuToggle,\n  SelectList,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport { Table, Th, Thead, Tr } from \"@patternfly/react-table\";\nimport { KeyboardEvent, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport type PolicyEvaluationResponse from \"@keycloak/keycloak-admin-client/lib/defs/policyEvaluationResponse\";\nimport { FixedButtonsGroup } from \"../../../components/form/FixedButtonGroup\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport useToggle from \"../../../utils/useToggle\";\nimport { AuthorizationDataModal } from \"../AuthorizationDataModal\";\nimport { AuthorizationEvaluateResource } from \"../AuthorizationEvaluateResource\";\n\ntype ResultProps = {\n  evaluateResult: PolicyEvaluationResponse;\n  refresh: () => void;\n  back: () => void;\n};\n\nenum ResultsFilter {\n  All = \"ALL\",\n  StatusDenied = \"STATUS_DENIED\",\n  StatusPermitted = \"STATUS_PERMITTED\",\n}\n\nfunction filterResults(\n  results: EvaluationResultRepresentation[],\n  filter: ResultsFilter,\n) {\n  switch (filter) {\n    case ResultsFilter.StatusPermitted:\n      return results.filter(({ status }) => status === \"PERMIT\");\n    case ResultsFilter.StatusDenied:\n      return results.filter(({ status }) => status === \"DENY\");\n    default:\n      return results;\n  }\n}\n\nexport const Results = ({ evaluateResult, refresh, back }: ResultProps) => {\n  const { t } = useTranslation();\n\n  const [filterDropdownOpen, toggleFilterDropdown] = useToggle();\n\n  const [filter, setFilter] = useState(ResultsFilter.All);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  const confirmSearchQuery = () => {\n    setSearchQuery(searchInput);\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      confirmSearchQuery();\n    }\n  };\n\n  const filteredResources = useMemo(\n    () =>\n      filterResults(evaluateResult.results!, filter).filter(\n        ({ resource }) => resource?.name?.includes(searchQuery) ?? false,\n      ),\n    [evaluateResult.results, filter, searchQuery],\n  );\n\n  const noEvaluatedData = evaluateResult.results!.length === 0;\n  const noFilteredData = filteredResources.length === 0;\n\n  return (\n    <PageSection>\n      <Toolbar>\n        <ToolbarGroup className=\"providers-toolbar\">\n          <ToolbarItem>\n            <InputGroup>\n              <InputGroupItem isFill>\n                <TextInput\n                  name={\"inputGroupName\"}\n                  id={\"inputGroupName\"}\n                  type=\"search\"\n                  aria-label={t(\"search\")}\n                  placeholder={t(\"search\")}\n                  onChange={(_event, val) => setSearchInput(val)}\n                  onKeyDown={handleKeyDown}\n                />\n              </InputGroupItem>\n              <InputGroupItem>\n                <Button\n                  variant={ButtonVariant.control}\n                  aria-label={t(\"search\")}\n                  onClick={() => confirmSearchQuery()}\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroupItem>\n            </InputGroup>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Select\n              data-testid=\"filter-type-select\"\n              isOpen={filterDropdownOpen}\n              className=\"kc-filter-type-select\"\n              toggle={(ref) => (\n                <MenuToggle\n                  ref={ref}\n                  onClick={toggleFilterDropdown}\n                  isExpanded={filterDropdownOpen}\n                  style={{ width: \"300px\" }}\n                >\n                  {filter}\n                </MenuToggle>\n              )}\n              onSelect={(_, value) => {\n                setFilter(value as ResultsFilter);\n                toggleFilterDropdown();\n                refresh();\n              }}\n              selected={filter}\n            >\n              <SelectList>\n                <SelectOption\n                  data-testid=\"all-results-option\"\n                  value={ResultsFilter.All}\n                >\n                  {t(\"allResults\")}\n                </SelectOption>\n                <SelectOption\n                  data-testid=\"result-permit-option\"\n                  value={ResultsFilter.StatusPermitted}\n                >\n                  {t(\"resultPermit\")}\n                </SelectOption>\n                <SelectOption\n                  data-testid=\"result-deny-option\"\n                  value={ResultsFilter.StatusDenied}\n                >\n                  {t(\"resultDeny\")}\n                </SelectOption>\n              </SelectList>\n            </Select>\n          </ToolbarItem>\n        </ToolbarGroup>\n      </Toolbar>\n      {!noFilteredData && (\n        <Table aria-label={t(\"evaluationResults\")}>\n          <Thead>\n            <Tr>\n              <Th aria-hidden=\"true\" />\n              <Th>{t(\"resource\")}</Th>\n              <Th>{t(\"overallResults\")}</Th>\n              <Th>{t(\"scopes\")}</Th>\n              <Th aria-hidden=\"true\" />\n            </Tr>\n          </Thead>\n          {filteredResources.map((resource, rowIndex) => (\n            <AuthorizationEvaluateResource\n              key={rowIndex}\n              rowIndex={rowIndex}\n              resource={resource}\n              evaluateResults={evaluateResult.results}\n            />\n          ))}\n        </Table>\n      )}\n      {(noFilteredData || noEvaluatedData) && (\n        <>\n          <Divider />\n          <ListEmptyState\n            isSearchVariant\n            message={t(\"noSearchResults\")}\n            instructions={t(\"noSearchResultsInstructions\")}\n          />\n        </>\n      )}\n      <Form>\n        <FixedButtonsGroup name=\"authorization\">\n          <Button data-testid=\"authorization-eval\" id=\"back-btn\" onClick={back}>\n            {t(\"back\")}\n          </Button>{\" \"}\n          <Button\n            data-testid=\"authorization-reevaluate\"\n            id=\"reevaluate-btn\"\n            variant=\"secondary\"\n            onClick={refresh}\n          >\n            {t(\"reevaluate\")}\n          </Button>{\" \"}\n          <AuthorizationDataModal data={evaluateResult.rpt!} />\n        </FixedButtonsGroup>\n      </Form>\n    </PageSection>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport type PolicyEvaluationResponse from \"@keycloak/keycloak-admin-client/lib/defs/policyEvaluationResponse\";\nimport type ResourceEvaluation from \"@keycloak/keycloak-admin-client/lib/defs/resourceEvaluation\";\nimport type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type ScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/scopeRepresentation\";\nimport {\n  HelpItem,\n  SelectControl,\n  TextControl,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Button,\n  ExpandableSection,\n  FormGroup,\n  PageSection,\n  Panel,\n  PanelHeader,\n  PanelMainBody,\n  Switch,\n  Title,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { ForbiddenSection } from \"../../ForbiddenSection\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { ClientSelect } from \"../../components/client/ClientSelect\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport {\n  KeyValueType,\n  keyValueToArray,\n} from \"../../components/key-value-form/key-value-convert\";\nimport { UserSelect } from \"../../components/users/UserSelect\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { FormFields } from \"../ClientDetails\";\nimport { defaultContextAttributes } from \"../utils\";\nimport { KeyBasedAttributeInput } from \"./KeyBasedAttributeInput\";\nimport { Results } from \"./evaluate/Results\";\n\ninterface EvaluateFormInputs\n  extends Omit<ResourceEvaluation, \"context\" | \"resources\"> {\n  alias: string;\n  authScopes: string[];\n  context: {\n    attributes: Record<string, string>[];\n  };\n  resources?: Record<string, string>[];\n  client: FormFields;\n  user: string[];\n}\n\nexport type AttributeType = {\n  key: string;\n  name: string;\n  custom?: boolean;\n  values?: {\n    [key: string]: string;\n  }[];\n};\n\ntype ClientSettingsProps = {\n  client: ClientRepresentation;\n  save: () => void;\n};\n\nexport type AttributeForm = Omit<\n  EvaluateFormInputs,\n  \"context\" | \"resources\"\n> & {\n  context: {\n    attributes?: KeyValueType[];\n  };\n  resources?: KeyValueType[];\n};\n\ntype Props = ClientSettingsProps & EvaluationResultRepresentation;\n\nexport const AuthorizationEvaluate = (props: Props) => {\n  const { hasAccess } = useAccess();\n\n  if (!hasAccess(\"view-users\")) {\n    return <ForbiddenSection permissionNeeded=\"view-users\" />;\n  }\n\n  return <AuthorizationEvaluateContent {...props} />;\n};\n\nconst AuthorizationEvaluateContent = ({ client }: Props) => {\n  const { adminClient } = useAdminClient();\n\n  const form = useForm<EvaluateFormInputs>({ mode: \"onChange\" });\n  const {\n    reset,\n    trigger,\n    formState: { isValid },\n  } = form;\n  const { t } = useTranslation();\n  const { addError } = useAlerts();\n  const realm = useRealm();\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [applyToResourceType, setApplyToResourceType] = useState(false);\n  const [resources, setResources] = useState<ResourceRepresentation[]>([]);\n  const [scopes, setScopes] = useState<ScopeRepresentation[]>([]);\n  const [evaluateResult, setEvaluateResult] =\n    useState<PolicyEvaluationResponse>();\n  const [clientRoles, setClientRoles] = useState<RoleRepresentation[]>([]);\n\n  useFetch(\n    () => adminClient.roles.find(),\n    (roles) => {\n      setClientRoles(roles);\n    },\n    [],\n  );\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.clients.listResources({\n          id: client.id!,\n        }),\n        adminClient.clients.listAllScopes({\n          id: client.id!,\n        }),\n      ]),\n    ([resources, scopes]) => {\n      setResources(resources);\n      setScopes(scopes);\n    },\n    [],\n  );\n\n  const evaluate = async () => {\n    if (!(await trigger())) {\n      return;\n    }\n    const formValues = form.getValues();\n    const keys = keyValueToArray(formValues.resources as KeyValueType[]);\n    const resEval: ResourceEvaluation = {\n      roleIds: formValues.roleIds ?? [],\n      clientId: formValues.client.id!,\n      userId: formValues.user![0],\n      resources: resources\n        .filter((resource) => Object.keys(keys).includes(resource.name!))\n        .map((r) => ({\n          ...r,\n          scopes: r.scopes?.filter((s) =>\n            Object.values(keys)\n              .flatMap((v) => v)\n              .includes(s.name!),\n          ),\n        })),\n      entitlements: false,\n      context: {\n        attributes: Object.fromEntries(\n          formValues.context.attributes\n            .filter((item) => item.key || item.value !== \"\")\n            .map(({ key, value }) => [key, value]),\n        ),\n      },\n    };\n\n    try {\n      const evaluation = await adminClient.clients.evaluateResource(\n        { id: client.id!, realm: realm.realm },\n        resEval,\n      );\n\n      setEvaluateResult(evaluation);\n    } catch (error) {\n      addError(\"evaluateError\", error);\n    }\n  };\n\n  if (evaluateResult) {\n    return (\n      <Results\n        evaluateResult={evaluateResult}\n        refresh={evaluate}\n        back={() => setEvaluateResult(undefined)}\n      />\n    );\n  }\n\n  return (\n    <PageSection>\n      <FormProvider {...form}>\n        <Panel>\n          <PanelHeader>\n            <Title headingLevel=\"h2\">{t(\"identityInformation\")}</Title>\n          </PanelHeader>\n          <PanelMainBody>\n            <FormAccess isHorizontal role=\"view-clients\">\n              <ClientSelect\n                name=\"client\"\n                label=\"client\"\n                helpText={\"clientHelp\"}\n                defaultValue={client.clientId}\n              />\n              <UserSelect\n                name=\"user\"\n                label=\"users\"\n                helpText={t(\"selectUser\")}\n                defaultValue={[]}\n                variant=\"typeahead\"\n                isRequired\n              />\n              <SelectControl\n                name=\"roleIds\"\n                label={t(\"roles\")}\n                labelIcon={t(\"rolesHelp\")}\n                variant=\"typeaheadMulti\"\n                placeholderText={t(\"selectARole\")}\n                controller={{\n                  defaultValue: [],\n                  rules: {\n                    required: true,\n                  },\n                }}\n                options={clientRoles.map((role) => role.name!)}\n              />\n            </FormAccess>\n          </PanelMainBody>\n        </Panel>\n        <Panel>\n          <PanelHeader>\n            <Title headingLevel=\"h2\">{t(\"permissions\")}</Title>\n          </PanelHeader>\n          <PanelMainBody>\n            <FormAccess isHorizontal role=\"view-clients\">\n              <FormGroup\n                label={t(\"applyToResourceType\")}\n                fieldId=\"applyToResourceType\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"applyToResourceTypeHelp\")}\n                    fieldLabelId=\"applyToResourceType\"\n                  />\n                }\n              >\n                <Switch\n                  id=\"applyToResource-switch\"\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={applyToResourceType}\n                  onChange={(_event, val) => setApplyToResourceType(val)}\n                  aria-label={t(\"applyToResourceType\")}\n                />\n              </FormGroup>\n              {!applyToResourceType ? (\n                <FormGroup\n                  label={t(\"resourcesAndScopes\")}\n                  id=\"resourcesAndScopes\"\n                  labelIcon={\n                    <HelpItem\n                      helpText={t(\"contextualAttributesHelp\")}\n                      fieldLabelId={`resourcesAndScopes`}\n                    />\n                  }\n                  fieldId=\"resourcesAndScopes\"\n                >\n                  <KeyBasedAttributeInput\n                    selectableValues={resources.map<AttributeType>((item) => ({\n                      name: item.name!,\n                      key: item._id!,\n                    }))}\n                    resources={resources}\n                    name=\"resources\"\n                  />\n                </FormGroup>\n              ) : (\n                <>\n                  <TextControl\n                    name=\"alias\"\n                    label={t(\"resourceType\")}\n                    labelIcon={t(\"resourceTypeHelp\")}\n                    rules={{ required: t(\"required\") }}\n                  />\n                  <SelectControl\n                    name=\"authScopes\"\n                    label={t(\"authScopes\")}\n                    labelIcon={t(\"scopesSelect\")}\n                    controller={{\n                      defaultValue: [],\n                    }}\n                    variant=\"typeaheadMulti\"\n                    options={scopes.map((s) => s.name!)}\n                  />\n                </>\n              )}\n              <ExpandableSection\n                toggleText={t(\"contextualInfo\")}\n                onToggle={() => setIsExpanded(!isExpanded)}\n                isExpanded={isExpanded}\n              >\n                <FormGroup\n                  label={t(\"contextualAttributes\")}\n                  id=\"contextualAttributes\"\n                  labelIcon={\n                    <HelpItem\n                      helpText={t(\"contextualAttributesHelp\")}\n                      fieldLabelId={`contextualAttributes`}\n                    />\n                  }\n                  fieldId=\"contextualAttributes\"\n                >\n                  <KeyBasedAttributeInput\n                    selectableValues={defaultContextAttributes}\n                    name=\"context.attributes\"\n                  />\n                </FormGroup>\n              </ExpandableSection>\n            </FormAccess>\n          </PanelMainBody>\n        </Panel>\n        <ActionGroup>\n          <Button\n            data-testid=\"authorization-eval\"\n            id=\"authorization-eval\"\n            className=\"pf-v5-u-mr-md\"\n            isDisabled={!isValid}\n            onClick={() => evaluate()}\n          >\n            {t(\"evaluate\")}\n          </Button>\n          <Button\n            data-testid=\"authorization-revert\"\n            id=\"authorization-revert\"\n            className=\"pf-v5-u-mr-md\"\n            variant=\"link\"\n            onClick={() => reset()}\n          >\n            {t(\"revert\")}\n          </Button>\n        </ActionGroup>\n      </FormProvider>\n    </PageSection>\n  );\n};\n","import type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport {\n  KeycloakSpinner,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport CodeEditor from \"@uiw/react-textarea-code-editor\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { prettyPrintJSON } from \"../../util\";\nimport { useParams } from \"../../utils/useParams\";\nimport type { ClientParams } from \"../routes/Client\";\n\nexport const AuthorizationExport = () => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { clientId } = useParams<ClientParams>();\n  const { addAlert, addError } = useAlerts();\n\n  const [code, setCode] = useState<string>();\n  const [authorizationDetails, setAuthorizationDetails] =\n    useState<ResourceServerRepresentation>();\n\n  useFetch(\n    () =>\n      adminClient.clients.exportResource({\n        id: clientId,\n      }),\n\n    (authDetails) => {\n      setCode(JSON.stringify(authDetails, null, 2));\n      setAuthorizationDetails(authDetails);\n    },\n    [],\n  );\n\n  const exportAuthDetails = () => {\n    try {\n      saveAs(\n        new Blob([prettyPrintJSON(authorizationDetails)], {\n          type: \"application/json\",\n        }),\n        \"test-authz-config.json\",\n      );\n      addAlert(t(\"exportAuthDetailsSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"exportAuthDetailsError\", error);\n    }\n  };\n\n  if (!code) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection>\n      <FormAccess\n        isHorizontal\n        role=\"manage-authorization\"\n        className=\"pf-v5-u-mt-lg\"\n      >\n        <CodeEditor\n          data-testid=\"authorization-export-code-editor\"\n          value={code!}\n          language=\"json\"\n          readOnly\n          rows={10}\n          style={{ height: \"30rem\", overflow: \"scroll\" }}\n        />\n        <ActionGroup>\n          <Button\n            data-testid=\"authorization-export-download\"\n            onClick={() => exportAuthDetails()}\n          >\n            {t(\"download\")}\n          </Button>\n          <Button\n            data-testid=\"authorization-export-copy\"\n            variant=\"secondary\"\n            onClick={async () => {\n              try {\n                await navigator.clipboard.writeText(code!);\n                addAlert(t(\"copied\"), AlertVariant.success);\n              } catch (error) {\n                addError(\"copyError\", error);\n              }\n            }}\n          >\n            {t(\"copy\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import { useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Button,\n  Tooltip,\n  EmptyStateHeader,\n  EmptyStateFooter,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\n\nimport { PermissionType, toNewPermission } from \"../routes/NewPermission\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toUpperCase } from \"../../util\";\n\ntype EmptyButtonProps = {\n  permissionType: PermissionType;\n  disabled?: boolean;\n  clientId: string;\n};\n\nconst EmptyButton = ({\n  permissionType,\n  disabled = false,\n  clientId,\n}: EmptyButtonProps) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n  return (\n    <Button\n      data-testid={`create-${permissionType}`}\n      className={\n        disabled ? \"keycloak__permissions__empty_state \" : \"\" + \"pf-v5-u-m-sm\"\n      }\n      variant=\"secondary\"\n      onClick={() =>\n        !disabled &&\n        navigate(toNewPermission({ realm, id: clientId, permissionType }))\n      }\n    >\n      {t(`create${toUpperCase(permissionType)}BasedPermission`)}\n    </Button>\n  );\n};\n\nconst TooltipEmptyButton = ({\n  permissionType,\n  disabled,\n  ...props\n}: EmptyButtonProps) => {\n  const { t } = useTranslation();\n  return disabled ? (\n    <Tooltip content={t(`no${toUpperCase(permissionType)}CreateHint`)}>\n      <EmptyButton\n        {...props}\n        disabled={disabled}\n        permissionType={permissionType}\n      />\n    </Tooltip>\n  ) : (\n    <EmptyButton\n      {...props}\n      disabled={disabled}\n      permissionType={permissionType}\n    />\n  );\n};\n\ntype EmptyPermissionsStateProps = {\n  clientId: string;\n  isResourceEnabled?: boolean;\n  isScopeEnabled?: boolean;\n};\n\nexport const EmptyPermissionsState = ({\n  clientId,\n  isResourceEnabled,\n  isScopeEnabled,\n}: EmptyPermissionsStateProps) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState data-testid=\"empty-state\" variant=\"lg\">\n      <EmptyStateHeader\n        titleText={<>{t(\"emptyPermissions\")}</>}\n        icon={<EmptyStateIcon icon={PlusCircleIcon} />}\n        headingLevel=\"h1\"\n      />\n      <EmptyStateBody>{t(\"emptyPermissionInstructions\")}</EmptyStateBody>\n      <EmptyStateFooter>\n        <TooltipEmptyButton\n          permissionType=\"resource\"\n          disabled={isResourceEnabled}\n          clientId={clientId}\n        />\n        <br />\n        <TooltipEmptyButton\n          permissionType=\"scope\"\n          disabled={isScopeEnabled}\n          clientId={clientId}\n        />\n      </EmptyStateFooter>\n    </EmptyState>\n  );\n};\n","import type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport {\n  ListEmptyState,\n  PaginatingTableToolbar,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Alert,\n  AlertVariant,\n  ButtonVariant,\n  DescriptionList,\n  Divider,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  MenuToggle,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toNewPermission } from \"../routes/NewPermission\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\nimport { DetailDescriptionLink } from \"./DetailDescription\";\nimport { EmptyPermissionsState } from \"./EmptyPermissionsState\";\nimport { MoreLabel } from \"./MoreLabel\";\nimport { SearchDropdown, SearchForm } from \"./SearchDropdown\";\n\nimport \"./permissions.css\";\n\ntype PermissionsProps = {\n  clientId: string;\n  isDisabled?: boolean;\n};\n\ntype ExpandablePolicyRepresentation = PolicyRepresentation & {\n  associatedPolicies?: PolicyRepresentation[];\n  isExpanded: boolean;\n};\n\nconst AssociatedPoliciesRenderer = ({\n  row,\n}: {\n  row: ExpandablePolicyRepresentation;\n}) => {\n  return (\n    <>\n      {row.associatedPolicies?.[0]?.name || \"—\"}{\" \"}\n      <MoreLabel array={row.associatedPolicies} />\n    </>\n  );\n};\n\nexport const AuthorizationPermissions = ({\n  clientId,\n  isDisabled = false,\n}: PermissionsProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [permissions, setPermissions] =\n    useState<ExpandablePolicyRepresentation[]>();\n  const [selectedPermission, setSelectedPermission] =\n    useState<PolicyRepresentation>();\n  const [policyProviders, setPolicyProviders] =\n    useState<PolicyProviderRepresentation[]>();\n  const [disabledCreate, setDisabledCreate] = useState<{\n    resources: boolean;\n    scopes: boolean;\n  }>();\n  const [createOpen, toggleCreate] = useToggle();\n  const [search, setSearch] = useState<SearchForm>({});\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n\n  useFetch(\n    async () => {\n      const permissions = await adminClient.clients.findPermissions({\n        first,\n        max: max + 1,\n        id: clientId,\n        ...search,\n      });\n\n      return await Promise.all(\n        permissions.map(async (permission) => {\n          const associatedPolicies =\n            await adminClient.clients.getAssociatedPolicies({\n              id: clientId,\n              permissionId: permission.id!,\n            });\n\n          return {\n            ...permission,\n            associatedPolicies,\n            isExpanded: false,\n          };\n        }),\n      );\n    },\n    setPermissions,\n    [key, search, first, max],\n  );\n\n  useFetch(\n    async () => {\n      const params = {\n        first: 0,\n        max: 1,\n      };\n      const [policies, resources, scopes] = await Promise.all([\n        adminClient.clients.listPolicyProviders({\n          id: clientId,\n        }),\n        adminClient.clients.listResources({ ...params, id: clientId }),\n        adminClient.clients.listAllScopes({ ...params, id: clientId }),\n      ]);\n      return {\n        policies: policies.filter(\n          (p) => p.type === \"resource\" || p.type === \"scope\",\n        ),\n        resources: resources.length !== 1,\n        scopes: scopes.length !== 1,\n      };\n    },\n    ({ policies, resources, scopes }) => {\n      setPolicyProviders(policies);\n      setDisabledCreate({ resources, scopes });\n    },\n    [],\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deletePermission\",\n    messageKey: t(\"deletePermissionConfirm\", {\n      permission: selectedPermission?.name,\n    }),\n    continueButtonVariant: ButtonVariant.danger,\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delPermission({\n          id: clientId,\n          type: selectedPermission?.type!,\n          permissionId: selectedPermission?.id!,\n        });\n        addAlert(t(\"permissionDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"permissionDeletedError\", error);\n      }\n    },\n  });\n\n  if (!permissions) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = permissions.length === 0;\n  const searching = Object.keys(search).length !== 0;\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      <DeleteConfirm />\n      {(!noData || searching) && (\n        <PaginatingTableToolbar\n          count={permissions.length}\n          first={first}\n          max={max}\n          onNextClick={setFirst}\n          onPreviousClick={setFirst}\n          onPerPageSelect={(first, max) => {\n            setFirst(first);\n            setMax(max);\n          }}\n          toolbarItem={\n            <>\n              <ToolbarItem>\n                <SearchDropdown\n                  types={policyProviders}\n                  search={search}\n                  onSearch={setSearch}\n                  type=\"permission\"\n                />\n              </ToolbarItem>\n              <ToolbarItem>\n                <Dropdown\n                  onOpenChange={toggleCreate}\n                  toggle={(ref) => (\n                    <MenuToggle\n                      ref={ref}\n                      onClick={toggleCreate}\n                      isDisabled={isDisabled}\n                      variant=\"primary\"\n                      data-testid=\"permissionCreateDropdown\"\n                    >\n                      {t(\"createPermission\")}\n                    </MenuToggle>\n                  )}\n                  isOpen={createOpen}\n                >\n                  <DropdownList>\n                    <DropdownItem\n                      data-testid=\"create-resource\"\n                      isDisabled={isDisabled || disabledCreate?.resources}\n                      component=\"button\"\n                      onClick={() =>\n                        navigate(\n                          toNewPermission({\n                            realm,\n                            id: clientId,\n                            permissionType: \"resource\",\n                          }),\n                        )\n                      }\n                    >\n                      {t(\"createResourceBasedPermission\")}\n                    </DropdownItem>\n                    <Divider />\n                    <DropdownItem\n                      data-testid=\"create-scope\"\n                      isDisabled={isDisabled || disabledCreate?.scopes}\n                      component=\"button\"\n                      onClick={() =>\n                        navigate(\n                          toNewPermission({\n                            realm,\n                            id: clientId,\n                            permissionType: \"scope\",\n                          }),\n                        )\n                      }\n                    >\n                      {t(\"createScopeBasedPermission\")}\n                      {disabledCreate?.scopes && (\n                        <Alert\n                          className=\"pf-v5-u-mt-sm\"\n                          variant=\"warning\"\n                          isInline\n                          isPlain\n                          title={t(\"noScopeCreateHint\")}\n                        />\n                      )}\n                    </DropdownItem>\n                  </DropdownList>\n                </Dropdown>\n              </ToolbarItem>\n            </>\n          }\n        >\n          {!noData && (\n            <Table aria-label={t(\"resources\")} variant=\"compact\">\n              <Thead>\n                <Tr>\n                  <Th aria-hidden=\"true\" />\n                  <Th>{t(\"name\")}</Th>\n                  <Th>{t(\"type\")}</Th>\n                  <Th>{t(\"associatedPolicy\")}</Th>\n                  <Th>{t(\"description\")}</Th>\n                  <Th aria-hidden=\"true\" />\n                </Tr>\n              </Thead>\n              {permissions.map((permission, rowIndex) => (\n                <Tbody key={permission.id} isExpanded={permission.isExpanded}>\n                  <Tr>\n                    <Td\n                      expand={{\n                        rowIndex,\n                        isExpanded: permission.isExpanded,\n                        onToggle: (_, rowIndex) => {\n                          const rows = permissions.map((p, index) =>\n                            index === rowIndex\n                              ? { ...p, isExpanded: !p.isExpanded }\n                              : p,\n                          );\n                          setPermissions(rows);\n                        },\n                      }}\n                    />\n                    <Td data-testid={`name-column-${permission.name}`}>\n                      <Link\n                        to={toPermissionDetails({\n                          realm,\n                          id: clientId,\n                          permissionType: permission.type!,\n                          permissionId: permission.id!,\n                        })}\n                      >\n                        {permission.name}\n                      </Link>\n                    </Td>\n                    <Td>\n                      {\n                        policyProviders?.find((p) => p.type === permission.type)\n                          ?.name\n                      }\n                    </Td>\n                    <Td>\n                      <AssociatedPoliciesRenderer row={permission} />\n                    </Td>\n                    <Td>{permission.description || \"—\"}</Td>\n                    <Td\n                      actions={{\n                        items: [\n                          {\n                            title: t(\"delete\"),\n                            onClick: async () => {\n                              setSelectedPermission(permission);\n                              toggleDeleteDialog();\n                            },\n                          },\n                        ],\n                      }}\n                    ></Td>\n                  </Tr>\n                  <Tr\n                    key={`child-${permission.id}`}\n                    isExpanded={permission.isExpanded}\n                  >\n                    <Td />\n                    <Td colSpan={5}>\n                      <ExpandableRowContent>\n                        {permission.isExpanded && (\n                          <DescriptionList\n                            isHorizontal\n                            className=\"keycloak_resource_details\"\n                          >\n                            <DetailDescriptionLink\n                              name=\"associatedPolicy\"\n                              array={permission.associatedPolicies}\n                              convert={(p) => p.name!}\n                              link={(p) =>\n                                toPolicyDetails({\n                                  id: clientId,\n                                  realm,\n                                  policyId: p.id!,\n                                  policyType: p.type!,\n                                })\n                              }\n                            />\n                          </DescriptionList>\n                        )}\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ))}\n            </Table>\n          )}\n        </PaginatingTableToolbar>\n      )}\n      {noData && !searching && (\n        <EmptyPermissionsState\n          clientId={clientId}\n          isResourceEnabled={!isDisabled && disabledCreate?.resources}\n          isScopeEnabled={!isDisabled && disabledCreate?.scopes}\n        />\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          message={t(\"noSearchResults\")}\n          instructions={t(\"noSearchResultsInstructions\")}\n        />\n      )}\n    </PageSection>\n  );\n};\n","import type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport { useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport { DescriptionList } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toScopeDetails } from \"../routes/Scope\";\nimport { DetailDescription, DetailDescriptionLink } from \"./DetailDescription\";\n\nimport \"./detail-cell.css\";\n\ntype Scope = { id: string; name: string }[];\n\ntype DetailCellProps = {\n  id: string;\n  clientId: string;\n  uris?: string[];\n};\n\nexport const DetailCell = ({ id, clientId, uris }: DetailCellProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { realm } = useRealm();\n  const [scope, setScope] = useState<Scope>();\n  const [permissions, setPermissions] =\n    useState<ResourceServerRepresentation[]>();\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.clients.listScopesByResource({\n          id: clientId,\n          resourceName: id,\n        }),\n        adminClient.clients.listPermissionsByResource({\n          id: clientId,\n          resourceId: id,\n        }),\n      ]),\n    ([scopes, permissions]) => {\n      setScope(scopes);\n      setPermissions(permissions);\n    },\n    [],\n  );\n\n  if (!permissions || !scope) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <DescriptionList isHorizontal className=\"keycloak_resource_details\">\n      <DetailDescription name=\"uris\" array={uris} />\n      <DetailDescriptionLink\n        name=\"scopes\"\n        array={scope}\n        convert={(s) => s.name}\n        link={(scope) =>\n          toScopeDetails({ id: clientId, realm, scopeId: scope.id! })\n        }\n      />\n      <DetailDescriptionLink\n        name=\"associatedPermissions\"\n        array={permissions}\n        convert={(p) => p.name!}\n        link={(permission) =>\n          toPermissionDetails({\n            id: clientId,\n            realm,\n            permissionId: permission.id!,\n            permissionType: \"resource\",\n          })\n        }\n      />\n    </DescriptionList>\n  );\n};\n","import type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport {\n  ListEmptyState,\n  PaginatingTableToolbar,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  Table,\n  TableText,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toNewPermission } from \"../routes/NewPermission\";\nimport { toCreateResource } from \"../routes/NewResource\";\nimport { toResourceDetails } from \"../routes/Resource\";\nimport { DetailCell } from \"./DetailCell\";\nimport { MoreLabel } from \"./MoreLabel\";\nimport { SearchDropdown, SearchForm } from \"./SearchDropdown\";\n\ntype ResourcesProps = {\n  clientId: string;\n  isDisabled?: boolean;\n};\n\ntype ExpandableResourceRepresentation = ResourceRepresentation & {\n  isExpanded: boolean;\n};\n\nconst UriRenderer = ({ row }: { row: ResourceRepresentation }) => (\n  <TableText wrapModifier=\"truncate\">\n    {row.uris?.[0]} <MoreLabel array={row.uris} />\n  </TableText>\n);\n\nexport const AuthorizationResources = ({\n  clientId,\n  isDisabled = false,\n}: ResourcesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [resources, setResources] =\n    useState<ExpandableResourceRepresentation[]>();\n  const [selectedResource, setSelectedResource] =\n    useState<ResourceRepresentation>();\n  const [permissions, setPermission] =\n    useState<ResourceServerRepresentation[]>();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [search, setSearch] = useState<SearchForm>({});\n\n  useFetch(\n    () => {\n      const params = {\n        first,\n        max: max + 1,\n        deep: false,\n        ...search,\n      };\n      return adminClient.clients.listResources({\n        ...params,\n        id: clientId,\n      });\n    },\n    (resources) =>\n      setResources(\n        resources.map((resource) => ({ ...resource, isExpanded: false })),\n      ),\n    [key, search, first, max],\n  );\n\n  const fetchPermissions = async (id: string) => {\n    return adminClient.clients.listPermissionsByResource({\n      id: clientId,\n      resourceId: id,\n    });\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteResource\",\n    children: (\n      <>\n        {t(\"deleteResourceConfirm\")}\n        {permissions?.length && (\n          <Alert\n            variant=\"warning\"\n            isInline\n            isPlain\n            title={t(\"deleteResourceWarning\")}\n            className=\"pf-v5-u-pt-lg\"\n          >\n            <p className=\"pf-v5-u-pt-xs\">\n              {permissions.map((permission) => (\n                <strong key={permission.id} className=\"pf-v5-u-pr-md\">\n                  {permission.name}\n                </strong>\n              ))}\n            </p>\n          </Alert>\n        )}\n      </>\n    ),\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delResource({\n          id: clientId,\n          resourceId: selectedResource?._id!,\n        });\n        addAlert(t(\"resourceDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"resourceDeletedError\", error);\n      }\n    },\n  });\n\n  if (!resources) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = resources.length === 0;\n  const searching = Object.keys(search).length !== 0;\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      <DeleteConfirm />\n      {(!noData || searching) && (\n        <PaginatingTableToolbar\n          count={resources.length}\n          first={first}\n          max={max}\n          onNextClick={setFirst}\n          onPreviousClick={setFirst}\n          onPerPageSelect={(first, max) => {\n            setFirst(first);\n            setMax(max);\n          }}\n          toolbarItem={\n            <>\n              <ToolbarItem>\n                <SearchDropdown\n                  search={search}\n                  onSearch={setSearch}\n                  type=\"resource\"\n                />\n              </ToolbarItem>\n\n              <ToolbarItem>\n                <Button\n                  data-testid=\"createResource\"\n                  isDisabled={isDisabled}\n                  component={(props) => (\n                    <Link\n                      {...props}\n                      to={toCreateResource({ realm, id: clientId })}\n                    />\n                  )}\n                >\n                  {t(\"createResource\")}\n                </Button>\n              </ToolbarItem>\n            </>\n          }\n        >\n          {!noData && (\n            <Table aria-label={t(\"resources\")} variant=\"compact\">\n              <Thead>\n                <Tr>\n                  <Th aria-hidden=\"true\" />\n                  <Th>{t(\"name\")}</Th>\n                  <Th>{t(\"displayName\")}</Th>\n                  <Th>{t(\"type\")}</Th>\n                  <Th>{t(\"owner\")}</Th>\n                  <Th>{t(\"uris\")}</Th>\n                  {!isDisabled && (\n                    <>\n                      <Th aria-hidden=\"true\" />\n                      <Th aria-hidden=\"true\" />\n                    </>\n                  )}\n                </Tr>\n              </Thead>\n              {resources.map((resource, rowIndex) => (\n                <Tbody key={resource._id} isExpanded={resource.isExpanded}>\n                  <Tr>\n                    <Td\n                      expand={{\n                        rowIndex,\n                        isExpanded: resource.isExpanded,\n                        onToggle: (_, rowIndex) => {\n                          const rows = resources.map((resource, index) =>\n                            index === rowIndex\n                              ? {\n                                  ...resource,\n                                  isExpanded: !resource.isExpanded,\n                                }\n                              : resource,\n                          );\n                          setResources(rows);\n                        },\n                      }}\n                    />\n                    <Td data-testid={`name-column-${resource.name}`}>\n                      <TableText wrapModifier=\"truncate\">\n                        <Link\n                          to={toResourceDetails({\n                            realm,\n                            id: clientId,\n                            resourceId: resource._id!,\n                          })}\n                        >\n                          {resource.name}\n                        </Link>\n                      </TableText>\n                    </Td>\n                    <Td>\n                      <TableText wrapModifier=\"truncate\">\n                        {resource.displayName}\n                      </TableText>\n                    </Td>\n                    <Td>\n                      <TableText wrapModifier=\"truncate\">\n                        {resource.type}\n                      </TableText>\n                    </Td>\n                    <Td>\n                      <TableText wrapModifier=\"truncate\">\n                        {resource.owner?.name}\n                      </TableText>\n                    </Td>\n                    <Td>\n                      <UriRenderer row={resource} />\n                    </Td>\n                    {!isDisabled && (\n                      <>\n                        <Td width={10}>\n                          <Button\n                            variant=\"link\"\n                            component={(props) => (\n                              <Link\n                                {...props}\n                                to={toNewPermission({\n                                  realm,\n                                  id: clientId,\n                                  permissionType: \"resource\",\n                                  selectedId: resource._id,\n                                })}\n                              />\n                            )}\n                          >\n                            {t(\"createPermission\")}\n                          </Button>\n                        </Td>\n                        <Td\n                          actions={{\n                            items: [\n                              {\n                                title: t(\"delete\"),\n                                onClick: async () => {\n                                  setSelectedResource(resource);\n                                  setPermission(\n                                    await fetchPermissions(resource._id!),\n                                  );\n                                  toggleDeleteDialog();\n                                },\n                              },\n                            ],\n                          }}\n                        />\n                      </>\n                    )}\n                  </Tr>\n                  <Tr\n                    key={`child-${resource._id}`}\n                    isExpanded={resource.isExpanded}\n                  >\n                    <Td />\n                    <Td colSpan={4}>\n                      <ExpandableRowContent>\n                        {resource.isExpanded && (\n                          <DetailCell\n                            clientId={clientId}\n                            id={resource._id!}\n                            uris={resource.uris}\n                          />\n                        )}\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ))}\n            </Table>\n          )}\n        </PaginatingTableToolbar>\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          message={t(\"noSearchResults\")}\n          instructions={t(\"noSearchResultsInstructions\")}\n        />\n      )}\n      {noData && !searching && (\n        <ListEmptyState\n          message={t(\"emptyResources\")}\n          instructions={t(\"emptyResourcesInstructions\")}\n          isDisabled={isDisabled}\n          primaryActionText={t(\"createResource\")}\n          onPrimaryAction={() =>\n            navigate(toCreateResource({ realm, id: clientId }))\n          }\n        />\n      )}\n    </PageSection>\n  );\n};\n","import type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport type ScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/scopeRepresentation\";\nimport {\n  ListEmptyState,\n  PaginatingTableToolbar,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  DescriptionList,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toNewPermission } from \"../routes/NewPermission\";\nimport { toNewScope } from \"../routes/NewScope\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toResourceDetails } from \"../routes/Resource\";\nimport { toScopeDetails } from \"../routes/Scope\";\nimport { DeleteScopeDialog } from \"./DeleteScopeDialog\";\nimport { DetailDescriptionLink } from \"./DetailDescription\";\n\ntype ScopesProps = {\n  clientId: string;\n  isDisabled?: boolean;\n};\n\nexport type PermissionScopeRepresentation = ScopeRepresentation & {\n  permissions?: PolicyRepresentation[];\n  isLoaded: boolean;\n};\n\ntype ExpandableRow = {\n  id: string;\n  isExpanded: boolean;\n};\n\nexport const AuthorizationScopes = ({\n  clientId,\n  isDisabled = false,\n}: ScopesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n\n  const [deleteDialog, toggleDeleteDialog] = useToggle();\n  const [scopes, setScopes] = useState<PermissionScopeRepresentation[]>();\n  const [selectedScope, setSelectedScope] =\n    useState<PermissionScopeRepresentation>();\n  const [collapsed, setCollapsed] = useState<ExpandableRow[]>([]);\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  useFetch(\n    () => {\n      const params = {\n        first,\n        max: max + 1,\n        deep: false,\n        name: search,\n      };\n      return adminClient.clients.listAllScopes({\n        ...params,\n        id: clientId,\n      });\n    },\n    (scopes) => {\n      setScopes(scopes.map((s) => ({ ...s, isLoaded: false })));\n      setCollapsed(scopes.map((s) => ({ id: s.id!, isExpanded: false })));\n    },\n    [key, search, first, max],\n  );\n\n  const getScope = (id: string) => scopes?.find((scope) => scope.id === id)!;\n  const isExpanded = (id: string | undefined) =>\n    collapsed.find((c) => c.id === id)?.isExpanded || false;\n\n  useFetch(\n    () => {\n      const newlyOpened = collapsed\n        .filter((row) => row.isExpanded)\n        .map(({ id }) => getScope(id))\n        .filter((s) => !s.isLoaded);\n\n      return Promise.all(\n        newlyOpened.map(async (scope) => {\n          const [resources, permissions] = await Promise.all([\n            adminClient.clients.listAllResourcesByScope({\n              id: clientId,\n              scopeId: scope.id!,\n            }),\n            adminClient.clients.listAllPermissionsByScope({\n              id: clientId,\n              scopeId: scope.id!,\n            }),\n          ]);\n\n          return {\n            ...scope,\n            resources,\n            permissions,\n            isLoaded: true,\n          };\n        }),\n      );\n    },\n    (resourcesScopes) => {\n      let result = [...(scopes || [])];\n      resourcesScopes.forEach((resourceScope) => {\n        const index = scopes?.findIndex(\n          (scope) => resourceScope.id === scope.id,\n        )!;\n        result = [\n          ...result.slice(0, index),\n          resourceScope,\n          ...result.slice(index + 1),\n        ];\n      });\n\n      setScopes(result);\n    },\n    [collapsed],\n  );\n\n  if (!scopes) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = scopes.length === 0;\n  const searching = search !== \"\";\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      <DeleteScopeDialog\n        clientId={clientId}\n        open={deleteDialog}\n        toggleDialog={toggleDeleteDialog}\n        selectedScope={selectedScope}\n        refresh={refresh}\n      />\n      {(!noData || searching) && (\n        <PaginatingTableToolbar\n          count={scopes.length}\n          first={first}\n          max={max}\n          onNextClick={setFirst}\n          onPreviousClick={setFirst}\n          onPerPageSelect={(first, max) => {\n            setFirst(first);\n            setMax(max);\n          }}\n          inputGroupName=\"search\"\n          inputGroupPlaceholder={t(\"searchByName\")}\n          inputGroupOnEnter={setSearch}\n          toolbarItem={\n            <ToolbarItem>\n              <Button\n                data-testid=\"createAuthorizationScope\"\n                component={(props) => (\n                  <Link {...props} to={toNewScope({ realm, id: clientId })} />\n                )}\n              >\n                {t(\"createAuthorizationScope\")}\n              </Button>\n            </ToolbarItem>\n          }\n        >\n          {!noData && (\n            <Table aria-label={t(\"scopes\")} variant=\"compact\">\n              <Thead>\n                <Tr>\n                  <Th aria-hidden=\"true\" />\n                  <Th>{t(\"name\")}</Th>\n                  <Th>{t(\"displayName\")}</Th>\n                  <Th aria-hidden=\"true\" />\n                  <Th aria-hidden=\"true\" />\n                </Tr>\n              </Thead>\n              {scopes.map((scope, rowIndex) => (\n                <Tbody key={scope.id} isExpanded={isExpanded(scope.id)}>\n                  <Tr>\n                    <Td\n                      expand={{\n                        rowIndex,\n                        isExpanded: isExpanded(scope.id),\n                        onToggle: (_event, index, isExpanded) => {\n                          setCollapsed([\n                            ...collapsed.slice(0, index),\n                            { id: scope.id!, isExpanded },\n                            ...collapsed.slice(index + 1),\n                          ]);\n                        },\n                      }}\n                    />\n                    <Td data-testid={`name-column-${scope.name}`}>\n                      <Link\n                        to={toScopeDetails({\n                          realm,\n                          id: clientId,\n                          scopeId: scope.id!,\n                        })}\n                      >\n                        {scope.name}\n                      </Link>\n                    </Td>\n                    <Td>{scope.displayName}</Td>\n                    <Td width={10}>\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link\n                            {...props}\n                            to={toNewPermission({\n                              realm,\n                              id: clientId,\n                              permissionType: \"scope\",\n                              selectedId: scope.id,\n                            })}\n                          />\n                        )}\n                      >\n                        {t(\"createPermission\")}\n                      </Button>\n                    </Td>\n                    <Td\n                      isActionCell\n                      actions={{\n                        items: [\n                          {\n                            title: t(\"delete\"),\n                            onClick: () => {\n                              setSelectedScope(scope);\n                              toggleDeleteDialog();\n                            },\n                          },\n                        ],\n                      }}\n                    />\n                  </Tr>\n                  <Tr\n                    key={`child-${scope.id}`}\n                    isExpanded={isExpanded(scope.id)}\n                  >\n                    <Td />\n                    <Td colSpan={4}>\n                      <ExpandableRowContent>\n                        {isExpanded(scope.id) && scope.isLoaded ? (\n                          <DescriptionList\n                            isHorizontal\n                            className=\"keycloak_resource_details\"\n                          >\n                            <DetailDescriptionLink\n                              name=\"resources\"\n                              array={scope.resources}\n                              convert={(r) => r.name!}\n                              link={(r) =>\n                                toResourceDetails({\n                                  id: clientId,\n                                  realm,\n                                  resourceId: r._id!,\n                                })\n                              }\n                            />\n                            <DetailDescriptionLink\n                              name=\"associatedPermissions\"\n                              array={scope.permissions}\n                              convert={(p) => p.name!}\n                              link={(p) =>\n                                toPermissionDetails({\n                                  id: clientId,\n                                  realm,\n                                  permissionId: p.id!,\n                                  permissionType: p.type!,\n                                })\n                              }\n                            />\n                          </DescriptionList>\n                        ) : (\n                          <KeycloakSpinner />\n                        )}\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ))}\n            </Table>\n          )}\n        </PaginatingTableToolbar>\n      )}\n      {noData && !searching && (\n        <ListEmptyState\n          message={t(\"emptyAuthorizationScopes\")}\n          instructions={t(\"emptyAuthorizationInstructions\")}\n          isDisabled={isDisabled}\n          onPrimaryAction={() => navigate(toNewScope({ id: clientId, realm }))}\n          primaryActionText={t(\"createAuthorizationScope\")}\n        />\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          isDisabled={isDisabled}\n          message={t(\"noSearchResults\")}\n          instructions={t(\"noSearchResultsInstructions\")}\n        />\n      )}\n    </PageSection>\n  );\n};\n","import { Fragment, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Alert,\n  Button,\n  ButtonVariant,\n  Divider,\n  Form,\n  FormGroup,\n  Modal,\n  Radio,\n  Switch,\n} from \"@patternfly/react-core\";\n\nimport type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport { JsonFileUpload } from \"../../components/json-file-upload/JsonFileUpload\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\n\ntype ImportDialogProps = {\n  onConfirm: (value: ResourceServerRepresentation) => void;\n  closeDialog: () => void;\n};\n\nexport const ImportDialog = ({ onConfirm, closeDialog }: ImportDialogProps) => {\n  const { t } = useTranslation();\n  const [imported, setImported] = useState<ResourceServerRepresentation>({});\n  return (\n    <Modal\n      title={t(\"import\")}\n      isOpen\n      variant=\"small\"\n      onClose={closeDialog}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          key=\"confirm\"\n          onClick={() => {\n            onConfirm(imported);\n            closeDialog();\n          }}\n          data-testid=\"confirm\"\n        >\n          {t(\"confirm\")}\n        </Button>,\n        <Button\n          data-testid=\"cancel\"\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            closeDialog();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form>\n        <JsonFileUpload id=\"import-resource\" onChange={setImported} />\n      </Form>\n      {Object.keys(imported).length !== 0 && (\n        <>\n          <Divider />\n          <p className=\"pf-v5-u-my-lg\">{t(\"importResources\")}</p>\n          <Form isHorizontal>\n            <FormGroup\n              label={t(\"policyEnforcementMode\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"policyEnforcementModeHelp\")}\n                  fieldLabelId=\"policyEnforcementMode\"\n                />\n              }\n              fieldId=\"policyEnforcementMode\"\n              hasNoPaddingTop\n            >\n              <Radio\n                id=\"policyEnforcementMode\"\n                name=\"policyEnforcementMode\"\n                label={t(\n                  `policyEnforcementModes.${imported.policyEnforcementMode}`,\n                )}\n                isChecked\n                isDisabled\n                className=\"pf-v5-u-mb-md\"\n              />\n            </FormGroup>\n            <FormGroup\n              label={t(\"decisionStrategy\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"decisionStrategyHelp\")}\n                  fieldLabelId=\"decisionStrategy\"\n                />\n              }\n              fieldId=\"decisionStrategy\"\n              hasNoPaddingTop\n            >\n              <Radio\n                id=\"decisionStrategy\"\n                name=\"decisionStrategy\"\n                isChecked\n                isDisabled\n                label={t(`decisionStrategies.${imported.decisionStrategy}`)}\n                className=\"pf-v5-u-mb-md\"\n              />\n            </FormGroup>\n            <FormGroup\n              hasNoPaddingTop\n              label={t(\"allowRemoteResourceManagement\")}\n              fieldId=\"allowRemoteResourceManagement\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"allowRemoteResourceManagement\")}\n                  fieldLabelId=\"allowRemoteResourceManagement\"\n                />\n              }\n            >\n              <Switch\n                id=\"allowRemoteResourceManagement\"\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                isChecked={imported.allowRemoteResourceManagement}\n                isDisabled\n                aria-label={t(\"allowRemoteResourceManagement\")}\n              />\n            </FormGroup>\n          </Form>\n          <div className=\"pf-v5-u-mt-md\">\n            {Object.entries(imported)\n              .filter(([, value]) => Array.isArray(value))\n              .map(([key, value]) => (\n                <Fragment key={key}>\n                  <Divider />\n                  <p className=\"pf-v5-u-my-sm\">\n                    <strong>\n                      {value.length} {t(key)}\n                    </strong>\n                  </p>\n                </Fragment>\n              ))}\n          </div>\n          <Divider />\n          <Alert\n            variant=\"warning\"\n            className=\"pf-v5-u-mt-lg\"\n            isInline\n            title={t(\"importWarning\")}\n          />\n        </>\n      )}\n    </Modal>\n  );\n};\n","import type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport { HelpItem, useAlerts, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  Button,\n  Divider,\n  FormGroup,\n  PageSection,\n  Radio,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { FixedButtonsGroup } from \"../../components/form/FixedButtonGroup\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { useAccess } from \"../../context/access/Access\";\nimport useToggle from \"../../utils/useToggle\";\nimport { DecisionStrategySelect } from \"./DecisionStrategySelect\";\nimport { ImportDialog } from \"./ImportDialog\";\n\nconst POLICY_ENFORCEMENT_MODES = [\n  \"ENFORCING\",\n  \"PERMISSIVE\",\n  \"DISABLED\",\n] as const;\n\nexport type FormFields = Omit<\n  ResourceServerRepresentation,\n  \"scopes\" | \"resources\"\n>;\n\nexport const AuthorizationSettings = ({ clientId }: { clientId: string }) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const [resource, setResource] = useState<ResourceServerRepresentation>();\n  const [importDialog, toggleImportDialog] = useToggle();\n\n  const form = useForm<FormFields>({});\n  const { control, reset, handleSubmit } = form;\n\n  const { addAlert, addError } = useAlerts();\n  const { hasAccess } = useAccess();\n\n  const isDisabled = !hasAccess(\"manage-authorization\");\n\n  useFetch(\n    () => adminClient.clients.getResourceServer({ id: clientId }),\n    (resource) => {\n      setResource(resource);\n      reset(resource);\n    },\n    [],\n  );\n\n  const importResource = async (value: ResourceServerRepresentation) => {\n    try {\n      await adminClient.clients.importResource({ id: clientId }, value);\n      addAlert(t(\"importResourceSuccess\"), AlertVariant.success);\n      reset({ ...value });\n    } catch (error) {\n      addError(\"importResourceError\", error);\n    }\n  };\n\n  const onSubmit = async (resource: ResourceServerRepresentation) => {\n    try {\n      await adminClient.clients.updateResourceServer(\n        { id: clientId },\n        resource,\n      );\n      addAlert(t(\"updateResourceSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"resourceSaveError\", error);\n    }\n  };\n\n  if (!resource) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection variant=\"light\">\n      {importDialog && (\n        <ImportDialog\n          onConfirm={importResource}\n          closeDialog={toggleImportDialog}\n        />\n      )}\n      <FormAccess\n        role=\"manage-authorization\"\n        isHorizontal\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <FormGroup\n          label={t(\"import\")}\n          fieldId=\"import\"\n          labelIcon={\n            <HelpItem helpText={t(\"importHelp\")} fieldLabelId=\"import\" />\n          }\n        >\n          <Button variant=\"secondary\" onClick={toggleImportDialog}>\n            {t(\"import\")}\n          </Button>\n        </FormGroup>\n        <Divider />\n        <FormGroup\n          label={t(\"policyEnforcementMode\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"policyEnforcementModeHelp\")}\n              fieldLabelId=\"policyEnforcementMode\"\n            />\n          }\n          fieldId=\"policyEnforcementMode\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"policyEnforcementMode\"\n            data-testid=\"policyEnforcementMode\"\n            defaultValue={POLICY_ENFORCEMENT_MODES[0]}\n            control={control}\n            render={({ field }) => (\n              <>\n                {POLICY_ENFORCEMENT_MODES.map((mode) => (\n                  <Radio\n                    id={mode}\n                    key={mode}\n                    data-testid={mode}\n                    isChecked={field.value === mode}\n                    isDisabled={isDisabled}\n                    name=\"policyEnforcementMode\"\n                    onChange={() => field.onChange(mode)}\n                    label={t(`policyEnforcementModes.${mode}`)}\n                    className=\"pf-v5-u-mb-md\"\n                  />\n                ))}\n              </>\n            )}\n          />\n        </FormGroup>\n        <FormProvider {...form}>\n          <DecisionStrategySelect isLimited />\n          <DefaultSwitchControl\n            name=\"allowRemoteResourceManagement\"\n            label={t(\"allowRemoteResourceManagement\")}\n            labelIcon={t(\"allowRemoteResourceManagementHelp\")}\n          />\n        </FormProvider>\n        <FixedButtonsGroup\n          name=\"authenticationSettings\"\n          reset={() => reset(resource)}\n          isSubmit\n        />\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport {\n  Alert,\n  Button,\n  FormGroup,\n  InputGroup,\n  InputGroupItem,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { PasswordInput } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { useAccess } from \"../../context/access/Access\";\nimport useFormatDate from \"../../utils/useFormatDate\";\nimport { CopyToClipboardButton } from \"../../components/copy-to-clipboard-button/CopyToClipboardButton\";\n\nexport type ClientSecretProps = {\n  client: ClientRepresentation;\n  secret: string;\n  toggle: () => void;\n};\n\ntype SecretInputProps = ClientSecretProps & {\n  id: string;\n  buttonLabel: string;\n};\n\nconst SecretInput = ({\n  id,\n  buttonLabel,\n  client,\n  secret,\n  toggle,\n}: SecretInputProps) => {\n  const { t } = useTranslation();\n  const form = useFormContext<ClientRepresentation>();\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || client.access?.configure;\n\n  return (\n    <Split hasGutter>\n      <SplitItem isFilled>\n        <InputGroup>\n          <InputGroupItem isFill>\n            <PasswordInput id={id} value={secret} readOnly />\n          </InputGroupItem>\n          <InputGroupItem>\n            <CopyToClipboardButton\n              id={id}\n              text={secret}\n              label=\"clientSecret\"\n              variant=\"control\"\n            />\n          </InputGroupItem>\n        </InputGroup>\n      </SplitItem>\n      <SplitItem>\n        <Button\n          variant=\"secondary\"\n          isDisabled={form.formState.isDirty || !isManager}\n          onClick={toggle}\n        >\n          {t(buttonLabel)}\n        </Button>\n      </SplitItem>\n    </Split>\n  );\n};\n\nconst ExpireDateFormatter = ({ time }: { time: number }) => {\n  const { t } = useTranslation();\n  const formatDate = useFormatDate();\n  const unixTimeToString = (time: number) =>\n    time\n      ? t(\"secretExpiresOn\", {\n          time: formatDate(new Date(time * 1000), {\n            dateStyle: \"full\",\n            timeStyle: \"long\",\n          }),\n        })\n      : undefined;\n\n  return <div className=\"pf-v5-u-my-md\">{unixTimeToString(time)}</div>;\n};\n\nexport const ClientSecret = ({ client, secret, toggle }: ClientSecretProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const [secretRotated, setSecretRotated] = useState<string | undefined>(\n    client.attributes?.[\"client.secret.rotated\"],\n  );\n  const secretExpirationTime: number =\n    client.attributes?.[\"client.secret.expiration.time\"];\n  const secretRotatedExpirationTime: number =\n    client.attributes?.[\"client.secret.rotated.expiration.time\"];\n\n  const expired = (time: number) => new Date().getTime() >= time * 1000;\n\n  const [toggleInvalidateConfirm, InvalidateConfirm] = useConfirmDialog({\n    titleKey: \"invalidateRotatedSecret\",\n    messageKey: \"invalidateRotatedSecretExplain\",\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.invalidateSecret({\n          id: client.id!,\n        });\n        setSecretRotated(undefined);\n        addAlert(t(\"invalidateRotatedSuccess\"));\n      } catch (error) {\n        addError(\"invalidateRotatedError\", error);\n      }\n    },\n  });\n\n  useEffect(() => {\n    if (secretRotated !== client.attributes?.[\"client.secret.rotated\"]) {\n      setSecretRotated(client.attributes?.[\"client.secret.rotated\"]);\n    }\n  }, [client, secretRotated]);\n\n  return (\n    <>\n      <InvalidateConfirm />\n      <FormGroup\n        label={t(\"clientSecret\")}\n        fieldId=\"kc-client-secret\"\n        className=\"pf-v5-u-my-md\"\n      >\n        <SecretInput\n          id=\"kc-client-secret\"\n          client={client}\n          secret={secret}\n          toggle={toggle}\n          buttonLabel=\"regenerate\"\n        />\n        <ExpireDateFormatter time={secretExpirationTime} />\n        {expired(secretExpirationTime) && (\n          <Alert variant=\"warning\" isInline title={t(\"secretHasExpired\")} />\n        )}\n      </FormGroup>\n      {secretRotated && (\n        <FormGroup label={t(\"secretRotated\")} fieldId=\"secretRotated\">\n          <SecretInput\n            id=\"secretRotated\"\n            client={client}\n            secret={secretRotated}\n            toggle={toggleInvalidateConfirm}\n            buttonLabel=\"invalidateSecret\"\n          />\n          <ExpireDateFormatter time={secretRotatedExpirationTime} />\n        </FormGroup>\n      )}\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\nimport { FormGroup } from \"@patternfly/react-core\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\n\ntype SignedJWTProps = {\n  clientAuthenticatorType: string;\n};\n\nexport const SignedJWT = ({ clientAuthenticatorType }: SignedJWTProps) => {\n  const { cryptoInfo } = useServerInfo();\n  const providers =\n    clientAuthenticatorType === \"client-jwt\"\n      ? (cryptoInfo?.clientSignatureAsymmetricAlgorithms ?? [])\n      : (cryptoInfo?.clientSignatureSymmetricAlgorithms ?? []);\n\n  const { t } = useTranslation();\n  const { control } = useFormContext<FormFields>();\n\n  return (\n    <>\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.token.endpoint.auth.signing.alg\",\n        )}\n        label={t(\"signatureAlgorithm\")}\n        labelIcon={t(\"signatureAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        isScrollable\n        maxMenuHeight=\"200px\"\n        options={[\n          { key: \"\", value: t(\"anyAlgorithm\") },\n          ...providers.map((option) => ({ key: option, value: option })),\n        ]}\n      />\n      <FormGroup\n        label={t(\"signatureMaxExp\")}\n        fieldId=\"signatureMaxExp\"\n        className=\"pf-v5-u-my-md\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"signatureMaxExpHelp\")}\n            fieldLabelId=\"signatureMaxExp\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.token.endpoint.auth.signing.max.exp\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <TimeSelector\n              value={field.value!}\n              onChange={field.onChange}\n              units={[\"second\", \"minute\"]}\n              min=\"1\"\n            />\n          )}\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\nexport const X509 = () => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <DefaultSwitchControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.x509.allow.regex.pattern.comparison\",\n        )}\n        label={t(\"allowRegexComparison\")}\n        labelIcon={t(\"allowRegexComparisonHelp\")}\n        stringify\n      />\n      <TextControl\n        name={convertAttributeNameToForm(\"attributes.x509.subjectdn\")}\n        label={t(\"subject\")}\n        labelIcon={t(\"subjectHelp\")}\n        rules={{\n          required: t(\"required\"),\n        }}\n      />\n    </>\n  );\n};\n","import type { AuthenticationProviderRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/authenticatorConfigRepresentation\";\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type CredentialRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/credentialRepresentation\";\nimport {\n  HelpItem,\n  SelectControl,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Alert,\n  AlertVariant,\n  Button,\n  Card,\n  CardBody,\n  ClipboardCopy,\n  Divider,\n  Form,\n  FormGroup,\n  PageSection,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { useMemo, useState } from \"react\";\nimport { useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { DynamicComponents } from \"../../components/dynamic/DynamicComponents\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { FormFields } from \"../ClientDetails\";\nimport { ClientSecret } from \"./ClientSecret\";\nimport { SignedJWT } from \"./SignedJWT\";\nimport { X509 } from \"./X509\";\n\ntype AccessToken = {\n  registrationAccessToken: string;\n};\n\nexport type CredentialsProps = {\n  client: ClientRepresentation;\n  save: () => void;\n  refresh: () => void;\n};\n\nexport const Credentials = ({ client, save, refresh }: CredentialsProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const clientId = client.id!;\n\n  const [providers, setProviders] = useState<\n    AuthenticationProviderRepresentation[]\n  >([]);\n\n  const {\n    control,\n    formState: { isDirty },\n    handleSubmit,\n  } = useFormContext<FormFields>();\n\n  const clientAuthenticatorType = useWatch({\n    control: control,\n    name: \"clientAuthenticatorType\",\n    defaultValue: \"\",\n  });\n\n  const [secret, setSecret] = useState(\"\");\n  const [accessToken, setAccessToken] = useState(\"\");\n\n  const selectedProvider = providers.find(\n    (provider) => provider.id === clientAuthenticatorType,\n  );\n\n  const { componentTypes } = useServerInfo();\n  const providerProperties = useMemo(\n    () =>\n      componentTypes?.[\"org.keycloak.authentication.ClientAuthenticator\"]?.find(\n        (p) => p.id === clientAuthenticatorType,\n      )?.properties,\n    [clientAuthenticatorType, componentTypes],\n  );\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.authenticationManagement.getClientAuthenticatorProviders(),\n        adminClient.clients.getClientSecret({\n          id: clientId,\n        }),\n      ]),\n    ([providers, secret]) => {\n      setProviders(providers);\n      setSecret(secret.value!);\n    },\n    [],\n  );\n\n  async function regenerate<T>(\n    call: (clientId: string) => Promise<T>,\n    message: string,\n  ): Promise<T | undefined> {\n    try {\n      const data = await call(clientId);\n      addAlert(t(`${message}Success`), AlertVariant.success);\n      return data;\n    } catch (error) {\n      addError(`${message}Error`, error);\n    }\n  }\n\n  const regenerateClientSecret = async () => {\n    const secret = await regenerate<CredentialRepresentation>(\n      (clientId) =>\n        adminClient.clients.generateNewClientSecret({ id: clientId }),\n      \"clientSecret\",\n    );\n    setSecret(secret?.value || \"\");\n    refresh();\n  };\n\n  const [toggleClientSecretConfirm, ClientSecretConfirm] = useConfirmDialog({\n    titleKey: \"confirmClientSecretTitle\",\n    messageKey: \"confirmClientSecretBody\",\n    continueButtonLabel: \"yes\",\n    cancelButtonLabel: \"no\",\n    onConfirm: regenerateClientSecret,\n  });\n\n  const regenerateAccessToken = async () => {\n    const accessToken = await regenerate<AccessToken>(\n      (clientId) =>\n        adminClient.clients.generateRegistrationAccessToken({ id: clientId }),\n      \"accessToken\",\n    );\n    setAccessToken(accessToken?.registrationAccessToken || \"\");\n  };\n\n  const [toggleAccessTokenConfirm, AccessTokenConfirm] = useConfirmDialog({\n    titleKey: \"confirmAccessTokenTitle\",\n    messageKey: \"confirmAccessTokenBody\",\n    continueButtonLabel: \"yes\",\n    cancelButtonLabel: \"no\",\n    onConfirm: regenerateAccessToken,\n  });\n\n  return (\n    <PageSection>\n      <FormAccess\n        onSubmit={handleSubmit(save)}\n        isHorizontal\n        className=\"pf-v5-u-mt-md\"\n        role=\"manage-clients\"\n        fineGrainedAccess={client.access?.configure}\n      >\n        <ClientSecretConfirm />\n        <AccessTokenConfirm />\n        <Card isFlat>\n          <CardBody>\n            <SelectControl\n              name=\"clientAuthenticatorType\"\n              label={t(\"clientAuthenticator\")}\n              labelIcon={t(\"clientAuthenticatorTypeHelp\")}\n              controller={{\n                defaultValue: \"\",\n              }}\n              options={providers.map(({ id, displayName }) => ({\n                key: id!,\n                value: displayName || id!,\n              }))}\n            />\n            {(clientAuthenticatorType === \"client-jwt\" ||\n              clientAuthenticatorType === \"client-secret-jwt\") && (\n              <SignedJWT clientAuthenticatorType={clientAuthenticatorType} />\n            )}\n            {clientAuthenticatorType === \"client-jwt\" && (\n              <FormGroup>\n                <Alert variant=\"info\" isInline title={t(\"signedJWTConfirm\")} />\n              </FormGroup>\n            )}\n            {clientAuthenticatorType === \"client-x509\" && <X509 />}\n            {providerProperties && (\n              <Form>\n                <DynamicComponents\n                  properties={providerProperties}\n                  convertToName={(name) => `attributes.${name}`}\n                />\n              </Form>\n            )}\n            <ActionGroup>\n              <Button variant=\"primary\" type=\"submit\" isDisabled={!isDirty}>\n                {t(\"save\")}\n              </Button>\n            </ActionGroup>\n          </CardBody>\n          {selectedProvider?.supportsSecret && (\n            <>\n              <Divider />\n              <CardBody>\n                <ClientSecret\n                  client={client}\n                  secret={secret}\n                  toggle={toggleClientSecretConfirm}\n                />\n              </CardBody>\n            </>\n          )}\n        </Card>\n        <Card isFlat>\n          <CardBody>\n            <FormGroup\n              label={t(\"registrationAccessToken\")}\n              fieldId=\"kc-access-token\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"registrationAccessTokenHelp\")}\n                  fieldLabelId=\"registrationAccessToken\"\n                />\n              }\n            >\n              <Split hasGutter>\n                <SplitItem isFilled>\n                  <ClipboardCopy id=\"kc-access-token\" isReadOnly>\n                    {accessToken}\n                  </ClipboardCopy>\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={toggleAccessTokenConfirm}\n                  >\n                    {t(\"regenerate\")}\n                  </Button>\n                </SplitItem>\n              </Split>\n            </FormGroup>\n          </CardBody>\n        </Card>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport { FormGroup, TextArea } from \"@patternfly/react-core\";\nimport { useId } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\n\ntype CertificateProps = Omit<CertificateDisplayProps, \"id\"> & {\n  plain?: boolean;\n};\n\ntype CertificateDisplayProps = {\n  id: string;\n  keyInfo?: CertificateRepresentation;\n};\n\nconst CertificateDisplay = ({ id, keyInfo }: CertificateDisplayProps) => {\n  const { t } = useTranslation();\n  return (\n    <TextArea\n      readOnly\n      rows={5}\n      id={id}\n      data-testid=\"certificate\"\n      value={keyInfo?.certificate}\n      aria-label={t(\"certificate\")}\n    />\n  );\n};\n\nexport const Certificate = ({ keyInfo, plain = false }: CertificateProps) => {\n  const { t } = useTranslation();\n  const id = useId();\n\n  return plain ? (\n    <CertificateDisplay id={id} keyInfo={keyInfo} />\n  ) : (\n    <FormGroup\n      label={t(\"certificate\")}\n      fieldId={id}\n      labelIcon={<HelpItem helpText={t(\"certificateHelp\")} fieldLabelId={id} />}\n    >\n      <CertificateDisplay id={id} keyInfo={keyInfo} />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { PasswordControl, TextControl } from \"@keycloak/keycloak-ui-shared\";\n\nexport const StoreSettings = ({\n  hidePassword = false,\n  isSaml = false,\n}: {\n  hidePassword?: boolean;\n  isSaml?: boolean;\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <TextControl\n        name=\"keyAlias\"\n        label={t(\"keyAlias\")}\n        labelIcon={t(\"keyAliasHelp\")}\n        rules={{\n          required: t(\"required\"),\n        }}\n      />\n      {!hidePassword && (\n        <PasswordControl\n          name=\"keyPassword\"\n          label={t(\"keyPassword\")}\n          labelIcon={t(\"keyPasswordHelp\")}\n          rules={{\n            required: t(\"required\"),\n          }}\n        />\n      )}\n      {isSaml && (\n        <TextControl\n          name=\"realmAlias\"\n          label={t(\"realmCertificateAlias\")}\n          labelIcon={t(\"realmCertificateAliasHelp\")}\n        />\n      )}\n      <PasswordControl\n        name=\"storePassword\"\n        label={t(\"storePassword\")}\n        labelIcon={t(\"storePasswordHelp\")}\n        rules={{\n          required: t(\"required\"),\n        }}\n      />\n    </>\n  );\n};\n","import type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { HelpItem, SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  ButtonVariant,\n  FileUpload,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport {\n  Controller,\n  FormProvider,\n  useForm,\n  useFormContext,\n} from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { StoreSettings } from \"./StoreSettings\";\n\ntype GenerateKeyDialogProps = {\n  clientId: string;\n  toggleDialog: () => void;\n  save: (keyStoreConfig: KeyStoreConfig) => void;\n};\n\ntype KeyFormProps = {\n  useFile?: boolean;\n  isSaml?: boolean;\n  hasPem?: boolean;\n};\n\nconst CERT_PEM = \"Certificate PEM\" as const;\n\nconst extensions = new Map([\n  [\"PKCS12\", \"p12\"],\n  [\"JKS\", \"jks\"],\n  [\"BCFKS\", \"bcfks\"],\n]);\n\ntype FormFields = KeyStoreConfig & {\n  file: string | File;\n};\n\nexport const getFileExtension = (format: string) => extensions.get(format);\n\nexport const KeyForm = ({\n  isSaml = false,\n  hasPem = false,\n  useFile = false,\n}: KeyFormProps) => {\n  const { t } = useTranslation();\n\n  const [filename, setFilename] = useState<string>();\n\n  const { control, watch } = useFormContext<FormFields>();\n  const format = watch(\"format\");\n\n  const { cryptoInfo } = useServerInfo();\n  const supportedKeystoreTypes = [\n    ...(cryptoInfo?.supportedKeystoreTypes ?? []),\n    ...(hasPem ? [CERT_PEM] : []),\n  ];\n\n  return (\n    <Form className=\"pf-v5-u-pt-lg\">\n      <SelectControl\n        name=\"format\"\n        label={t(\"archiveFormat\")}\n        labelIcon={t(\"archiveFormatHelp\")}\n        controller={{\n          defaultValue: supportedKeystoreTypes[0],\n        }}\n        menuAppendTo=\"parent\"\n        options={supportedKeystoreTypes}\n      />\n      {useFile && (\n        <FormGroup\n          label={t(\"importFile\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"importFileHelp\")}\n              fieldLabelId=\"importFile\"\n            />\n          }\n          fieldId=\"importFile\"\n        >\n          <Controller\n            name=\"file\"\n            defaultValue=\"\"\n            control={control}\n            render={({ field }) => (\n              <FileUpload\n                id=\"importFile\"\n                type=\"text\"\n                value={field.value}\n                hideDefaultPreview\n                filename={filename}\n                browseButtonText={t(\"browse\")}\n                onDataChange={(_, value) => {\n                  field.onChange(value);\n                }}\n                onFileInputChange={(_, file) => setFilename(file.name)}\n              />\n            )}\n          />\n        </FormGroup>\n      )}\n      {format !== CERT_PEM && (\n        <StoreSettings hidePassword={useFile} isSaml={isSaml} />\n      )}\n    </Form>\n  );\n};\n\nexport const GenerateKeyDialog = ({\n  clientId,\n  save,\n  toggleDialog,\n}: GenerateKeyDialogProps) => {\n  const { t } = useTranslation();\n  const form = useForm<KeyStoreConfig>({\n    defaultValues: { keyAlias: clientId },\n    mode: \"onChange\",\n  });\n\n  const {\n    handleSubmit,\n    formState: { isValid },\n  } = form;\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"generateKeys\")}\n      isOpen\n      onClose={toggleDialog}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          isDisabled={!isValid}\n          onClick={() => {\n            handleSubmit((config) => {\n              save(config);\n              toggleDialog();\n            })();\n          }}\n        >\n          {t(\"generate\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            toggleDialog();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text>{t(\"generateKeysDescription\")}</Text>\n      </TextContent>\n      <FormProvider {...form}>\n        <KeyForm />\n      </FormProvider>\n    </Modal>\n  );\n};\n","import { SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  ButtonVariant,\n  FileUpload,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { StoreSettings } from \"./StoreSettings\";\n\ntype ImportKeyDialogProps = {\n  toggleDialog: () => void;\n  save: (importFile: ImportFile) => void;\n};\n\nexport type ImportFile = {\n  keystoreFormat: string;\n  keyAlias: string;\n  storePassword: string;\n  file: { value?: string; filename: string };\n};\n\nexport const ImportKeyDialog = ({\n  save,\n  toggleDialog,\n}: ImportKeyDialogProps) => {\n  const { t } = useTranslation();\n  const form = useForm<ImportFile>();\n  const [file, setFile] = useState<string>(\"\");\n  const { control, handleSubmit } = form;\n\n  const baseFormats = useServerInfo().cryptoInfo?.supportedKeystoreTypes ?? [];\n\n  const formats = baseFormats.concat([\n    \"Certificate PEM\",\n    \"Public Key PEM\",\n    \"JSON Web Key Set\",\n  ]);\n\n  const format = useWatch({\n    control,\n    name: \"keystoreFormat\",\n    defaultValue: formats[0],\n  });\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"generateKeys\")}\n      isOpen\n      onClose={toggleDialog}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          data-testid=\"confirm\"\n          key=\"confirm\"\n          onClick={() => {\n            handleSubmit((importFile) => {\n              save(importFile);\n              toggleDialog();\n            })();\n          }}\n        >\n          {t(\"import\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={toggleDialog}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text>{t(\"generateKeysDescription\")}</Text>\n      </TextContent>\n      <Form className=\"pf-v5-u-pt-lg\">\n        <FormProvider {...form}>\n          <SelectControl\n            name=\"keystoreFormat\"\n            label={t(\"archiveFormat\")}\n            labelIcon={t(\"archiveFormatHelp\")}\n            controller={{\n              defaultValue: formats[0],\n            }}\n            options={formats}\n          />\n          {baseFormats.includes(format) && <StoreSettings hidePassword />}\n          <FormGroup label={t(\"importFile\")} fieldId=\"importFile\">\n            <Controller\n              name=\"file\"\n              control={control}\n              defaultValue={{ value: \"\", filename: \"\" }}\n              render={({ field }) => (\n                <FileUpload\n                  id=\"importFile\"\n                  value={field.value.value}\n                  filename={file}\n                  hideDefaultPreview\n                  type=\"text\"\n                  onDataChange={(_, value) => {\n                    field.onChange({\n                      value,\n                    });\n                  }}\n                  onFileInputChange={(_, file) => {\n                    setFile(file.name);\n                  }}\n                />\n              )}\n            />\n          </FormGroup>\n        </FormProvider>\n      </Form>\n    </Modal>\n  );\n};\n","import type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { TextControl, useAlerts, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  PageSection,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\nimport { FormFields } from \"../ClientDetails\";\nimport { Certificate } from \"./Certificate\";\nimport { GenerateKeyDialog, getFileExtension } from \"./GenerateKeyDialog\";\nimport { ImportFile, ImportKeyDialog } from \"./ImportKeyDialog\";\n\ntype KeysProps = {\n  save: () => void;\n  refresh: () => void;\n  clientId: string;\n  hasConfigureAccess?: boolean;\n};\n\nconst attr = \"jwt.credential\";\n\nexport const Keys = ({\n  clientId,\n  save,\n  refresh: refreshParent,\n  hasConfigureAccess,\n}: KeysProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const {\n    control,\n    getValues,\n    formState: { isDirty },\n  } = useFormContext<FormFields>();\n  const { addAlert, addError } = useAlerts();\n\n  const [keyInfo, setKeyInfo] = useState<CertificateRepresentation>();\n  const [openGenerateKeys, toggleOpenGenerateKeys, setOpenGenerateKeys] =\n    useToggle();\n  const [openImportKeys, toggleOpenImportKeys, setOpenImportKeys] = useToggle();\n  const [key, setKey] = useState(0);\n  const refresh = () => {\n    setKey(key + 1);\n    refreshParent();\n  };\n\n  const useJwksUrl = useWatch({\n    control,\n    name: convertAttributeNameToForm<FormFields>(\"attributes.use.jwks.url\"),\n    defaultValue: \"false\",\n  });\n\n  useFetch(\n    () => adminClient.clients.getKeyInfo({ id: clientId, attr }),\n    (info) => setKeyInfo(info),\n    [key],\n  );\n\n  const generate = async (config: KeyStoreConfig) => {\n    try {\n      const keyStore = await adminClient.clients.generateAndDownloadKey(\n        {\n          id: clientId,\n          attr,\n        },\n        config,\n      );\n      saveAs(\n        new Blob([keyStore], { type: \"application/octet-stream\" }),\n        `keystore.${getFileExtension(config.format ?? \"\")}`,\n      );\n      addAlert(t(\"generateSuccess\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      addError(\"generateError\", error);\n    }\n  };\n\n  const importKey = async (importFile: ImportFile) => {\n    try {\n      const formData = new FormData();\n      const { file, ...rest } = importFile;\n\n      for (const [key, value] of Object.entries(rest)) {\n        formData.append(key, value);\n      }\n\n      formData.append(\"file\", file.value!);\n\n      await adminClient.clients.uploadCertificate(\n        { id: clientId, attr },\n        formData,\n      );\n      addAlert(t(\"importSuccess\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      addError(\"importError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"keycloak__form\">\n      {openGenerateKeys && (\n        <GenerateKeyDialog\n          clientId={getValues(\"clientId\")!}\n          toggleDialog={toggleOpenGenerateKeys}\n          save={generate}\n        />\n      )}\n      {openImportKeys && (\n        <ImportKeyDialog toggleDialog={toggleOpenImportKeys} save={importKey} />\n      )}\n      <Card isFlat>\n        <CardHeader>\n          <CardTitle>{t(\"jwksUrlConfig\")}</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <TextContent>\n            <Text>{t(\"keysIntro\")}</Text>\n          </TextContent>\n        </CardBody>\n        <CardBody>\n          <FormAccess\n            role=\"manage-clients\"\n            fineGrainedAccess={hasConfigureAccess}\n            isHorizontal\n          >\n            <DefaultSwitchControl\n              name={convertAttributeNameToForm(\"attributes.use.jwks.url\")}\n              label={t(\"useJwksUrl\")}\n              labelIcon={t(\"useJwksUrlHelp\")}\n              stringify\n            />\n            {useJwksUrl !== \"true\" &&\n              (keyInfo ? (\n                <Certificate plain keyInfo={keyInfo} />\n              ) : (\n                \"No client certificate configured\"\n              ))}\n            {useJwksUrl === \"true\" && (\n              <TextControl\n                name={convertAttributeNameToForm(\"attributes.jwks.url\")}\n                label={t(\"jwksUrl\")}\n                labelIcon={t(\"jwksUrlHelp\")}\n                type=\"url\"\n              />\n            )}\n            <ActionGroup>\n              <Button\n                data-testid=\"saveKeys\"\n                onClick={save}\n                isDisabled={!isDirty}\n              >\n                {t(\"save\")}\n              </Button>\n              <Button\n                data-testid=\"generate\"\n                variant=\"secondary\"\n                onClick={() => setOpenGenerateKeys(true)}\n              >\n                {t(\"generateNewKeys\")}\n              </Button>\n              <Button\n                data-testid=\"import\"\n                variant=\"secondary\"\n                onClick={() => setOpenImportKeys(true)}\n                isDisabled={useJwksUrl === \"true\"}\n              >\n                {t(\"import\")}\n              </Button>\n            </ActionGroup>\n          </FormAccess>\n        </CardBody>\n      </Card>\n    </PageSection>\n  );\n};\n","import KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { Button, Form, Modal } from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { KeyForm, getFileExtension } from \"./GenerateKeyDialog\";\nimport { KeyTypes } from \"./SamlKeys\";\n\ntype ExportSamlKeyDialogProps = {\n  clientId: string;\n  close: () => void;\n  keyType: KeyTypes;\n};\n\nexport const ExportSamlKeyDialog = ({\n  clientId,\n  close,\n  keyType,\n}: ExportSamlKeyDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n\n  const { addAlert, addError } = useAlerts();\n\n  const form = useForm<KeyStoreConfig>({\n    defaultValues: { realmAlias: realm },\n  });\n\n  const download = async (config: KeyStoreConfig) => {\n    try {\n      const keyStore = await adminClient.clients.downloadKey(\n        {\n          id: clientId,\n          attr: keyType,\n        },\n        config,\n      );\n      saveAs(\n        new Blob([keyStore], { type: \"application/octet-stream\" }),\n        `keystore.${getFileExtension(config.format ?? \"\")}`,\n      );\n      addAlert(t(\"samlKeysExportSuccess\"));\n      close();\n    } catch (error) {\n      addError(\"samlKeysExportError\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant=\"medium\"\n      title={t(\"exportSamlKeyTitle\")}\n      isOpen\n      onClose={close}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          data-testid=\"confirm\"\n          key=\"confirm\"\n          type=\"submit\"\n          form=\"export-saml-key-form\"\n        >\n          {t(\"export\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            close();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form\n        id=\"export-saml-key-form\"\n        className=\"pf-v5-u-pt-lg\"\n        onSubmit={form.handleSubmit(download)}\n      >\n        <FormProvider {...form}>\n          <KeyForm isSaml />\n        </FormProvider>\n      </Form>\n    </Modal>\n  );\n};\n","import KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\nimport type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Radio,\n  Split,\n  SplitItem,\n  Text,\n  TextContent,\n  Title,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { Certificate } from \"./Certificate\";\nimport { KeyForm } from \"./GenerateKeyDialog\";\nimport type { KeyTypes } from \"./SamlKeys\";\n\ntype SamlKeysDialogProps = {\n  id: string;\n  attr: KeyTypes;\n  onClose: () => void;\n  onCancel: () => void;\n};\n\nexport type SamlKeysDialogForm = KeyStoreConfig & {\n  file: File;\n};\n\nexport const submitForm = async (\n  adminClient: KeycloakAdminClient,\n  form: SamlKeysDialogForm,\n  id: string,\n  attr: KeyTypes,\n  callback: (error?: unknown) => void,\n) => {\n  try {\n    const formData = new FormData();\n    const { file, ...rest } = form;\n    Object.entries(rest).map(([key, value]) =>\n      formData.append(\n        key === \"format\" ? \"keystoreFormat\" : key,\n        value.toString(),\n      ),\n    );\n    formData.append(\"file\", file);\n\n    await adminClient.clients.uploadKey({ id, attr }, formData);\n    callback();\n  } catch (error) {\n    callback(error);\n  }\n};\n\nexport const SamlKeysDialog = ({\n  id,\n  attr,\n  onClose,\n  onCancel,\n}: SamlKeysDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const [type, setType] = useState(false);\n  const [keys, setKeys] = useState<CertificateRepresentation>();\n  const form = useForm<SamlKeysDialogForm>({ mode: \"onChange\" });\n  const {\n    handleSubmit,\n    formState: { isValid },\n  } = form;\n\n  const { addAlert, addError } = useAlerts();\n\n  const submit = (form: SamlKeysDialogForm) => {\n    submitForm(adminClient, form, id, attr, (error) => {\n      if (error) {\n        addError(\"importError\", error);\n      } else {\n        addAlert(t(\"importSuccess\"), AlertVariant.success);\n      }\n    });\n  };\n\n  const generate = async () => {\n    try {\n      const key = await adminClient.clients.generateKey({\n        id,\n        attr,\n      });\n      setKeys(key);\n      saveAs(\n        new Blob([key.privateKey!], {\n          type: \"application/octet-stream\",\n        }),\n        \"private.key\",\n      );\n\n      addAlert(t(\"generateSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"generateError\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      aria-label={t(\"enableClientSignatureRequiredModal\")}\n      header={\n        <TextContent>\n          <Title headingLevel=\"h1\">{t(\"enableClientSignatureRequired\")}</Title>\n          <Text>{t(\"enableClientSignatureRequiredExplain\")}</Text>\n        </TextContent>\n      }\n      isOpen={true}\n      onClose={onClose}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          variant=\"primary\"\n          isDisabled={!isValid && !keys}\n          onClick={() => {\n            if (type) {\n              handleSubmit(submit)();\n            }\n            onClose();\n          }}\n        >\n          {t(\"confirm\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={onCancel}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <FormProvider {...form}>\n        <Form isHorizontal>\n          <FormGroup\n            label={t(\"selectMethod\")}\n            fieldId=\"selectMethod\"\n            hasNoPaddingTop\n          >\n            <Flex>\n              <FlexItem>\n                <Radio\n                  isChecked={!type}\n                  name=\"selectMethodType\"\n                  onChange={() => setType(false)}\n                  label={t(\"selectMethodType.generate\")}\n                  id=\"selectMethodType-generate\"\n                />\n              </FlexItem>\n              <FlexItem>\n                <Radio\n                  isChecked={type}\n                  name=\"selectMethodType\"\n                  onChange={() => setType(true)}\n                  label={t(\"selectMethodType.import\")}\n                  id=\"selectMethodType-import\"\n                />\n              </FlexItem>\n            </Flex>\n          </FormGroup>\n          {!type && (\n            <FormGroup\n              label={t(\"certificate\")}\n              fieldId=\"certificate\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"certificateHelp\")}\n                  fieldLabelId=\"certificate\"\n                />\n              }\n            >\n              <Split hasGutter>\n                <SplitItem isFilled>\n                  <Certificate plain keyInfo={keys} />\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant=\"secondary\"\n                    data-testid=\"generate\"\n                    onClick={generate}\n                  >\n                    {t(\"generate\")}\n                  </Button>\n                </SplitItem>\n              </Split>\n            </FormGroup>\n          )}\n        </Form>\n        {type && <KeyForm useFile hasPem />}\n      </FormProvider>\n    </Modal>\n  );\n};\n","import { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { AlertVariant } from \"@patternfly/react-core\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { ConfirmDialogModal } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeyForm } from \"./GenerateKeyDialog\";\nimport type { KeyTypes } from \"./SamlKeys\";\nimport { SamlKeysDialogForm, submitForm } from \"./SamlKeysDialog\";\n\ntype SamlImportKeyDialogProps = {\n  id: string;\n  attr: KeyTypes;\n  onClose: () => void;\n};\n\nexport const SamlImportKeyDialog = ({\n  id,\n  attr,\n  onClose,\n}: SamlImportKeyDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const form = useForm<SamlKeysDialogForm>();\n  const { handleSubmit } = form;\n\n  const { addAlert, addError } = useAlerts();\n\n  const submit = (form: SamlKeysDialogForm) => {\n    submitForm(adminClient, form, id, attr, (error) => {\n      if (error) {\n        addError(\"importError\", error);\n      } else {\n        addAlert(t(\"importSuccess\"), AlertVariant.success);\n      }\n    });\n  };\n\n  return (\n    <ConfirmDialogModal\n      open={true}\n      toggleDialog={onClose}\n      continueButtonLabel=\"import\"\n      titleKey=\"importKey\"\n      onConfirm={() => {\n        handleSubmit(submit)();\n        onClose();\n      }}\n    >\n      <FormProvider {...form}>\n        <KeyForm useFile hasPem />\n      </FormProvider>\n    </ConfirmDialogModal>\n  );\n};\n","import type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport {\n  FormPanel,\n  HelpItem,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Card,\n  CardBody,\n  Form,\n  FormGroup,\n  PageSection,\n  Switch,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { Fragment, useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\nimport { FormFields } from \"../ClientDetails\";\nimport { Certificate } from \"./Certificate\";\nimport { ExportSamlKeyDialog } from \"./ExportSamlKeyDialog\";\nimport { SamlImportKeyDialog } from \"./SamlImportKeyDialog\";\nimport { SamlKeysDialog } from \"./SamlKeysDialog\";\n\ntype SamlKeysProps = {\n  clientId: string;\n  save: () => void;\n};\n\nconst KEYS = [\"saml.signing\", \"saml.encryption\"] as const;\nexport type KeyTypes = (typeof KEYS)[number];\n\nconst KEYS_MAPPING: { [key in KeyTypes]: { [index: string]: string } } = {\n  \"saml.signing\": {\n    name: convertAttributeNameToForm(\"attributes.saml.client.signature\"),\n    title: \"signingKeysConfig\",\n    key: \"clientSignature\",\n  },\n  \"saml.encryption\": {\n    name: convertAttributeNameToForm(\"attributes.saml.encrypt\"),\n    title: \"encryptionKeysConfig\",\n    key: \"encryptAssertions\",\n  },\n};\n\ntype KeySectionProps = {\n  clientId: string;\n  keyInfo?: CertificateRepresentation;\n  attr: KeyTypes;\n  onChanged: (key: KeyTypes) => void;\n  onGenerate: (key: KeyTypes, regenerate: boolean) => void;\n  onImport: (key: KeyTypes) => void;\n};\n\nconst KeySection = ({\n  clientId,\n  keyInfo,\n  attr,\n  onChanged,\n  onGenerate,\n  onImport,\n}: KeySectionProps) => {\n  const { t } = useTranslation();\n  const { control, watch } = useFormContext<FormFields>();\n  const title = KEYS_MAPPING[attr].title;\n  const key = KEYS_MAPPING[attr].key;\n  const name = KEYS_MAPPING[attr].name;\n\n  const [showImportDialog, toggleImportDialog] = useToggle();\n\n  const section = watch(name as keyof FormFields);\n  return (\n    <>\n      {showImportDialog && (\n        <ExportSamlKeyDialog\n          keyType={attr}\n          clientId={clientId}\n          close={toggleImportDialog}\n        />\n      )}\n      <FormPanel title={t(title)} className=\"kc-form-panel__panel\">\n        <TextContent className=\"pf-v5-u-pb-lg\">\n          <Text>{t(`${title}Explain`)}</Text>\n        </TextContent>\n        <FormAccess role=\"manage-clients\" isHorizontal>\n          <FormGroup\n            labelIcon={\n              <HelpItem helpText={t(`${key}Help`)} fieldLabelId={key} />\n            }\n            label={t(key)}\n            fieldId={key}\n            hasNoPaddingTop\n          >\n            <Controller\n              name={name as keyof FormFields}\n              control={control}\n              defaultValue=\"false\"\n              render={({ field }) => (\n                <Switch\n                  data-testid={key}\n                  id={key}\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(_event, value) => {\n                    const v = value.toString();\n                    if (v === \"true\") {\n                      onChanged(attr);\n                      field.onChange(v);\n                    } else {\n                      onGenerate(attr, false);\n                    }\n                  }}\n                  aria-label={t(key)}\n                />\n              )}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      {keyInfo?.certificate && section === \"true\" && (\n        <Card isFlat>\n          <CardBody className=\"kc-form-panel__body\">\n            <Form isHorizontal>\n              <Certificate keyInfo={keyInfo} />\n              <ActionGroup>\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => onGenerate(attr, true)}\n                >\n                  {t(\"regenerate\")}\n                </Button>\n                <Button variant=\"secondary\" onClick={() => onImport(attr)}>\n                  {t(\"importKey\")}\n                </Button>\n                <Button variant=\"tertiary\" onClick={toggleImportDialog}>\n                  {t(\"export\")}\n                </Button>\n              </ActionGroup>\n            </Form>\n          </CardBody>\n        </Card>\n      )}\n    </>\n  );\n};\n\nexport const SamlKeys = ({ clientId, save }: SamlKeysProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const [isChanged, setIsChanged] = useState<KeyTypes>();\n  const [keyInfo, setKeyInfo] = useState<CertificateRepresentation[]>();\n  const [selectedType, setSelectedType] = useState<KeyTypes>();\n  const [openImport, setImportOpen] = useState<KeyTypes>();\n  const [refresh, setRefresh] = useState(0);\n\n  const { setValue } = useFormContext();\n  const { addAlert, addError } = useAlerts();\n\n  useFetch(\n    () =>\n      Promise.all(\n        KEYS.map((attr) =>\n          adminClient.clients.getKeyInfo({ id: clientId, attr }),\n        ),\n      ),\n    (info) => setKeyInfo(info),\n    [refresh],\n  );\n\n  const generate = async (attr: KeyTypes) => {\n    const index = KEYS.indexOf(attr);\n    try {\n      const info = [...(keyInfo || [])];\n      info[index] = await adminClient.clients.generateKey({\n        id: clientId,\n        attr,\n      });\n\n      setKeyInfo(info);\n      saveAs(\n        new Blob([info[index].privateKey!], {\n          type: \"application/octet-stream\",\n        }),\n        \"private.key\",\n      );\n\n      addAlert(t(\"generateSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"generateError\", error);\n    }\n  };\n\n  const key = selectedType ? KEYS_MAPPING[selectedType].key : \"\";\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: t(\"disableSigning\", {\n      key: t(key),\n    }),\n    messageKey: t(\"disableSigningExplain\", {\n      key: t(key),\n    }),\n    continueButtonLabel: \"yes\",\n    cancelButtonLabel: \"no\",\n    onConfirm: () => {\n      setValue(KEYS_MAPPING[selectedType!].name, \"false\");\n      save();\n    },\n  });\n\n  const [toggleReGenerateDialog, ReGenerateConfirm] = useConfirmDialog({\n    titleKey: \"reGenerateSigning\",\n    messageKey: \"reGenerateSigningExplain\",\n    continueButtonLabel: \"yes\",\n    cancelButtonLabel: \"no\",\n    onConfirm: () => {\n      generate(selectedType!);\n    },\n  });\n\n  return (\n    <PageSection variant=\"light\" className=\"keycloak__form\">\n      {isChanged && (\n        <SamlKeysDialog\n          id={clientId}\n          attr={isChanged}\n          onClose={() => {\n            setIsChanged(undefined);\n            save();\n            setRefresh(refresh + 1);\n          }}\n          onCancel={() => {\n            setValue(KEYS_MAPPING[selectedType!].name, \"false\");\n            setIsChanged(undefined);\n          }}\n        />\n      )}\n      <DisableConfirm />\n      <ReGenerateConfirm />\n      {KEYS.map((attr, index) => (\n        <Fragment key={attr}>\n          {openImport === attr && (\n            <SamlImportKeyDialog\n              id={clientId}\n              attr={attr}\n              onClose={() => setImportOpen(undefined)}\n            />\n          )}\n          <KeySection\n            clientId={clientId}\n            keyInfo={keyInfo?.[index]}\n            attr={attr}\n            onChanged={setIsChanged}\n            onGenerate={(type, isNew) => {\n              setSelectedType(type);\n              if (!isNew) {\n                toggleDisableDialog();\n              } else {\n                toggleReGenerateDialog();\n              }\n            }}\n            onImport={() => setImportOpen(attr)}\n          />\n        </Fragment>\n      ))}\n    </PageSection>\n  );\n};\n","import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  MenuToggle,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { EllipsisVIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { ChangeTypeDropdown } from \"../../client-scopes/ChangeTypeDropdown\";\nimport {\n  SearchDropdown,\n  SearchToolbar,\n  SearchType,\n  nameFilter,\n  typeFilter,\n} from \"../../client-scopes/details/SearchFilter\";\nimport {\n  AllClientScopeType,\n  AllClientScopes,\n  CellDropdown,\n  ClientScope,\n  addClientScope,\n  changeClientScope,\n  removeClientScope,\n} from \"../../components/client-scope/ClientScopeTypes\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { Action, KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { translationFormatter } from \"../../utils/translationFormatter\";\nimport useLocaleSort, { mapByKey } from \"../../utils/useLocaleSort\";\nimport { toDedicatedScope } from \"../routes/DedicatedScopeDetails\";\nimport { AddScopeDialog } from \"./AddScopeDialog\";\n\nimport \"./client-scopes.css\";\n\nexport type ClientScopesProps = {\n  clientId: string;\n  protocol: string;\n  clientName: string;\n  fineGrainedAccess?: boolean;\n};\n\nexport type Row = ClientScopeRepresentation & {\n  type: AllClientScopeType;\n  description?: string;\n};\n\nconst DEDICATED_ROW = \"dedicated\";\n\ntype TypeSelectorProps = Row & {\n  clientId: string;\n  fineGrainedAccess?: boolean;\n  refresh: () => void;\n};\n\nconst TypeSelector = ({\n  clientId,\n  refresh,\n  fineGrainedAccess,\n  ...scope\n}: TypeSelectorProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const { hasAccess } = useAccess();\n\n  const isDedicatedRow = (value: Row) => value.id === DEDICATED_ROW;\n  const isManager = hasAccess(\"manage-clients\") || fineGrainedAccess;\n\n  return (\n    <CellDropdown\n      isDisabled={isDedicatedRow(scope) || !isManager}\n      clientScope={scope}\n      type={scope.type}\n      onSelect={async (value) => {\n        try {\n          await changeClientScope(\n            adminClient,\n            clientId,\n            scope,\n            scope.type,\n            value as ClientScope,\n          );\n          addAlert(t(\"clientScopeSuccess\"), AlertVariant.success);\n          refresh();\n        } catch (error) {\n          addError(\"clientScopeError\", error);\n        }\n      }}\n    />\n  );\n};\n\nexport const ClientScopes = ({\n  clientId,\n  protocol,\n  clientName,\n  fineGrainedAccess,\n}: ClientScopesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const localeSort = useLocaleSort();\n\n  const [searchType, setSearchType] = useState<SearchType>(\"name\");\n\n  const [searchTypeType, setSearchTypeType] = useState<AllClientScopes>(\n    AllClientScopes.none,\n  );\n\n  const [addDialogOpen, setAddDialogOpen] = useState(false);\n\n  const [rest, setRest] = useState<ClientScopeRepresentation[]>();\n  const [selectedRows, setSelectedRowState] = useState<Row[]>([]);\n  const setSelectedRows = (rows: Row[]) =>\n    setSelectedRowState(rows.filter(({ id }) => id !== DEDICATED_ROW));\n  const [kebabOpen, setKebabOpen] = useState(false);\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const isDedicatedRow = (value: Row) => value.id === DEDICATED_ROW;\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || fineGrainedAccess;\n  const isViewer = hasAccess(\"view-clients\") || fineGrainedAccess;\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const defaultClientScopes =\n      await adminClient.clients.listDefaultClientScopes({ id: clientId });\n    const optionalClientScopes =\n      await adminClient.clients.listOptionalClientScopes({ id: clientId });\n    const clientScopes = await adminClient.clientScopes.find();\n\n    const find = (id: string) =>\n      clientScopes.find((clientScope) => id === clientScope.id);\n\n    const optional = optionalClientScopes.map((c) => {\n      const scope = find(c.id!);\n      const row: Row = {\n        ...c,\n        type: ClientScope.optional,\n        description: scope?.description,\n      };\n      return row;\n    });\n\n    const defaultScopes = defaultClientScopes.map((c) => {\n      const scope = find(c.id!);\n      const row: Row = {\n        ...c,\n        type: ClientScope.default,\n        description: scope?.description,\n      };\n      return row;\n    });\n\n    let rows = [...optional, ...defaultScopes];\n    const names = rows.map((row) => row.name);\n\n    setRest(\n      clientScopes\n        .filter((scope) => !names.includes(scope.name))\n        .filter((scope) => scope.protocol === protocol),\n    );\n\n    rows = localeSort(rows, mapByKey(\"name\"));\n\n    if (isViewer) {\n      rows.unshift({\n        id: DEDICATED_ROW,\n        name: t(\"dedicatedScopeName\", { clientName }),\n        type: AllClientScopes.none,\n        description: t(\"dedicatedScopeDescription\"),\n      });\n    }\n\n    const filter =\n      searchType === \"name\" ? nameFilter(search) : typeFilter(searchTypeType);\n    const firstNum = Number(first);\n\n    return rows.filter(filter).slice(firstNum, firstNum + Number(max));\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientScope\", {\n      count: selectedRows.length,\n      name: selectedRows[0]?.name,\n    }),\n    messageKey: \"deleteConfirmClientScopes\",\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await removeClientScope(\n          adminClient,\n          clientId,\n          selectedRows[0],\n          selectedRows[0].type as ClientScope,\n        );\n        addAlert(t(\"clientScopeRemoveSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"clientScopeRemoveError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      {rest && (\n        <AddScopeDialog\n          clientScopes={rest}\n          clientName={clientName!}\n          open={addDialogOpen}\n          toggleDialog={() => setAddDialogOpen(!addDialogOpen)}\n          onAdd={async (scopes) => {\n            try {\n              await Promise.all(\n                scopes.map(\n                  async (scope) =>\n                    await addClientScope(\n                      adminClient,\n                      clientId,\n                      scope.scope,\n                      scope.type!,\n                    ),\n                ),\n              );\n              addAlert(t(\"clientScopeSuccess\"), AlertVariant.success);\n              refresh();\n            } catch (error) {\n              addError(\"clientScopeError\", error);\n            }\n          }}\n        />\n      )}\n\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        ariaLabelKey={`clientScopeList-${key}`}\n        searchPlaceholderKey={\n          searchType === \"name\" ? \"searchByName\" : undefined\n        }\n        canSelectAll\n        isPaginated\n        isSearching={searchType === \"type\"}\n        onSelect={(rows) => setSelectedRows([...rows])}\n        searchTypeComponent={\n          <SearchDropdown\n            searchType={searchType}\n            onSelect={(searchType) => setSearchType(searchType)}\n          />\n        }\n        toolbarItem={\n          <>\n            <SearchToolbar\n              searchType={searchType}\n              type={searchTypeType}\n              onSelect={(searchType) => setSearchType(searchType)}\n              onType={(value) => {\n                setSearchTypeType(value);\n                refresh();\n              }}\n            />\n            {isManager && (\n              <>\n                <DeleteConfirm />\n                <ToolbarItem>\n                  <Button onClick={() => setAddDialogOpen(true)}>\n                    {t(\"addClientScope\")}\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <ChangeTypeDropdown\n                    clientId={clientId}\n                    selectedRows={selectedRows}\n                    refresh={refresh}\n                  />\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Dropdown\n                    onOpenChange={(isOpen) => setKebabOpen(isOpen)}\n                    toggle={(ref) => (\n                      <MenuToggle\n                        data-testid=\"kebab\"\n                        aria-label=\"Kebab toggle\"\n                        ref={ref}\n                        variant=\"plain\"\n                        onClick={() => setKebabOpen(!kebabOpen)}\n                        isExpanded={kebabOpen}\n                      >\n                        <EllipsisVIcon />\n                      </MenuToggle>\n                    )}\n                    isOpen={kebabOpen}\n                  >\n                    <DropdownList>\n                      <DropdownItem\n                        key=\"deleteAll\"\n                        isDisabled={selectedRows.length === 0}\n                        onClick={async () => {\n                          try {\n                            await Promise.all(\n                              selectedRows.map((row) =>\n                                removeClientScope(\n                                  adminClient,\n                                  clientId,\n                                  { ...row },\n                                  row.type as ClientScope,\n                                ),\n                              ),\n                            );\n\n                            setKebabOpen(false);\n                            setSelectedRows([]);\n                            addAlert(t(\"clientScopeRemoveSuccess\"));\n                            refresh();\n                          } catch (error) {\n                            addError(\"clientScopeRemoveError\", error);\n                          }\n                        }}\n                      >\n                        {t(\"remove\")}\n                      </DropdownItem>\n                    </DropdownList>\n                  </Dropdown>\n                </ToolbarItem>\n              </>\n            )}\n          </>\n        }\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"assignedClientScope\",\n            cellRenderer: (row) => {\n              if (isDedicatedRow(row)) {\n                return (\n                  <Link to={toDedicatedScope({ realm, clientId })}>\n                    {row.name}\n                  </Link>\n                );\n              }\n              return row.name!;\n            },\n          },\n          {\n            name: \"type\",\n            displayKey: \"assignedType\",\n            cellRenderer: (row) => (\n              <TypeSelector clientId={clientId} refresh={refresh} {...row} />\n            ),\n          },\n          { name: \"description\", cellFormatters: [translationFormatter(t)] },\n        ]}\n        actions={\n          isManager\n            ? [\n                {\n                  title: t(\"remove\"),\n                  onRowClick: async (row) => {\n                    setSelectedRows([row]);\n                    toggleDeleteDialog();\n                    return true;\n                  },\n                } as Action<Row>,\n              ]\n            : []\n        }\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyClientScopes\")}\n            instructions={t(\"emptyClientScopesInstructions\")}\n            primaryActionText={t(\"emptyClientScopesPrimaryAction\")}\n            onPrimaryAction={() => setAddDialogOpen(true)}\n          />\n        }\n      />\n    </>\n  );\n};\n","import type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  CodeBlock,\n  CodeBlockAction,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateHeader,\n  TextArea,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { CopyToClipboardButton } from \"../../components/copy-to-clipboard-button/CopyToClipboardButton\";\n\ntype GeneratedCodeTabProps = {\n  user?: UserRepresentation;\n  text: string;\n  label: string;\n};\n\nexport const GeneratedCodeTab = ({\n  text,\n  user,\n  label,\n}: GeneratedCodeTabProps) => {\n  const { t } = useTranslation();\n\n  return user ? (\n    <CodeBlock\n      id={label}\n      actions={\n        <CodeBlockAction>\n          <CopyToClipboardButton id=\"code\" text={text} label={label} />\n        </CodeBlockAction>\n      }\n    >\n      <TextArea\n        id={`text-area-${label}`}\n        rows={20}\n        value={text}\n        aria-label={label}\n      />\n    </CodeBlock>\n  ) : (\n    <EmptyState variant=\"lg\" id={label}>\n      <EmptyStateHeader titleText={<>{t(`${label}No`)}</>} headingLevel=\"h2\" />\n      <EmptyStateBody>{t(`${label}IsDisabled`)}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport type ProtocolMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/protocolMapperRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type { ProtocolMapperTypeRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/serverInfoRepesentation\";\nimport {\n  HelpItem,\n  KeycloakDataTable,\n  KeycloakSelect,\n  SelectVariant,\n  useFetch,\n  useHelp,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ClipboardCopy,\n  Form,\n  FormGroup,\n  Grid,\n  GridItem,\n  PageSection,\n  SelectOption,\n  Split,\n  SplitItem,\n  Tab,\n  TabContent,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { UserSelect } from \"../../components/users/UserSelect\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { prettyPrintJSON } from \"../../util\";\nimport { GeneratedCodeTab } from \"./GeneratedCodeTab\";\n\nimport \"./evaluate.css\";\nimport { ClientSelect } from \"../../components/client/ClientSelect\";\n\nexport type EvaluateScopesProps = {\n  clientId: string;\n  protocol: string;\n};\n\nconst ProtocolMappers = ({\n  protocolMappers,\n}: {\n  protocolMappers: ProtocolMapperRepresentation[];\n}) => {\n  const [key, setKey] = useState(0);\n  useEffect(() => {\n    setKey(key + 1);\n  }, [protocolMappers]);\n  return (\n    <KeycloakDataTable\n      key={key}\n      loader={() => Promise.resolve(protocolMappers)}\n      ariaLabelKey=\"effectiveProtocolMappers\"\n      searchPlaceholderKey=\"searchForProtocol\"\n      data-testid=\"effective-protocol-mappers\"\n      columns={[\n        {\n          name: \"mapperName\",\n          displayKey: \"name\",\n        },\n        {\n          name: \"containerName\",\n          displayKey: \"parentClientScope\",\n        },\n        {\n          name: \"type.category\",\n          displayKey: \"category\",\n        },\n        {\n          name: \"type.priority\",\n          displayKey: \"priority\",\n        },\n      ]}\n    />\n  );\n};\n\nconst EffectiveRoles = ({\n  effectiveRoles,\n}: {\n  effectiveRoles: RoleRepresentation[];\n}) => {\n  const [key, setKey] = useState(0);\n  useEffect(() => {\n    setKey(key + 1);\n  }, [effectiveRoles]);\n\n  return (\n    <KeycloakDataTable\n      key={key}\n      loader={() => Promise.resolve(effectiveRoles)}\n      ariaLabelKey=\"effectiveRoleScopeMappings\"\n      searchPlaceholderKey=\"searchForRole\"\n      data-testid=\"effective-role-scope-mappings\"\n      columns={[\n        {\n          name: \"name\",\n          displayKey: \"role\",\n        },\n        {\n          name: \"containerId\",\n          displayKey: \"origin\",\n        },\n      ]}\n    />\n  );\n};\n\nexport const EvaluateScopes = ({ clientId, protocol }: EvaluateScopesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const prefix = \"openid\";\n  const { t } = useTranslation();\n  const { enabled } = useHelp();\n  const { realm } = useRealm();\n  const mapperTypes = useServerInfo().protocolMapperTypes![protocol];\n\n  const [selectableScopes, setSelectableScopes] = useState<\n    ClientScopeRepresentation[]\n  >([]);\n  const [isScopeOpen, setIsScopeOpen] = useState(false);\n  const [selected, setSelected] = useState<string[]>([prefix]);\n  const [activeTab, setActiveTab] = useState(0);\n\n  const [key, setKey] = useState(\"\");\n  const refresh = () => setKey(`${new Date().getTime()}`);\n  const [effectiveRoles, setEffectiveRoles] = useState<RoleRepresentation[]>(\n    [],\n  );\n  const [protocolMappers, setProtocolMappers] = useState<\n    ProtocolMapperRepresentation[]\n  >([]);\n  const [accessToken, setAccessToken] = useState(\"\");\n  const [userInfo, setUserInfo] = useState(\"\");\n  const [idToken, setIdToken] = useState(\"\");\n\n  const tabContent1 = useRef(null);\n  const tabContent2 = useRef(null);\n  const tabContent3 = useRef(null);\n  const tabContent4 = useRef(null);\n  const tabContent5 = useRef(null);\n\n  const form = useForm();\n  const { watch } = form;\n  const selectedAudience: string[] = watch(\"targetAudience\");\n\n  const { hasAccess } = useAccess();\n  const hasViewUsers = hasAccess(\"view-users\");\n\n  useFetch(\n    () => adminClient.clients.listOptionalClientScopes({ id: clientId }),\n    (optionalClientScopes) => setSelectableScopes(optionalClientScopes),\n    [],\n  );\n\n  useFetch(\n    async () => {\n      const scope = selected.join(\" \");\n      const effectiveRoles = await adminClient.clients.evaluatePermission({\n        id: clientId,\n        roleContainer: realm,\n        scope,\n        type: \"granted\",\n      });\n\n      const mapperList = (await adminClient.clients.evaluateListProtocolMapper({\n        id: clientId,\n        scope,\n      })) as ({\n        type: ProtocolMapperTypeRepresentation;\n      } & ProtocolMapperRepresentation)[];\n\n      return {\n        mapperList,\n        effectiveRoles,\n      };\n    },\n    ({ mapperList, effectiveRoles }) => {\n      setEffectiveRoles(effectiveRoles);\n      mapperList.map((mapper) => {\n        mapper.type = mapperTypes.find(\n          (type) => type.id === mapper.protocolMapper,\n        )!;\n      });\n\n      setProtocolMappers(mapperList);\n      refresh();\n    },\n    [selected],\n  );\n\n  useFetch(\n    async () => {\n      const scope = selected.join(\" \");\n      const user = form.getValues(\"user\");\n      if (!user) return [];\n      const audience = selectedAudience.join(\" \");\n\n      return await Promise.all([\n        adminClient.clients.evaluateGenerateAccessToken({\n          id: clientId,\n          userId: user[0],\n          scope,\n          audience,\n        }),\n        adminClient.clients.evaluateGenerateUserInfo({\n          id: clientId,\n          userId: user[0],\n          scope,\n        }),\n        adminClient.clients.evaluateGenerateIdToken({\n          id: clientId,\n          userId: user[0],\n          scope,\n        }),\n      ]);\n    },\n    ([accessToken, userInfo, idToken]) => {\n      setAccessToken(prettyPrintJSON(accessToken));\n      setUserInfo(prettyPrintJSON(userInfo));\n      setIdToken(prettyPrintJSON(idToken));\n    },\n    [form.getValues(\"user\"), selected, selectedAudience],\n  );\n\n  return (\n    <>\n      <PageSection variant=\"light\">\n        {enabled && (\n          <TextContent className=\"keycloak__section_intro__help\">\n            <Text>\n              <QuestionCircleIcon /> {t(\"evaluateExplain\")}\n            </Text>\n          </TextContent>\n        )}\n        <Form isHorizontal>\n          <FormGroup\n            label={t(\"scopeParameter\")}\n            fieldId=\"scopeParameter\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"scopeParameterHelp\")}\n                fieldLabelId=\"scopeParameter\"\n              />\n            }\n          >\n            <Split hasGutter>\n              <SplitItem isFilled>\n                <KeycloakSelect\n                  toggleId=\"scopeParameter\"\n                  variant={SelectVariant.typeaheadMulti}\n                  typeAheadAriaLabel={t(\"scopeParameter\")}\n                  onToggle={() => setIsScopeOpen(!isScopeOpen)}\n                  isOpen={isScopeOpen}\n                  selections={selected}\n                  onSelect={(value) => {\n                    const option = value as string;\n                    if (selected.includes(option)) {\n                      if (option !== prefix) {\n                        setSelected(selected.filter((item) => item !== option));\n                      }\n                    } else {\n                      setSelected([...selected, option]);\n                    }\n                  }}\n                  aria-labelledby={t(\"scopeParameter\")}\n                  placeholderText={t(\"scopeParameterPlaceholder\")}\n                >\n                  {selectableScopes.map((option, index) => (\n                    <SelectOption key={index} value={option.name}>\n                      {option.name}\n                    </SelectOption>\n                  ))}\n                </KeycloakSelect>\n              </SplitItem>\n              <SplitItem>\n                <ClipboardCopy className=\"keycloak__scopes_evaluate__clipboard-copy\">\n                  {selected.join(\" \")}\n                </ClipboardCopy>\n              </SplitItem>\n            </Split>\n          </FormGroup>\n          {hasViewUsers && (\n            <FormProvider {...form}>\n              <UserSelect\n                name=\"user\"\n                label=\"users\"\n                helpText={t(\"userHelp\")}\n                defaultValue=\"\"\n                variant={SelectVariant.typeahead}\n                isRequired\n              />\n            </FormProvider>\n          )}\n          <FormProvider {...form}>\n            <ClientSelect\n              name=\"targetAudience\"\n              label={t(\"targetAudience\")}\n              helpText={t(\"targetAudienceHelp\")}\n              defaultValue={[]}\n              variant=\"typeaheadMulti\"\n              placeholderText={t(\"targetAudiencePlaceHolder\")}\n            />\n          </FormProvider>\n        </Form>\n      </PageSection>\n\n      <Grid hasGutter className=\"keycloak__scopes_evaluate__tabs\">\n        <GridItem span={8}>\n          <TabContent\n            aria-labelledby=\"pf-tab-0-effectiveProtocolMappers\"\n            eventKey={0}\n            id=\"effectiveProtocolMappers\"\n            ref={tabContent1}\n          >\n            <ProtocolMappers protocolMappers={protocolMappers} />\n          </TabContent>\n          <TabContent\n            aria-labelledby=\"pf-tab-0-effectiveRoleScopeMappings\"\n            eventKey={1}\n            id=\"effectiveRoleScopeMappings\"\n            ref={tabContent2}\n            hidden\n          >\n            <EffectiveRoles effectiveRoles={effectiveRoles} />\n          </TabContent>\n          <TabContent\n            aria-labelledby={t(\"generatedAccessToken\")}\n            eventKey={2}\n            id=\"tab-generated-access-token\"\n            ref={tabContent3}\n            hidden\n          >\n            <GeneratedCodeTab\n              text={accessToken}\n              user={form.getValues(\"user\")}\n              label=\"generatedAccessToken\"\n            />\n          </TabContent>\n          <TabContent\n            aria-labelledby={t(\"generatedIdToken\")}\n            eventKey={3}\n            id=\"tab-generated-id-token\"\n            ref={tabContent4}\n            hidden\n          >\n            <GeneratedCodeTab\n              text={idToken}\n              user={form.getValues(\"user\")}\n              label=\"generatedIdToken\"\n            />\n          </TabContent>\n          <TabContent\n            aria-labelledby={t(\"generatedUserInfo\")}\n            eventKey={4}\n            id=\"tab-generated-user-info\"\n            ref={tabContent5}\n            hidden\n          >\n            <GeneratedCodeTab\n              text={userInfo}\n              user={form.getValues(\"user\")}\n              label=\"generatedUserInfo\"\n            />\n          </TabContent>\n        </GridItem>\n        <GridItem span={4}>\n          <Tabs\n            id=\"tabs\"\n            key={key}\n            isVertical\n            activeKey={activeTab}\n            onSelect={(_, key) => setActiveTab(key as number)}\n          >\n            <Tab\n              id=\"effectiveProtocolMappers\"\n              aria-controls=\"effectiveProtocolMappers\"\n              data-testid=\"effective-protocol-mappers-tab\"\n              eventKey={0}\n              title={\n                <TabTitleText>\n                  {t(\"effectiveProtocolMappers\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"effectiveProtocolMappers\"\n                    helpText={t(\"effectiveProtocolMappersHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent1}\n            />\n            <Tab\n              id=\"effectiveRoleScopeMappings\"\n              aria-controls=\"effectiveRoleScopeMappings\"\n              data-testid=\"effective-role-scope-mappings-tab\"\n              eventKey={1}\n              title={\n                <TabTitleText>\n                  {t(\"effectiveRoleScopeMappings\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"effectiveRoleScopeMappings\"\n                    helpText={t(\"effectiveRoleScopeMappingsHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent2}\n            ></Tab>\n            <Tab\n              id=\"generatedAccessToken\"\n              aria-controls=\"generatedAccessToken\"\n              data-testid=\"generated-access-token-tab\"\n              eventKey={2}\n              title={\n                <TabTitleText>\n                  {t(\"generatedAccessToken\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"generatedAccessToken\"\n                    helpText={t(\"generatedAccessTokenHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent3}\n            />\n            <Tab\n              id=\"generatedIdToken\"\n              aria-controls=\"generatedIdToken\"\n              data-testid=\"generated-id-token-tab\"\n              eventKey={3}\n              title={\n                <TabTitleText>\n                  {t(\"generatedIdToken\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"generatedIdToken\"\n                    helpText={t(\"generatedIdTokenHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent4}\n            />\n            <Tab\n              id=\"generatedUserInfo\"\n              aria-controls=\"generatedUserInfo\"\n              data-testid=\"generated-user-info-tab\"\n              eventKey={4}\n              title={\n                <TabTitleText>\n                  {t(\"generatedUserInfo\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"generatedUserInfo\"\n                    helpText={t(\"generatedUserInfoHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent5}\n            />\n          </Tabs>\n        </GridItem>\n      </Grid>\n    </>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type { RoleMappingPayload } from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { useAlerts, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport { AlertVariant, PageSection } from \"@patternfly/react-core\";\nimport { InfoCircleIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { RoleMapping, Row } from \"../../components/role-mapping/RoleMapping\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toUser } from \"../../user/routes/User\";\n\nimport \"./service-account.css\";\n\ntype ServiceAccountProps = {\n  client: ClientRepresentation;\n};\n\nexport const ServiceAccount = ({ client }: ServiceAccountProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [serviceAccount, setServiceAccount] = useState<UserRepresentation>();\n\n  const { hasAccess } = useAccess();\n  const hasManageClients = hasAccess(\"manage-clients\");\n\n  useFetch(\n    () =>\n      adminClient.clients.getServiceAccountUser({\n        id: client.id!,\n      }),\n    (serviceAccount) => setServiceAccount(serviceAccount),\n    [],\n  );\n\n  const assignRoles = async (rows: Row[]) => {\n    try {\n      const realmRoles = rows\n        .filter((row) => row.client === undefined)\n        .map((row) => row.role as RoleMappingPayload)\n        .flat();\n      await adminClient.users.addRealmRoleMappings({\n        id: serviceAccount?.id!,\n        roles: realmRoles,\n      });\n      await Promise.all(\n        rows\n          .filter((row) => row.client !== undefined)\n          .map((row) =>\n            adminClient.users.addClientRoleMappings({\n              id: serviceAccount?.id!,\n              clientUniqueId: row.client!.id!,\n              roles: [row.role as RoleMappingPayload],\n            }),\n          ),\n      );\n      addAlert(t(\"roleMappingUpdatedSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"roleMappingUpdatedError\", error);\n    }\n  };\n  return serviceAccount ? (\n    <>\n      <PageSection className=\"pf-v5-u-pb-0\">\n        <InfoCircleIcon className=\"pf-v5-c-alert__icon keycloak--service-account--info-text\" />\n        <span className=\"pf-v5-u-pl-sm\">\n          <Trans i18nKey=\"manageServiceAccountUser\">\n            {\"\"}\n            <Link\n              to={toUser({ realm, id: serviceAccount.id!, tab: \"settings\" })}\n            >\n              {{ link: serviceAccount.username }}\n            </Link>\n          </Trans>\n        </span>\n      </PageSection>\n      <RoleMapping\n        name={client.clientId!}\n        id={serviceAccount.id!}\n        type=\"users\"\n        isManager={hasManageClients || client.access?.configure}\n        save={assignRoles}\n      />\n    </>\n  ) : (\n    <KeycloakSpinner />\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport { useAlerts, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  Divider,\n  DropdownItem,\n  Label,\n  PageSection,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { InfoCircleIcon } from \"@patternfly/react-icons\";\nimport { cloneDeep, sortBy } from \"lodash-es\";\nimport { useMemo, useState } from \"react\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport {\n  ConfirmDialogModal,\n  useConfirmDialog,\n} from \"../components/confirm-dialog/ConfirmDialog\";\nimport { DownloadDialog } from \"../components/download-dialog/DownloadDialog\";\nimport type { KeyValueType } from \"../components/key-value-form/key-value-convert\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { PermissionsTab } from \"../components/permission-tab/PermissionTab\";\nimport { RolesList } from \"../components/roles-list/RolesList\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport {\n  ViewHeader,\n  ViewHeaderBadge,\n} from \"../components/view-header/ViewHeader\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport {\n  convertAttributeNameToForm,\n  convertFormValuesToObject,\n  convertToFormValues,\n  exportClient,\n} from \"../util\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\nimport { useParams } from \"../utils/useParams\";\nimport useToggle from \"../utils/useToggle\";\nimport { AdvancedTab } from \"./AdvancedTab\";\nimport { ClientSessions } from \"./ClientSessions\";\nimport { ClientSettings } from \"./ClientSettings\";\nimport { AuthorizationEvaluate } from \"./authorization/AuthorizationEvaluate\";\nimport { AuthorizationExport } from \"./authorization/AuthorizationExport\";\nimport { AuthorizationPermissions } from \"./authorization/Permissions\";\nimport { AuthorizationPolicies } from \"./authorization/Policies\";\nimport { AuthorizationResources } from \"./authorization/Resources\";\nimport { AuthorizationScopes } from \"./authorization/Scopes\";\nimport { AuthorizationSettings } from \"./authorization/Settings\";\nimport { Credentials } from \"./credentials/Credentials\";\nimport { Keys } from \"./keys/Keys\";\nimport { SamlKeys } from \"./keys/SamlKeys\";\nimport {\n  AuthorizationTab,\n  toAuthorizationTab,\n} from \"./routes/AuthenticationTab\";\nimport { ClientParams, ClientTab, toClient } from \"./routes/Client\";\nimport { toClientRole } from \"./routes/ClientRole\";\nimport { ClientScopesTab, toClientScopesTab } from \"./routes/ClientScopeTab\";\nimport { toClients } from \"./routes/Clients\";\nimport { toCreateRole } from \"./routes/NewRole\";\nimport { ClientScopes } from \"./scopes/ClientScopes\";\nimport { EvaluateScopes } from \"./scopes/EvaluateScopes\";\nimport { ServiceAccount } from \"./service-account/ServiceAccount\";\nimport { getProtocolName, isRealmClient } from \"./utils\";\nimport { UserEvents } from \"../events/UserEvents\";\nimport { useIsAdminPermissionsClient } from \"../utils/useIsAdminPermissionsClient\";\nimport { AdminEvents } from \"../events/AdminEvents\";\n\ntype ClientDetailHeaderProps = {\n  onChange: (value: boolean) => void;\n  value: boolean | undefined;\n  save: () => void;\n  client: ClientRepresentation;\n  toggleDownloadDialog: () => void;\n  toggleDeleteDialog: () => void;\n};\n\nconst ClientDetailHeader = ({\n  onChange,\n  value,\n  save,\n  client,\n  toggleDownloadDialog,\n  toggleDeleteDialog,\n}: ClientDetailHeaderProps) => {\n  const { t } = useTranslation();\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"disableConfirmClientTitle\",\n    messageKey: \"disableConfirmClient\",\n    continueButtonLabel: \"disable\",\n    onConfirm: () => {\n      onChange(!value);\n      save();\n    },\n  });\n\n  const badges = useMemo<ViewHeaderBadge[]>(() => {\n    const protocolName = getProtocolName(\n      t,\n      client.protocol ?? \"openid-connect\",\n    );\n\n    const text = client.bearerOnly ? (\n      <Tooltip\n        data-testid=\"bearer-only-explainer-tooltip\"\n        content={t(\"explainBearerOnly\")}\n      >\n        <Label\n          data-testid=\"bearer-only-explainer-label\"\n          icon={<InfoCircleIcon />}\n        >\n          {protocolName}\n        </Label>\n      </Tooltip>\n    ) : (\n      <Label>{protocolName}</Label>\n    );\n\n    return [{ text }];\n  }, [client, t]);\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || client.access?.configure;\n\n  const dropdownItems = [\n    <DropdownItem key=\"download\" onClick={toggleDownloadDialog}>\n      {t(\"downloadAdapterConfig\")}\n    </DropdownItem>,\n    <DropdownItem key=\"export\" onClick={() => exportClient(client)}>\n      {t(\"export\")}\n    </DropdownItem>,\n    ...(!isRealmClient(client) && isManager\n      ? [\n          <Divider key=\"divider\" />,\n          <DropdownItem\n            data-testid=\"delete-client\"\n            key=\"delete\"\n            onClick={toggleDeleteDialog}\n          >\n            {t(\"delete\")}\n          </DropdownItem>,\n        ]\n      : []),\n  ];\n\n  return (\n    <>\n      <DisableConfirm />\n      <ViewHeader\n        titleKey={client.clientId!}\n        subKey=\"clientsExplain\"\n        badges={badges}\n        divider={false}\n        isReadOnly={!isManager}\n        helpTextKey=\"enableDisable\"\n        dropdownItems={dropdownItems}\n        isEnabled={value}\n        onToggle={(value) => {\n          if (!value) {\n            toggleDisableDialog();\n          } else {\n            onChange(value);\n            save();\n          }\n        }}\n      />\n    </>\n  );\n};\n\nexport type SaveOptions = {\n  confirmed?: boolean;\n  messageKey?: string;\n};\n\nexport type FormFields = Omit<\n  ClientRepresentation,\n  \"authorizationSettings\" | \"resources\"\n>;\n\nexport default function ClientDetails() {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const { hasAccess } = useAccess();\n  const isFeatureEnabled = useIsFeatureEnabled();\n\n  const hasManageAuthorization = hasAccess(\"manage-authorization\");\n  const hasViewAuthorization = hasAccess(\"view-authorization\");\n  const hasManageClients = hasAccess(\"manage-clients\");\n  const hasViewClients = hasAccess(\"view-clients\");\n  const hasViewUsers = hasAccess(\"view-users\");\n  const permissionsEnabled =\n    isFeatureEnabled(Feature.AdminFineGrainedAuthz) &&\n    (hasManageAuthorization || hasViewAuthorization);\n\n  const navigate = useNavigate();\n\n  const [downloadDialogOpen, toggleDownloadDialogOpen] = useToggle();\n  const [changeAuthenticatorOpen, toggleChangeAuthenticatorOpen] = useToggle();\n\n  const form = useForm<FormFields>();\n  const { clientId } = useParams<ClientParams>();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const isAdminPermissionsClient = useIsAdminPermissionsClient(clientId);\n\n  const clientAuthenticatorType = useWatch({\n    control: form.control,\n    name: \"clientAuthenticatorType\",\n    defaultValue: \"client-secret\",\n  });\n\n  const [client, setClient] = useState<ClientRepresentation>();\n\n  const loader = async () => {\n    const roles = await adminClient.clients.listRoles({ id: clientId });\n    return sortBy(roles, (role) => role.name?.toUpperCase());\n  };\n\n  const tab = (tab: ClientTab) =>\n    toClient({\n      realm,\n      clientId,\n      tab,\n    });\n\n  const settingsTab = useRoutableTab(tab(\"settings\"));\n  const keysTab = useRoutableTab(tab(\"keys\"));\n  const credentialsTab = useRoutableTab(tab(\"credentials\"));\n  const rolesTab = useRoutableTab(tab(\"roles\"));\n  const clientScopesTab = useRoutableTab(tab(\"clientScopes\"));\n  const authorizationTab = useRoutableTab(tab(\"authorization\"));\n  const serviceAccountTab = useRoutableTab(tab(\"serviceAccount\"));\n  const sessionsTab = useRoutableTab(tab(\"sessions\"));\n  const permissionsTab = useRoutableTab(tab(\"permissions\"));\n  const advancedTab = useRoutableTab(tab(\"advanced\"));\n  const eventsTab = useRoutableTab(tab(\"events\"));\n\n  const [activeEventsTab, setActiveEventsTab] = useState(\"userEvents\");\n\n  const clientScopesTabRoute = (tab: ClientScopesTab) =>\n    toClientScopesTab({\n      realm,\n      clientId,\n      tab,\n    });\n\n  const clientScopesSetupTab = useRoutableTab(clientScopesTabRoute(\"setup\"));\n  const clientScopesEvaluateTab = useRoutableTab(\n    clientScopesTabRoute(\"evaluate\"),\n  );\n\n  const authorizationTabRoute = (tab: AuthorizationTab) =>\n    toAuthorizationTab({\n      realm,\n      clientId,\n      tab,\n    });\n\n  const authorizationSettingsTab = useRoutableTab(\n    authorizationTabRoute(\"settings\"),\n  );\n  const authorizationResourcesTab = useRoutableTab(\n    authorizationTabRoute(\"resources\"),\n  );\n  const authorizationScopesTab = useRoutableTab(\n    authorizationTabRoute(\"scopes\"),\n  );\n  const authorizationPoliciesTab = useRoutableTab(\n    authorizationTabRoute(\"policies\"),\n  );\n  const authorizationPermissionsTab = useRoutableTab(\n    authorizationTabRoute(\"permissions\"),\n  );\n  const authorizationEvaluateTab = useRoutableTab(\n    authorizationTabRoute(\"evaluate\"),\n  );\n  const authorizationExportTab = useRoutableTab(\n    authorizationTabRoute(\"export\"),\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"clientDeleteConfirmTitle\",\n    messageKey: \"clientDeleteConfirm\",\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.del({ id: clientId });\n        addAlert(t(\"clientDeletedSuccess\"), AlertVariant.success);\n        navigate(toClients({ realm }));\n      } catch (error) {\n        addError(\"clientDeleteError\", error);\n      }\n    },\n  });\n\n  const setupForm = (client: ClientRepresentation) => {\n    convertToFormValues(client, form.setValue);\n    if (client.attributes?.[\"acr.loa.map\"]) {\n      form.setValue(\n        convertAttributeNameToForm(\"attributes.acr.loa.map\"),\n        // @ts-ignore\n        Object.entries(JSON.parse(client.attributes[\"acr.loa.map\"])).flatMap(\n          ([key, value]) => ({ key, value }),\n        ),\n      );\n    }\n    // reset dirty as for reason it is not resetting\n    form.reset(form.getValues(), { keepDirty: false });\n  };\n\n  useFetch(\n    () => adminClient.clients.findOne({ id: clientId }),\n    (fetchedClient) => {\n      if (!fetchedClient) {\n        throw new Error(t(\"notFound\"));\n      }\n      setClient(cloneDeep(fetchedClient));\n      setupForm(fetchedClient);\n    },\n    [clientId, key],\n  );\n\n  const save = async (\n    { confirmed = false, messageKey = \"clientSaveSuccess\" }: SaveOptions = {\n      confirmed: false,\n      messageKey: \"clientSaveSuccess\",\n    },\n  ) => {\n    if (!(await form.trigger())) {\n      return;\n    }\n\n    if (\n      !client?.publicClient &&\n      client?.clientAuthenticatorType !== clientAuthenticatorType &&\n      !confirmed\n    ) {\n      toggleChangeAuthenticatorOpen();\n      return;\n    }\n\n    const values = convertFormValuesToObject(form.getValues());\n\n    const submittedClient =\n      convertFormValuesToObject<ClientRepresentation>(values);\n\n    if (submittedClient.attributes?.[\"acr.loa.map\"]) {\n      submittedClient.attributes[\"acr.loa.map\"] = JSON.stringify(\n        Object.fromEntries(\n          (submittedClient.attributes[\"acr.loa.map\"] as KeyValueType[])\n            .filter(({ key }) => key !== \"\")\n            .map(({ key, value }) => [key, value]),\n        ),\n      );\n    }\n\n    try {\n      const newClient: ClientRepresentation = {\n        ...client,\n        ...submittedClient,\n      };\n\n      newClient.clientId = newClient.clientId?.trim();\n\n      await adminClient.clients.update({ id: clientId }, newClient);\n      setupForm(newClient);\n      setClient(newClient);\n      addAlert(t(messageKey), AlertVariant.success);\n    } catch (error) {\n      addError(\"clientSaveError\", error);\n    }\n  };\n\n  if (!client) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <ConfirmDialogModal\n        continueButtonLabel=\"yes\"\n        cancelButtonLabel=\"no\"\n        titleKey={t(\"changeAuthenticatorConfirmTitle\", {\n          clientAuthenticatorType: clientAuthenticatorType,\n        })}\n        open={changeAuthenticatorOpen}\n        toggleDialog={toggleChangeAuthenticatorOpen}\n        onConfirm={() => save({ confirmed: true })}\n      >\n        <>\n          {t(\"changeAuthenticatorConfirm\", {\n            clientAuthenticatorType: clientAuthenticatorType,\n          })}\n        </>\n      </ConfirmDialogModal>\n      <DeleteConfirm />\n      {downloadDialogOpen && (\n        <DownloadDialog\n          id={client.id!}\n          protocol={client.protocol}\n          open\n          toggleDialog={toggleDownloadDialogOpen}\n        />\n      )}\n      <Controller\n        name=\"enabled\"\n        control={form.control}\n        defaultValue={true}\n        render={({ field }) => (\n          <ClientDetailHeader\n            value={field.value}\n            onChange={field.onChange}\n            client={client}\n            save={save}\n            toggleDeleteDialog={toggleDeleteDialog}\n            toggleDownloadDialog={toggleDownloadDialogOpen}\n          />\n        )}\n      />\n      <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n        <FormProvider {...form}>\n          <RoutableTabs\n            data-testid=\"client-tabs\"\n            aria-label=\"client-tabs\"\n            isBox\n            mountOnEnter\n          >\n            <Tab\n              id=\"settings\"\n              data-testid=\"clientSettingsTab\"\n              title={<TabTitleText>{t(\"settings\")}</TabTitleText>}\n              {...settingsTab}\n            >\n              <ClientSettings\n                client={client}\n                save={() => save()}\n                reset={() => setupForm(client)}\n              />\n            </Tab>\n            {((!client.publicClient && !isRealmClient(client)) ||\n              client.protocol === \"saml\") && (\n              <Tab\n                id=\"keys\"\n                data-testid=\"keysTab\"\n                title={<TabTitleText>{t(\"keys\")}</TabTitleText>}\n                {...keysTab}\n              >\n                {client.protocol === \"openid-connect\" && (\n                  <Keys\n                    clientId={clientId}\n                    save={save}\n                    refresh={refresh}\n                    hasConfigureAccess={client.access?.configure}\n                  />\n                )}\n                {client.protocol === \"saml\" && (\n                  <SamlKeys clientId={clientId} save={save} />\n                )}\n              </Tab>\n            )}\n            {!client.publicClient &&\n              !isRealmClient(client) &&\n              (hasViewClients ||\n                client.access?.configure ||\n                client.access?.view) && (\n                <Tab\n                  id=\"credentials\"\n                  title={<TabTitleText>{t(\"credentials\")}</TabTitleText>}\n                  {...credentialsTab}\n                >\n                  <Credentials\n                    key={key}\n                    client={client}\n                    save={save}\n                    refresh={refresh}\n                  />\n                </Tab>\n              )}\n            <Tab\n              id=\"roles\"\n              data-testid=\"rolesTab\"\n              title={<TabTitleText>{t(\"roles\")}</TabTitleText>}\n              {...rolesTab}\n            >\n              <RolesList\n                loader={loader}\n                paginated={false}\n                messageBundle=\"client\"\n                toCreate={toCreateRole({ realm, clientId: client.id! })}\n                toDetail={(roleId) =>\n                  toClientRole({\n                    realm,\n                    clientId: client.id!,\n                    id: roleId,\n                    tab: \"details\",\n                  })\n                }\n                isReadOnly={!(hasManageClients || client.access?.configure)}\n              />\n            </Tab>\n            {!isRealmClient(client) && !client.bearerOnly && (\n              <Tab\n                id=\"clientScopes\"\n                data-testid=\"clientScopesTab\"\n                title={<TabTitleText>{t(\"clientScopes\")}</TabTitleText>}\n                {...clientScopesTab}\n              >\n                <RoutableTabs\n                  defaultLocation={toClientScopesTab({\n                    realm,\n                    clientId,\n                    tab: \"setup\",\n                  })}\n                  mountOnEnter\n                  unmountOnExit\n                >\n                  <Tab\n                    id=\"setup\"\n                    data-testid=\"clientScopesSetupTab\"\n                    title={<TabTitleText>{t(\"setup\")}</TabTitleText>}\n                    {...clientScopesSetupTab}\n                  >\n                    <ClientScopes\n                      clientName={client.clientId!}\n                      clientId={clientId}\n                      protocol={client!.protocol!}\n                      fineGrainedAccess={client!.access?.manage}\n                    />\n                  </Tab>\n                  <Tab\n                    id=\"evaluate\"\n                    data-testid=\"clientScopesEvaluateTab\"\n                    title={<TabTitleText>{t(\"evaluate\")}</TabTitleText>}\n                    {...clientScopesEvaluateTab}\n                  >\n                    <EvaluateScopes\n                      clientId={clientId}\n                      protocol={client!.protocol!}\n                    />\n                  </Tab>\n                </RoutableTabs>\n              </Tab>\n            )}\n            {client!.authorizationServicesEnabled &&\n              !isAdminPermissionsClient &&\n              (hasManageAuthorization || hasViewAuthorization) && (\n                <Tab\n                  id=\"authorization\"\n                  data-testid=\"authorizationTab\"\n                  title={<TabTitleText>{t(\"authorization\")}</TabTitleText>}\n                  {...authorizationTab}\n                >\n                  <RoutableTabs\n                    mountOnEnter\n                    unmountOnExit\n                    defaultLocation={toAuthorizationTab({\n                      realm,\n                      clientId,\n                      tab: \"settings\",\n                    })}\n                  >\n                    <Tab\n                      id=\"settings\"\n                      data-testid=\"authorizationSettings\"\n                      title={<TabTitleText>{t(\"settings\")}</TabTitleText>}\n                      {...authorizationSettingsTab}\n                    >\n                      <AuthorizationSettings clientId={clientId} />\n                    </Tab>\n                    <Tab\n                      id=\"resources\"\n                      data-testid=\"authorizationResources\"\n                      title={<TabTitleText>{t(\"resources\")}</TabTitleText>}\n                      {...authorizationResourcesTab}\n                    >\n                      <AuthorizationResources\n                        clientId={clientId}\n                        isDisabled={!hasManageAuthorization}\n                      />\n                    </Tab>\n                    <Tab\n                      id=\"scopes\"\n                      data-testid=\"authorizationScopes\"\n                      title={<TabTitleText>{t(\"scopes\")}</TabTitleText>}\n                      {...authorizationScopesTab}\n                    >\n                      <AuthorizationScopes\n                        clientId={clientId}\n                        isDisabled={!hasManageAuthorization}\n                      />\n                    </Tab>\n                    <Tab\n                      id=\"policies\"\n                      data-testid=\"authorizationPolicies\"\n                      title={<TabTitleText>{t(\"policies\")}</TabTitleText>}\n                      {...authorizationPoliciesTab}\n                    >\n                      <AuthorizationPolicies\n                        clientId={clientId}\n                        isDisabled={!hasManageAuthorization}\n                      />\n                    </Tab>\n                    <Tab\n                      id=\"permissions\"\n                      data-testid=\"authorizationPermissions\"\n                      title={<TabTitleText>{t(\"permissions\")}</TabTitleText>}\n                      {...authorizationPermissionsTab}\n                    >\n                      <AuthorizationPermissions\n                        clientId={clientId}\n                        isDisabled={!hasManageAuthorization}\n                      />\n                    </Tab>\n                    {hasViewUsers && (\n                      <Tab\n                        id=\"evaluate\"\n                        data-testid=\"authorizationEvaluate\"\n                        title={<TabTitleText>{t(\"evaluate\")}</TabTitleText>}\n                        {...authorizationEvaluateTab}\n                      >\n                        <AuthorizationEvaluate client={client} save={save} />\n                      </Tab>\n                    )}\n                    {hasAccess(\"manage-authorization\") && (\n                      <Tab\n                        id=\"export\"\n                        data-testid=\"authorizationExport\"\n                        title={<TabTitleText>{t(\"export\")}</TabTitleText>}\n                        {...authorizationExportTab}\n                      >\n                        <AuthorizationExport />\n                      </Tab>\n                    )}\n                  </RoutableTabs>\n                </Tab>\n              )}\n            {client!.serviceAccountsEnabled && hasViewUsers && (\n              <Tab\n                id=\"serviceAccount\"\n                data-testid=\"serviceAccountTab\"\n                title={<TabTitleText>{t(\"serviceAccount\")}</TabTitleText>}\n                {...serviceAccountTab}\n              >\n                <ServiceAccount client={client} />\n              </Tab>\n            )}\n            <Tab\n              id=\"sessions\"\n              data-testid=\"sessionsTab\"\n              title={<TabTitleText>{t(\"sessions\")}</TabTitleText>}\n              {...sessionsTab}\n            >\n              <ClientSessions client={client} />\n            </Tab>\n            {permissionsEnabled &&\n              (hasManageClients || client.access?.manage) && (\n                <Tab\n                  id=\"permissions\"\n                  data-testid=\"permissionsTab\"\n                  title={<TabTitleText>{t(\"permissions\")}</TabTitleText>}\n                  {...permissionsTab}\n                >\n                  <PermissionsTab id={client.id!} type=\"clients\" />\n                </Tab>\n              )}\n            <Tab\n              id=\"advanced\"\n              data-testid=\"advancedTab\"\n              title={<TabTitleText>{t(\"advanced\")}</TabTitleText>}\n              {...advancedTab}\n            >\n              <AdvancedTab save={save} client={client} />\n            </Tab>\n            {hasAccess(\"view-events\") && (\n              <Tab\n                data-testid=\"events-tab\"\n                title={<TabTitleText>{t(\"events\")}</TabTitleText>}\n                {...eventsTab}\n              >\n                <Tabs\n                  activeKey={activeEventsTab}\n                  onSelect={(_, key) => setActiveEventsTab(key as string)}\n                >\n                  <Tab\n                    eventKey=\"userEvents\"\n                    title={<TabTitleText>{t(\"userEvents\")}</TabTitleText>}\n                  >\n                    <UserEvents client={client.clientId} />\n                  </Tab>\n                  <Tab\n                    eventKey=\"adminEvents\"\n                    title={<TabTitleText>{t(\"adminEvents\")}</TabTitleText>}\n                  >\n                    <AdminEvents resourcePath={`clients/${client.id}`} />\n                  </Tab>\n                </Tabs>\n              </Tab>\n            )}\n          </RoutableTabs>\n        </FormProvider>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["styles","CodeBlock","_a","children","className","actions","props","__rest","React","css","CodeBlockAction","DownloadDialog","id","open","toggleDialog","protocol","adminClient","useAdminClient","realm","useRealm","t","useTranslation","enabled","useHelp","configFormats","useServerInfo","selected","setSelected","useState","snippet","setSnippet","openType","setOpenType","selectedConfig","useMemo","config","sanitizeSnippet","useFetch","fetchWithError","addTrailingSlash","getAuthorizationHeaders","prettyPrintJSON","useEffect","jsx","ConfirmDialogModal","saveAs","ModalVariant","Form","jsxs","Stack","StackItem","FormGroup","HelpItem","Select","isOpen","ref","MenuToggle","_","value","SelectList","configFormat","SelectOption","TextArea","inherited","expires","TokenLifespan","name","defaultValue","units","setOpen","focused","setFocused","onFocus","onBlur","control","useFormContext","isExpireSet","Controller","field","Split","SplitItem","TimeSelector","AdvancedSettings","save","reset","hasConfigureAccess","isDPoPEnabled","useIsFeatureEnabled","Feature","FormAccess","convertAttributeNameToForm","Fragment","DefaultSwitchControl","v","KeyValueInput","MultiLineInput","TextControl","ActionGroup","Button","AuthenticationOverrides","flows","setFlows","filteredFlows","flow","sortBy","f","SelectControl","alias","TimeSelectorForm","useController","AddHostDialog","onAdded","onClose","form","useForm","handleSubmit","isDirty","isValid","addAlert","addError","useAlerts","onSubmit","node","AlertVariant","error","Modal","ButtonVariant","FormProvider","ClusteringPanel","registeredNodes","access","formatDate","useFormatDate","nodes","setNodes","expanded","setExpanded","selectedNode","setSelectedNode","addNodeOpen","setAddNodeOpen","key","setKey","refresh","testCluster","result","parseResult","toggleDeleteNodeConfirm","DeleteNodeConfirm","useConfirmDialog","object","ExpandableSection","_event","val","KeycloakDataTable","entry","ToolbarItem","FORMAT_DATE_AND_TIME","ListEmptyState","ApplicationUrls","FineGrainOpenIdConnect","providers","clientSignatureProviders","contentEncryptionProviders","cekManagementProviders","signatureProviders","convert","list","sortProviders","i","prependEmpty","prependAny","prependNone","Switch","p","FineGrainSamlEndpointConfig","OpenIdConnectCompatibilityModes","watch","isFeatureEnabled","tokenExchangeEnabled","useRefreshTokens","prefixKey","successCount","failedCount","AdvancedTab","client","openIdConnect","setValue","publicClient","attributes","authenticationFlowBindingOverrides","resetFields","names","PageSection","ScrollForm","Text","toUpperCase","ClientSessions","SessionsTable","first","max","search","fetchAdminUI","AccessSettings","hasAccess","useAccess","isManager","LoginSettings","FixedButtonsGroup","LoginSettingsPanel","loginThemes","consentRequired","displayOnConsentScreen","TextAreaControl","validateUrl","uri","LogoutPanel","frontchannelLogout","frontchannelLogoutTooltip","ClientSettings","ClientDescription","SamlConfig","SamlSignature","CapabilityConfig","ValueInput","rowIndex","attribute","selectableValues","resources","register","getValues","isValueOpenArray","setIsValueOpenArray","toggleValueSelect","arr","attributeValues","values","defaultContextAttributes","attr","renderSelectOptionType","scopeValues","resource","scope","getMessageBundleKey","attributeName","camelCase","Td","KeycloakSelect","SelectVariant","TextInput","KeyBasedAttributeInput","fields","append","remove","useFieldArray","isKeyOpenArray","setIsKeyOpenArray","toggleKeySelect","watchLastValue","Table","Thead","Tr","Th","Tbody","MinusCircleIcon","PlusCircleIcon","AuthorizationDataModal","data","show","toggle","useToggle","TextContent","TextVariants","AuthorizationEvaluateResourcePolicies","idx","outerPolicy","clientId","useParams","prev","Link","toPermissionDetails","DecisionEffect","ExpandableRowContent","DescriptionList","TextList","item","TextListItem","toPolicyDetails","capitalize","AuthorizationEvaluateResource","evaluateResults","filterResults","results","filter","status","Results","evaluateResult","back","filterDropdownOpen","toggleFilterDropdown","setFilter","searchQuery","setSearchQuery","searchInput","setSearchInput","confirmSearchQuery","handleKeyDown","e","filteredResources","noEvaluatedData","noFilteredData","Toolbar","ToolbarGroup","InputGroup","InputGroupItem","SearchIcon","Divider","AuthorizationEvaluate","AuthorizationEvaluateContent","ForbiddenSection","trigger","isExpanded","setIsExpanded","applyToResourceType","setApplyToResourceType","setResources","scopes","setScopes","setEvaluateResult","clientRoles","setClientRoles","roles","evaluate","formValues","keys","keyValueToArray","resEval","r","s","evaluation","Panel","PanelHeader","Title","PanelMainBody","ClientSelect","UserSelect","role","AuthorizationExport","code","setCode","authorizationDetails","setAuthorizationDetails","authDetails","exportAuthDetails","CodeEditor","KeycloakSpinner","EmptyButton","permissionType","disabled","navigate","useNavigate","toNewPermission","TooltipEmptyButton","Tooltip","EmptyPermissionsState","isResourceEnabled","isScopeEnabled","EmptyState","EmptyStateHeader","EmptyStateIcon","EmptyStateBody","EmptyStateFooter","AssociatedPoliciesRenderer","row","MoreLabel","AuthorizationPermissions","isDisabled","permissions","setPermissions","selectedPermission","setSelectedPermission","policyProviders","setPolicyProviders","disabledCreate","setDisabledCreate","createOpen","toggleCreate","setSearch","setMax","setFirst","permission","associatedPolicies","params","policies","toggleDeleteDialog","DeleteConfirm","noData","searching","PaginatingTableToolbar","SearchDropdown","Dropdown","DropdownList","DropdownItem","Alert","rows","index","DetailDescriptionLink","DetailCell","uris","setScope","DetailDescription","toScopeDetails","UriRenderer","TableText","AuthorizationResources","selectedResource","setSelectedResource","setPermission","fetchPermissions","toCreateResource","toResourceDetails","AuthorizationScopes","deleteDialog","selectedScope","setSelectedScope","collapsed","setCollapsed","getScope","c","newlyOpened","resourcesScopes","resourceScope","DeleteScopeDialog","toNewScope","ImportDialog","onConfirm","closeDialog","imported","setImported","JsonFileUpload","Radio","POLICY_ENFORCEMENT_MODES","AuthorizationSettings","setResource","importDialog","toggleImportDialog","importResource","mode","DecisionStrategySelect","SecretInput","buttonLabel","secret","PasswordInput","CopyToClipboardButton","ExpireDateFormatter","time","ClientSecret","secretRotated","setSecretRotated","secretExpirationTime","secretRotatedExpirationTime","expired","toggleInvalidateConfirm","InvalidateConfirm","SignedJWT","clientAuthenticatorType","cryptoInfo","option","X509","Credentials","setProviders","useWatch","setSecret","accessToken","setAccessToken","selectedProvider","provider","componentTypes","providerProperties","regenerate","call","message","regenerateClientSecret","toggleClientSecretConfirm","ClientSecretConfirm","regenerateAccessToken","toggleAccessTokenConfirm","AccessTokenConfirm","Card","CardBody","displayName","DynamicComponents","ClipboardCopy","CertificateDisplay","keyInfo","Certificate","plain","useId","StoreSettings","hidePassword","isSaml","PasswordControl","CERT_PEM","extensions","getFileExtension","format","KeyForm","hasPem","useFile","filename","setFilename","supportedKeystoreTypes","FileUpload","file","GenerateKeyDialog","ImportKeyDialog","setFile","baseFormats","formats","importFile","Keys","refreshParent","setKeyInfo","openGenerateKeys","toggleOpenGenerateKeys","setOpenGenerateKeys","openImportKeys","toggleOpenImportKeys","setOpenImportKeys","useJwksUrl","info","generate","keyStore","importKey","formData","rest","CardHeader","CardTitle","ExportSamlKeyDialog","close","keyType","download","submitForm","callback","SamlKeysDialog","onCancel","type","setType","setKeys","submit","Flex","FlexItem","SamlImportKeyDialog","KEYS","KEYS_MAPPING","KeySection","onChanged","onGenerate","onImport","title","showImportDialog","section","FormPanel","SamlKeys","isChanged","setIsChanged","selectedType","setSelectedType","openImport","setImportOpen","setRefresh","toggleDisableDialog","DisableConfirm","toggleReGenerateDialog","ReGenerateConfirm","isNew","DEDICATED_ROW","TypeSelector","fineGrainedAccess","isDedicatedRow","CellDropdown","changeClientScope","ClientScopes","clientName","localeSort","useLocaleSort","searchType","setSearchType","searchTypeType","setSearchTypeType","AllClientScopes","addDialogOpen","setAddDialogOpen","setRest","selectedRows","setSelectedRowState","setSelectedRows","kebabOpen","setKebabOpen","isViewer","loader","defaultClientScopes","optionalClientScopes","clientScopes","find","clientScope","optional","ClientScope","defaultScopes","mapByKey","nameFilter","typeFilter","firstNum","removeClientScope","AddScopeDialog","addClientScope","SearchToolbar","ChangeTypeDropdown","EllipsisVIcon","toDedicatedScope","translationFormatter","GeneratedCodeTab","text","user","label","ProtocolMappers","protocolMappers","EffectiveRoles","effectiveRoles","EvaluateScopes","prefix","mapperTypes","selectableScopes","setSelectableScopes","isScopeOpen","setIsScopeOpen","activeTab","setActiveTab","setEffectiveRoles","setProtocolMappers","userInfo","setUserInfo","idToken","setIdToken","tabContent1","useRef","tabContent2","tabContent3","tabContent4","tabContent5","selectedAudience","hasViewUsers","mapperList","mapper","audience","QuestionCircleIcon","Grid","GridItem","TabContent","Tabs","Tab","TabTitleText","ServiceAccount","serviceAccount","setServiceAccount","hasManageClients","assignRoles","realmRoles","InfoCircleIcon","Trans","toUser","RoleMapping","ClientDetailHeader","onChange","toggleDownloadDialog","badges","protocolName","getProtocolName","Label","dropdownItems","exportClient","isRealmClient","ViewHeader","ClientDetails","hasManageAuthorization","hasViewAuthorization","hasViewClients","permissionsEnabled","downloadDialogOpen","toggleDownloadDialogOpen","changeAuthenticatorOpen","toggleChangeAuthenticatorOpen","isAdminPermissionsClient","useIsAdminPermissionsClient","setClient","tab","toClient","settingsTab","useRoutableTab","keysTab","credentialsTab","rolesTab","clientScopesTab","authorizationTab","serviceAccountTab","sessionsTab","permissionsTab","advancedTab","eventsTab","activeEventsTab","setActiveEventsTab","clientScopesTabRoute","toClientScopesTab","clientScopesSetupTab","clientScopesEvaluateTab","authorizationTabRoute","toAuthorizationTab","authorizationSettingsTab","authorizationResourcesTab","authorizationScopesTab","authorizationPoliciesTab","authorizationPermissionsTab","authorizationEvaluateTab","authorizationExportTab","toClients","setupForm","fetchedClient","cloneDeep","confirmed","messageKey","convertFormValuesToObject","submittedClient","newClient","RoutableTabs","RolesList","toCreateRole","roleId","toClientRole","AuthorizationPolicies","PermissionsTab","UserEvents","AdminEvents"],"mappings":"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","x_google_ignoreList":[0,1,2]}