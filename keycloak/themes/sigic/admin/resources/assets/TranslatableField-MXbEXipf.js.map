{"version":3,"file":"TranslatableField-MXbEXipf.js","sources":["../../../../../../../../../node_modules/.pnpm/@patternfly+react-icons@5.4.2_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-icons/dist/esm/icons/globe-route-icon.js","../../../../../../../src/realm-settings/user-profile/attribute/AddTranslationsDialog.tsx","../../../../../../../src/realm-settings/user-profile/attribute/TranslatableField.tsx"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const GlobeRouteIconConfig = {\n  name: 'GlobeRouteIcon',\n  height: 1024,\n  width: 1306,\n  svgPath: 'M1300.9,363.7 L1179,485.8 C1169,495.9 1151.7,488.8 1151.7,474.5 L1151.7,416 L816.4,416 C812.4,416 809,413.8 808.5,409.8 C805.3,386 801,362.733333 795.6,340 C792.3,326 788.5,312.4 784.4,299.2 C782.8,294 786.6,288 792,288 L1151.5,288 L1151.5,230.6 C1151.5,216.4 1168.7,209.2 1178.8,219.3 L1300.8,341 C1303.9,344.1 1306,348.2 1306,352.3 C1306,356.4 1303.9,360.5 1300.9,363.7 Z M469.2,746.7 L347.3,868.8 C337.3,878.9 320,871.8 320,857.5 L320,800 L16,800 C7.2,800 0,792.3 0,783.5 L0,687.5 C0,678.7 7.2,672 16,672 L320,672 L320,613.8 C320,599.6 337.2,592.4 347.3,602.5 L469.2,724.1 C475.430133,730.34524 475.430133,740.45476 469.2,746.7 Z M1087.6,495.6 C1087.38293,486.920039 1080.28267,479.997286 1071.6,480 L640,480 L640,352 L722.2,352 C727.4,352 731.3,346.5 729.9,341.5 C725.605596,325.013205 720.465463,308.75837 714.5,292.8 C713.258024,289.782121 710.260604,287.863772 707,288 L640,288 L640,101.7 C652.442178,106.259896 664.111225,112.70148 674.6,120.8 C699.3,139.4 723,168.1 743.1,203.9 C746.5,210 751.7,218.7 761.1,218.7 L809.4,218.7 C812.128705,218.672447 814.65964,217.271114 816.131205,214.973053 C817.602771,212.674992 817.816638,209.789922 816.7,207.3 C804.114384,179.721505 788.769504,153.487791 770.9,129 C818.290474,149.304728 861.543068,178.15109 898.5,214.1 C901.47783,216.980555 905.45693,218.593703 909.6,218.6 L971.4,218.6 C974.505675,218.614157 977.338903,216.829582 978.667492,214.022401 C979.996082,211.21522 979.579921,207.892766 977.6,205.5 C889.8,100 757.8,32.6 609.9,32 L605.5,32 C342.5,33.4 128,251.4 128,514.8 L128,528 C128,538.8 132.7,582.4 136.2,601 C136.9,604.8 140.2,608 144.1,608 L193,608 C198.1,608 201.9,602.8 200.8,597.8 C197.100285,580.050867 194.561569,562.079428 193.2,544 L576,544 L576,672 L533.4,672 C530.21925,671.879321 527.2913,673.725708 526.029429,676.647935 C524.767558,679.570163 525.43119,682.96746 527.7,685.2 L566.6,724.2 C572.610093,730.186212 575.992058,738.317319 576,746.8 L576,922.3 C563.557822,917.740104 551.888775,911.29852 541.4,903.2 C521.8,888.5 502.9,867.3 485.8,841.4 C484.483494,839.398843 482.339547,838.092908 479.95744,837.84114 C477.575334,837.589373 475.205755,838.418269 473.5,840.1 L438.9,874.7 C436.17839,877.437565 435.799809,881.728158 438,884.9 C440.4,888.3 442.8,891.7 445.2,895 C440.7,893.1 436.3,891.1 431.9,889.1 C428.86068,887.698101 425.269908,888.336461 422.9,890.7 L387,926.5 C385.206339,928.31874 384.380991,930.880062 384.775333,933.403854 C385.169676,935.927646 386.737022,938.11511 389,939.3 C456.763878,974.049946 531.84563,992.117563 608,992.00057 C862.3,992.00057 1070.5,794.3 1087,544.1 C1087.7,533.5 1088,522.9 1088,512.1 L1087.6,495.6 Z M338.6,480 L193.2,480 C196.476568,435.937781 206.913411,392.704253 224.1,352 L353.5,352 C345.141453,394.203188 340.159019,437.005305 338.6,480 L338.6,480 Z M257.8,288 C273.983601,262.695367 292.787318,239.165581 313.9,217.8 C351.55,180.03315 396.130875,149.88249 445.2,129 C413.9,171.2 387.8,225.9 369.3,288 L257.8,288 Z M576,480 L402.6,480 C404.246384,436.941681 409.667166,394.110815 418.8,352 L576,352 L576,480 Z M576,288 L436.4,288 C446.6,257.5 458.8,229.1 472.9,204 C493,168.2 516.7,139.5 541.4,120.9 C551.888775,112.80148 563.557822,106.359896 576,101.8 L576,288 Z M575.8,87.6 L576.7,87.6 L576.7,86.7 L575.8,86.7 L575.8,87.6 Z M640,544 L813.4,544 C811.819116,587.052386 806.465269,629.883162 797.4,672 L640,672 L640,544 Z M674.6,903.1 C664.111225,911.19852 652.442178,917.640104 640,922.2 L640,736 L779.9,736 C770.41424,765.137744 758.088355,793.272917 743.1,820 C723,855.8 699.3,884.6 674.6,903.1 L674.6,903.1 Z M902.2,806.2 C864.55,843.96685 819.969125,874.11751 770.9,895 C802.3,852.5 828.4,798.1 847,735.5 L959,735.5 C942.666041,761.042003 923.622375,784.746003 902.2,806.2 L902.2,806.2 Z M992.3,671.5 L862.7,671.5 C870.9358,629.451226 875.850963,586.819718 877.4,544 L1022.8,544 C1019.55195,587.863016 1009.25313,630.915455 992.3,671.5 L992.3,671.5 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const GlobeRouteIcon = createIcon(GlobeRouteIconConfig);\n\nexport default GlobeRouteIcon;","import {\n  ListEmptyState,\n  PaginatingTableToolbar,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  Label,\n  Modal,\n  ModalVariant,\n  Text,\n  TextContent,\n  TextInput,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport { Table, Tbody, Td, Th, Thead, Tr } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../../admin-client\";\nimport { useRealm } from \"../../../context/realm-context/RealmContext\";\nimport { useWhoAmI } from \"../../../context/whoami/WhoAmI\";\nimport { beerify, localeToDisplayName } from \"../../../util\";\nimport useLocale from \"../../../utils/useLocale\";\nimport { Translation, TranslationForm } from \"./TranslatableField\";\n\ntype AddTranslationsDialogProps = {\n  orgKey: string;\n  translationKey: string;\n  fieldName: string;\n  toggleDialog: () => void;\n};\n\nexport const AddTranslationsDialog = ({\n  orgKey,\n  translationKey,\n  fieldName,\n  toggleDialog,\n}: AddTranslationsDialogProps) => {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation();\n  const { realm: realmName, realmRepresentation: realm } = useRealm();\n  const combinedLocales = useLocale();\n  const { whoAmI } = useWhoAmI();\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [filter, setFilter] = useState(\"\");\n  const [translations, setTranslations] = useState<TranslationForm[]>([]);\n  const prefix = `translation.${beerify(translationKey)}`;\n\n  const {\n    register,\n    setValue,\n    getValues,\n    formState: { isValid },\n  } = useFormContext();\n\n  const setupForm = (translation: Translation) => {\n    translation[translationKey].forEach((translation, rowIndex) => {\n      const valueKey = `${prefix}.${rowIndex}.value`;\n      setValue(`${prefix}.${rowIndex}.locale`, translation.locale || \"\");\n      setValue(\n        valueKey,\n        getValues(valueKey) ||\n          translation.value ||\n          (t(orgKey) !== orgKey ? t(orgKey) : \"\"),\n      );\n    });\n  };\n\n  useFetch(\n    async () => {\n      const selectedLocales = combinedLocales\n        .filter((l) =>\n          localeToDisplayName(l, whoAmI.getLocale())\n            ?.toLocaleLowerCase(realm?.defaultLocale)\n            ?.includes(filter.toLocaleLowerCase(realm?.defaultLocale)),\n        )\n        .slice(first, first + max + 1);\n\n      const results = await Promise.all(\n        selectedLocales.map((selectedLocale) =>\n          adminClient.realms.getRealmLocalizationTexts({\n            realm: realmName,\n            selectedLocale,\n          }),\n        ),\n      );\n\n      return results.map((result, index) => ({\n        locale: selectedLocales[index],\n        value: result[translationKey],\n      }));\n    },\n    (fetchedData) => {\n      setTranslations(fetchedData);\n      setupForm({ [translationKey]: fetchedData });\n    },\n    [combinedLocales, first, max, filter],\n  );\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"addTranslationsModalTitle\")}\n      isOpen\n      onClose={toggleDialog}\n      actions={[\n        <Button\n          key=\"ok\"\n          data-testid=\"okTranslationBtn\"\n          variant=\"primary\"\n          form=\"add-translation\"\n          isDisabled={!isValid}\n          onClick={toggleDialog}\n        >\n          {t(\"addTranslationDialogOkBtn\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          data-testid=\"cancelTranslationBtn\"\n          variant=\"link\"\n          onClick={() => {\n            setupForm({ [translationKey]: translations });\n            toggleDialog();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <Flex\n        direction={{ default: \"column\" }}\n        spaceItems={{ default: \"spaceItemsNone\" }}\n      >\n        <FlexItem>\n          <Trans\n            i18nKey=\"addTranslationsModalTitle\"\n            values={{ fieldName: t(fieldName) }}\n          >\n            You are able to translate the fieldName based on your locale or\n            <strong>location</strong>\n          </Trans>\n        </FlexItem>\n        <FlexItem>\n          <Form id=\"add-translation\" data-testid=\"addTranslationForm\">\n            <FormGroup label={t(\"translationKey\")} fieldId=\"translationKey\">\n              <TextInput\n                id=\"translationKey\"\n                label={t(\"translationKey\")}\n                data-testid=\"translation-key\"\n                isDisabled\n                value={t(orgKey) !== orgKey ? `\\${${orgKey}}` : translationKey}\n              />\n            </FormGroup>\n            <FlexItem>\n              <TextContent>\n                <Text\n                  className=\"pf-v5-u-font-size-sm pf-v5-u-font-weight-bold\"\n                  component={TextVariants.p}\n                >\n                  {t(\"translationsTableHeading\")}\n                </Text>\n              </TextContent>\n              <PaginatingTableToolbar\n                count={translations.length}\n                first={first}\n                max={max}\n                onNextClick={setFirst}\n                onPreviousClick={setFirst}\n                onPerPageSelect={(first, max) => {\n                  setFirst(first);\n                  setMax(max);\n                }}\n                inputGroupName={\"search\"}\n                inputGroupOnEnter={(search) => {\n                  setFilter(search);\n                  setFirst(0);\n                  setMax(10);\n                }}\n                inputGroupPlaceholder={t(\"searchForLanguage\")}\n              >\n                {translations.length === 0 && filter && (\n                  <ListEmptyState\n                    hasIcon\n                    icon={SearchIcon}\n                    isSearchVariant\n                    message={t(\"noSearchResults\")}\n                    instructions={t(\"noLanguagesSearchResultsInstructions\")}\n                  />\n                )}\n                {translations.length !== 0 && (\n                  <Table\n                    aria-label={t(\"addTranslationsDialogRowsTable\")}\n                    data-testid=\"add-translations-dialog-rows-table\"\n                  >\n                    <Thead>\n                      <Tr>\n                        <Th className=\"pf-v5-u-py-lg\">\n                          {t(\"supportedLanguagesTableColumnName\")}\n                        </Th>\n                        <Th className=\"pf-v5-u-py-lg\">\n                          {t(\"translationTableColumnName\")}\n                        </Th>\n                      </Tr>\n                    </Thead>\n                    <Tbody>\n                      {translations.slice(0, max).map((translation, index) => (\n                        <Tr key={index}>\n                          <Td dataLabel={t(\"supportedLanguage\")}>\n                            {localeToDisplayName(\n                              translation.locale,\n                              whoAmI.getLocale(),\n                            )}\n                            {translation.locale === realm?.defaultLocale && (\n                              <Label className=\"pf-v5-u-ml-xs\" color=\"blue\">\n                                {t(\"defaultLanguage\")}\n                              </Label>\n                            )}\n                          </Td>\n                          <Td>\n                            <TextInput\n                              id={`${prefix}.${index}.value`}\n                              data-testid={`translation-value-${index}`}\n                              {...register(`${prefix}.${index}.value`, {\n                                required: {\n                                  value:\n                                    translation.locale === realm?.defaultLocale,\n                                  message: t(\"required\"),\n                                },\n                              })}\n                            />\n                          </Td>\n                        </Tr>\n                      ))}\n                    </Tbody>\n                  </Table>\n                )}\n              </PaginatingTableToolbar>\n            </FlexItem>\n          </Form>\n        </FlexItem>\n      </Flex>\n    </Modal>\n  );\n};\n","import KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\nimport RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { FormErrorText } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Alert,\n  Button,\n  FormHelperText,\n  InputGroup,\n  InputGroupItem,\n  TextInput,\n} from \"@patternfly/react-core\";\nimport { GlobeRouteIcon } from \"@patternfly/react-icons\";\nimport { TFunction } from \"i18next\";\nimport { useEffect } from \"react\";\nimport { useFormContext, useWatch } from \"react-hook-form\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { useRealm } from \"../../../context/realm-context/RealmContext\";\nimport { i18n } from \"../../../i18n/i18n\";\nimport { beerify, debeerify } from \"../../../util\";\nimport useToggle from \"../../../utils/useToggle\";\nimport { AddTranslationsDialog } from \"./AddTranslationsDialog\";\n\nexport type TranslationForm = {\n  locale: string;\n  value: string;\n};\n\nexport type Translation = Record<string, TranslationForm[]>;\n\nexport type Translations = {\n  translation: Translation;\n};\n\ntype SaveTranslationsProps = {\n  adminClient: KeycloakAdminClient;\n  realmName: string;\n  translationsData: Translations;\n};\n\nexport const saveTranslations = async ({\n  adminClient,\n  realmName,\n  translationsData,\n}: SaveTranslationsProps) => {\n  await Promise.all(\n    Object.entries(translationsData.translation)\n      .map(([key, translation]) =>\n        translation\n          .filter((translation) => translation.value.trim() !== \"\")\n          .map((translation) =>\n            adminClient.realms.addLocalization(\n              {\n                realm: realmName,\n                selectedLocale: translation.locale,\n                key: debeerify(key),\n              },\n              translation.value,\n            ),\n          ),\n      )\n      .flat(),\n  );\n  await i18n.reloadResources();\n};\n\ntype TranslatableFieldProps = {\n  attributeName: string;\n  prefix: string;\n  fieldName: string;\n};\n\nfunction hasTranslation(value: string, t: TFunction) {\n  return t(value) === value && value !== \"\";\n}\n\nfunction isTranslationRequired(\n  value: string,\n  t: TFunction,\n  realm?: RealmRepresentation,\n) {\n  return realm?.internationalizationEnabled && hasTranslation(value, t);\n}\n\nexport const TranslatableField = ({\n  attributeName,\n  prefix,\n  fieldName,\n}: TranslatableFieldProps) => {\n  const { t } = useTranslation();\n  const { realmRepresentation: realm } = useRealm();\n  const { register, control, getFieldState, setValue } = useFormContext();\n  const [open, toggle] = useToggle();\n\n  const value = useWatch({ control, name: attributeName });\n\n  const key = `${prefix}.${value}`;\n  const translationPrefix = `translation.${beerify(key)}`;\n  const requiredTranslationName = `${translationPrefix}.0.value`;\n\n  useEffect(() => {\n    if (isTranslationRequired(value, t, realm)) {\n      setValue(fieldName, `\\${${prefix}.${value}}`);\n    }\n  }, [value]);\n\n  return (\n    <>\n      {isTranslationRequired(value, t, realm) && (\n        <input\n          type=\"hidden\"\n          data-testid=\"requiredTranslationName\"\n          {...register(requiredTranslationName, { required: t(\"required\") })}\n        />\n      )}\n      {open && (\n        <AddTranslationsDialog\n          orgKey={value}\n          translationKey={`${prefix}.${value}`}\n          fieldName={fieldName}\n          toggleDialog={toggle}\n        />\n      )}\n      <InputGroup>\n        <InputGroupItem isFill>\n          <TextInput\n            id={`kc-attribute-${fieldName}`}\n            data-testid={`attributes-${fieldName}`}\n            isDisabled={realm?.internationalizationEnabled}\n            {...register(fieldName)}\n          />\n        </InputGroupItem>\n        {realm?.internationalizationEnabled && (\n          <InputGroupItem>\n            <Button\n              variant=\"link\"\n              className=\"pf-m-plain\"\n              data-testid={`addAttribute${fieldName}TranslationBtn`}\n              aria-label={t(\"addAttributeTranslation\", { fieldName })}\n              onClick={toggle}\n              icon={<GlobeRouteIcon />}\n            />\n          </InputGroupItem>\n        )}\n      </InputGroup>\n      {realm?.internationalizationEnabled && (\n        <FormHelperText>\n          <Alert\n            variant=\"info\"\n            isInline\n            isPlain\n            title={\n              <Trans\n                i18nKey=\"addTranslationsModalSubTitle\"\n                values={{ fieldName: t(fieldName) }}\n              >\n                You are able to translate the fieldName based on your locale or\n                <strong>location</strong>\n              </Trans>\n            }\n          />\n          {getFieldState(requiredTranslationName).error && (\n            <FormErrorText message={t(\"required\")} />\n          )}\n        </FormHelperText>\n      )}\n    </>\n  );\n};\n"],"names":["GlobeRouteIconConfig","GlobeRouteIcon","createIcon","AddTranslationsDialog","orgKey","translationKey","fieldName","toggleDialog","adminClient","useAdminClient","t","useTranslation","realmName","realm","useRealm","combinedLocales","useLocale","whoAmI","useWhoAmI","max","setMax","useState","first","setFirst","filter","setFilter","translations","setTranslations","prefix","beerify","register","setValue","getValues","isValid","useFormContext","setupForm","translation","rowIndex","valueKey","useFetch","selectedLocales","l","localeToDisplayName","selectedLocale","result","index","fetchedData","jsx","Modal","ModalVariant","Button","jsxs","Flex","FlexItem","Trans","Form","FormGroup","TextInput","TextContent","Text","TextVariants","PaginatingTableToolbar","search","ListEmptyState","SearchIcon","Table","Thead","Tr","Th","Tbody","Td","Label","saveTranslations","translationsData","key","debeerify","i18n","hasTranslation","value","isTranslationRequired","TranslatableField","attributeName","control","getFieldState","open","toggle","useToggle","useWatch","requiredTranslationName","useEffect","Fragment","InputGroup","InputGroupItem","FormHelperText","Alert","FormErrorText"],"mappings":"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","x_google_ignoreList":[0]}