{"version":3,"file":"EditClientScope-BkxgbGhH.js","sources":["../../../../../../../src/client-scopes/EditClientScope.tsx"],"sourcesContent":["import ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport type ProtocolMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/protocolMapperRepresentation\";\nimport type { RoleMappingPayload } from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type { ProtocolMapperTypeRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/serverInfoRepesentation\";\nimport {\n  KeycloakSpinner,\n  useAlerts,\n  useFetch,\n  useHelp,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Alert,\n  AlertVariant,\n  ButtonVariant,\n  DropdownItem,\n  PageSection,\n  Tab,\n  TabTitleText,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport {\n  AllClientScopes,\n  ClientScope,\n  ClientScopeDefaultOptionalType,\n  changeScope,\n} from \"../components/client-scope/ClientScopeTypes\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { RoleMapping, Row } from \"../components/role-mapping/RoleMapping\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { convertFormValuesToObject } from \"../util\";\nimport { useParams } from \"../utils/useParams\";\nimport { MapperList } from \"./details/MapperList\";\nimport { ScopeForm } from \"./details/ScopeForm\";\nimport { ClientScopeParams, toClientScope } from \"./routes/ClientScope\";\nimport { toClientScopes } from \"./routes/ClientScopes\";\nimport { toMapper } from \"./routes/Mapper\";\nimport { useAccess } from \"../context/access/Access\";\nimport { AdminEvents } from \"../events/AdminEvents\";\n\nexport default function EditClientScope() {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { realm, realmRepresentation } = useRealm();\n  const { id } = useParams<ClientScopeParams>();\n  const { addAlert, addError } = useAlerts();\n  const { enabled } = useHelp();\n  const [clientScope, setClientScope] =\n    useState<ClientScopeDefaultOptionalType>();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const { hasAccess } = useAccess();\n\n  useFetch(\n    async () => {\n      const clientScope = await adminClient.clientScopes.findOne({ id });\n\n      if (!clientScope) {\n        throw new Error(t(\"notFound\"));\n      }\n\n      return {\n        ...clientScope,\n        type: await determineScopeType(clientScope),\n      };\n    },\n    (clientScope) => {\n      setClientScope(clientScope);\n    },\n    [key, id],\n  );\n\n  async function determineScopeType(clientScope: ClientScopeRepresentation) {\n    const defaultScopes =\n      await adminClient.clientScopes.listDefaultClientScopes();\n    const hasDefaultScope = defaultScopes.find(\n      (defaultScope) => defaultScope.name === clientScope.name,\n    );\n\n    if (hasDefaultScope) {\n      return ClientScope.default;\n    }\n\n    const optionalScopes =\n      await adminClient.clientScopes.listDefaultOptionalClientScopes();\n    const hasOptionalScope = optionalScopes.find(\n      (optionalScope) => optionalScope.name === clientScope.name,\n    );\n\n    return hasOptionalScope ? ClientScope.optional : AllClientScopes.none;\n  }\n\n  const settingsTab = useRoutableTab(\n    toClientScope({ realm, id, tab: \"settings\" }),\n  );\n  const mappersTab = useRoutableTab(\n    toClientScope({ realm, id, tab: \"mappers\" }),\n  );\n  const scopeTab = useRoutableTab(toClientScope({ realm, id, tab: \"scope\" }));\n  const eventsTab = useRoutableTab(toClientScope({ realm, id, tab: \"events\" }));\n\n  const onSubmit = async (formData: ClientScopeDefaultOptionalType) => {\n    const clientScope = convertFormValuesToObject({\n      ...formData,\n      name: formData.name?.trim().replace(/ /g, \"_\"),\n    });\n\n    try {\n      await adminClient.clientScopes.update({ id }, clientScope);\n      await changeScope(adminClient, { ...clientScope, id }, clientScope.type);\n\n      addAlert(t(\"updateSuccessClientScope\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updateErrorClientScope\", error);\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientScope\", {\n      count: 1,\n      name: clientScope?.name,\n    }),\n    messageKey: \"deleteConfirmClientScopes\",\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.clientScopes.del({ id });\n        addAlert(t(\"deletedSuccessClientScope\"), AlertVariant.success);\n        navigate(toClientScopes({ realm }));\n      } catch (error) {\n        addError(\"deleteErrorClientScope\", error);\n      }\n    },\n  });\n\n  const assignRoles = async (rows: Row[]) => {\n    try {\n      const realmRoles = rows\n        .filter((row) => row.client === undefined)\n        .map((row) => row.role as RoleMappingPayload)\n        .flat();\n      await adminClient.clientScopes.addRealmScopeMappings(\n        {\n          id,\n        },\n        realmRoles,\n      );\n      await Promise.all(\n        rows\n          .filter((row) => row.client !== undefined)\n          .map((row) =>\n            adminClient.clientScopes.addClientScopeMappings(\n              {\n                id,\n                client: row.client!.id!,\n              },\n              [row.role as RoleMappingPayload],\n            ),\n          ),\n      );\n      addAlert(t(\"roleMappingUpdatedSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"roleMappingUpdatedError\", error);\n    }\n  };\n\n  const addMappers = async (\n    mappers: ProtocolMapperTypeRepresentation | ProtocolMapperRepresentation[],\n  ): Promise<void> => {\n    if (!Array.isArray(mappers)) {\n      const mapper = mappers as ProtocolMapperTypeRepresentation;\n      navigate(\n        toMapper({\n          realm,\n          id: clientScope!.id!,\n          mapperId: mapper.id!,\n          viewMode: \"new\",\n        }),\n      );\n    } else {\n      try {\n        await adminClient.clientScopes.addMultipleProtocolMappers(\n          { id: clientScope!.id! },\n          mappers as ProtocolMapperRepresentation[],\n        );\n        refresh();\n        addAlert(t(\"mappingCreatedSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"mappingCreatedError\", error);\n      }\n    }\n  };\n\n  const onDelete = async (mapper: ProtocolMapperRepresentation) => {\n    try {\n      await adminClient.clientScopes.delProtocolMapper({\n        id: clientScope!.id!,\n        mapperId: mapper.id!,\n      });\n      addAlert(t(\"mappingDeletedSuccess\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      addError(\"mappingDeletedError\", error);\n    }\n    return true;\n  };\n\n  if (!clientScope) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <DeleteConfirm />\n      <ViewHeader\n        titleKey={clientScope.name!}\n        dropdownItems={[\n          <DropdownItem key=\"delete\" onClick={toggleDeleteDialog}>\n            {t(\"delete\")}\n          </DropdownItem>,\n        ]}\n        badges={[{ text: clientScope.protocol }]}\n        divider={false}\n      />\n\n      <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n        <RoutableTabs isBox mountOnEnter unmountOnExit>\n          <Tab\n            id=\"settings\"\n            data-testid=\"settings\"\n            title={<TabTitleText>{t(\"settings\")}</TabTitleText>}\n            {...settingsTab}\n          >\n            <PageSection variant=\"light\">\n              <ScopeForm save={onSubmit} clientScope={clientScope} />\n            </PageSection>\n          </Tab>\n          <Tab\n            id=\"mappers\"\n            data-testid=\"mappers\"\n            title={<TabTitleText>{t(\"mappers\")}</TabTitleText>}\n            {...mappersTab}\n          >\n            <MapperList\n              model={clientScope}\n              onAdd={addMappers}\n              onDelete={onDelete}\n              detailLink={(id) =>\n                toMapper({\n                  realm,\n                  id: clientScope.id!,\n                  mapperId: id!,\n                  viewMode: \"edit\",\n                })\n              }\n            />\n          </Tab>\n          <Tab\n            id=\"scope\"\n            data-testid=\"scopeTab\"\n            title={<TabTitleText>{t(\"scope\")}</TabTitleText>}\n            {...scopeTab}\n          >\n            {enabled && (\n              <PageSection>\n                <Alert\n                  variant=\"info\"\n                  isInline\n                  title={t(\"clientScopesRolesScope\")}\n                  component=\"h2\"\n                />\n              </PageSection>\n            )}\n            <RoleMapping\n              id={clientScope.id!}\n              name={clientScope.name!}\n              type=\"clientScopes\"\n              save={assignRoles}\n            />\n          </Tab>\n          {realmRepresentation?.adminEventsEnabled &&\n            hasAccess(\"view-events\") && (\n              <Tab\n                data-testid=\"admin-events-tab\"\n                title={<TabTitleText>{t(\"adminEvents\")}</TabTitleText>}\n                {...eventsTab}\n              >\n                <AdminEvents resourcePath={`*client-scopes/${id}`} />\n              </Tab>\n            )}\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["EditClientScope","adminClient","useAdminClient","t","useTranslation","navigate","useNavigate","realm","realmRepresentation","useRealm","id","useParams","addAlert","addError","useAlerts","enabled","useHelp","clientScope","setClientScope","useState","key","setKey","refresh","hasAccess","useAccess","useFetch","determineScopeType","defaultScope","ClientScope","optionalScope","AllClientScopes","settingsTab","useRoutableTab","toClientScope","mappersTab","scopeTab","eventsTab","onSubmit","formData","convertFormValuesToObject","changeScope","AlertVariant","error","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","toClientScopes","assignRoles","rows","realmRoles","row","addMappers","mappers","mapper","toMapper","onDelete","jsxs","Fragment","jsx","ViewHeader","DropdownItem","PageSection","RoutableTabs","Tab","TabTitleText","ScopeForm","MapperList","Alert","RoleMapping","AdminEvents","KeycloakSpinner"],"mappings":"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"}