{"version":3,"file":"NewPolicyDialog-Diogklhm.js","sources":["../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.14_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/TimePicker/TimePickerUtils.js","../../../../../../../../../node_modules/.pnpm/@patternfly+react-icons@5.4.2_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-icons/dist/esm/icons/outlined-clock-icon.js","../../../../../../../../../node_modules/.pnpm/@patternfly+react-tokens@5.4.1/node_modules/@patternfly/react-tokens/dist/esm/c_date_picker__input_c_form_control_Width.js","../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.14_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/TimePicker/TimePicker.js","../../../../../../../../../node_modules/.pnpm/@patternfly+react-icons@5.4.2_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-icons/dist/esm/icons/caret-up-icon.js","../../../../../../../src/components/users/UserSelect.tsx","../../../../../../../src/clients/authorization/DecisionStrategySelect.tsx","../../../../../../../src/clients/authorization/ResourcesPolicySelect.tsx","../../../../../../../src/clients/authorization/policy/Aggregate.tsx","../../../../../../../src/clients/authorization/policy/Client.tsx","../../../../../../../src/clients/scopes/AddScopeDialog.tsx","../../../../../../../src/clients/authorization/policy/ClientScope.tsx","../../../../../../../src/clients/authorization/policy/Group.tsx","../../../../../../../src/clients/authorization/policy/JavaScript.tsx","../../../../../../../src/clients/authorization/policy/LogicSelector.tsx","../../../../../../../src/clients/authorization/policy/NameDescription.tsx","../../../../../../../src/clients/authorization/policy/Regex.tsx","../../../../../../../src/clients/authorization/policy/Role.tsx","../../../../../../../src/clients/authorization/policy/Time.tsx","../../../../../../../src/clients/authorization/policy/User.tsx","../../../../../../../src/clients/authorization/policy/PolicyDetails.tsx","../../../../../../../src/clients/authorization/NewPolicyDialog.tsx"],"sourcesContent":["export const amSuffix = ' AM';\nexport const pmSuffix = ' PM';\nexport const makeTimeOptions = (stepMinutes, hour12, delimiter, minTime, maxTime, includeSeconds) => {\n    const res = [];\n    const iter = new Date(new Date().setHours(0, 0, 0, 0));\n    const iterDay = iter.getDay();\n    while (iter.getDay() === iterDay) {\n        let hour = iter.getHours();\n        let suffix = amSuffix;\n        if (hour12) {\n            if (hour === 0) {\n                hour = 12; // 12am\n            }\n            else if (hour >= 12) {\n                suffix = pmSuffix;\n            }\n            if (hour > 12) {\n                hour %= 12;\n            }\n        }\n        hour = hour12 ? hour.toString() : hour.toString().padStart(2, '0');\n        const minutes = iter.getMinutes().toString().padStart(2, '0');\n        const timeOption = `${hour}${delimiter}${minutes}${hour12 ? suffix : ''}`;\n        // time option is valid if within min/max constraints\n        if (isWithinMinMax(minTime, maxTime, timeOption, delimiter, includeSeconds)) {\n            res.push(timeOption);\n        }\n        iter.setMinutes(iter.getMinutes() + stepMinutes);\n    }\n    return res;\n};\nexport const parseTime = (time, timeRegex, delimiter, is12Hour, includeSeconds) => {\n    const date = new Date(time);\n    // if default time is a ISO 8601 formatted date string, we parse it to hh:mm(am/pm) format\n    if (!isNaN(date.getDate()) && (time instanceof Date || time.includes('T'))) {\n        const hours = is12Hour\n            ? `${date.getHours() > 12 ? date.getHours() - 12 : date.getHours()}`\n            : `${date.getHours()}`.padStart(2, '0');\n        const minutes = `${date.getMinutes()}`.padStart(2, '0');\n        const seconds = includeSeconds ? `${date.getSeconds()}`.padStart(2, '0') : '';\n        const secondsWithDelimiter = seconds ? `${delimiter}${seconds}` : '';\n        let ampm = '';\n        if (is12Hour && date.getHours() > 11) {\n            ampm = pmSuffix;\n        }\n        else if (is12Hour) {\n            ampm = amSuffix;\n        }\n        return `${hours}${delimiter}${minutes}${secondsWithDelimiter}${ampm}`;\n    }\n    else if (typeof time === 'string') {\n        time = time.trim();\n        if (time !== '' && validateTime(time, timeRegex, delimiter, is12Hour)) {\n            const [, hours, minutes, seconds, suffix = ''] = timeRegex.exec(time);\n            const secondsWithDelimiter = includeSeconds ? `${delimiter}${seconds !== null && seconds !== void 0 ? seconds : '00'}` : '';\n            let ampm = '';\n            // Format AM/PM according to design\n            if (is12Hour) {\n                const uppercaseSuffix = suffix.toUpperCase();\n                if (uppercaseSuffix === amSuffix.toUpperCase().trim()) {\n                    ampm = amSuffix;\n                }\n                else if (uppercaseSuffix === pmSuffix.toUpperCase().trim()) {\n                    ampm = pmSuffix;\n                }\n                else {\n                    // if this 12 hour time is missing am/pm but otherwise valid,\n                    // append am/pm depending on time of day\n                    ampm = new Date().getHours() > 11 ? pmSuffix : amSuffix;\n                }\n            }\n            return `${hours}${delimiter}${minutes}${secondsWithDelimiter}${ampm}`;\n        }\n    }\n    return time.toString();\n};\nexport const validateTime = (time, timeRegex, delimiter, is12Hour) => {\n    // ISO 8601 format is valid\n    const date = new Date(time);\n    if (!isNaN(date.getDate()) && time.includes('T')) {\n        return true;\n    }\n    // hours only valid if they are [0-23] or [1-12]\n    const hours = parseInt(time.split(delimiter)[0]);\n    const validHours = hours >= (is12Hour ? 1 : 0) && hours <= (is12Hour ? 12 : 23);\n    // minutes verified by timeRegex\n    // empty string is valid\n    return time === '' || (timeRegex.test(time) && validHours);\n};\nexport const getHours = (time, timeRegex) => {\n    const parts = time.match(timeRegex);\n    if (parts && parts.length) {\n        if (/pm/i.test(parts[4])) {\n            return parseInt(parts[1]) === 12 ? parseInt(parts[1]) : parseInt(parts[1]) + 12;\n        }\n        if (/am/i.test(parts[4])) {\n            return parseInt(parts[1]) === 12 ? 0 : parseInt(parts[1]);\n        }\n        return parseInt(parts[1]);\n    }\n    return null;\n};\nexport const getMinutes = (time, timeRegex) => {\n    const parts = time.match(timeRegex);\n    return parts && parts.length ? parseInt(parts[2]) : null;\n};\nexport const getSeconds = (time, timeRegex) => {\n    var _a;\n    const seconds = (_a = time.match(timeRegex)) === null || _a === void 0 ? void 0 : _a[3];\n    return seconds ? parseInt(seconds) : null;\n};\nexport const isWithinMinMax = (minTime, maxTime, time, delimiter, includeSeconds) => {\n    // do not throw error if empty string\n    if (time.trim() === '') {\n        return true;\n    }\n    // correctly format as 24hr times (12:30AM => 00:30, 1:15 => 01:15)\n    const min24HourTime = convertTo24Hour(minTime, delimiter, includeSeconds);\n    const selected24HourTime = convertTo24Hour(time, delimiter, includeSeconds);\n    const max24HourTime = convertTo24Hour(maxTime, delimiter, includeSeconds);\n    // simple string comparison for 24hr times\n    return min24HourTime <= selected24HourTime && selected24HourTime <= max24HourTime;\n};\nconst convertTo24Hour = (time, delimiter, includeSeconds) => {\n    const timeReg = new RegExp(`^\\\\s*(\\\\d\\\\d?)${delimiter}([0-5]\\\\d)${delimiter}?([0-5]\\\\d)?\\\\s*([AaPp][Mm])?\\\\s*$`);\n    const regMatches = timeReg.exec(time);\n    if (!regMatches || !regMatches.length) {\n        return;\n    }\n    let hours = regMatches[1].padStart(2, '0');\n    const minutes = regMatches[2];\n    let seconds = regMatches[3] ? `${delimiter}${regMatches[3]}` : '';\n    // When seconds is empty and 'includeSeconds' is enabled, append 0 seconds.\n    if (!seconds && includeSeconds) {\n        seconds = `${delimiter}00`;\n    }\n    const suffix = regMatches[4] || '';\n    if (suffix.toUpperCase() === 'PM' && hours !== '12') {\n        hours = `${parseInt(hours) + 12}`;\n    }\n    else if (suffix.toUpperCase() === 'AM' && hours === '12') {\n        hours = '00';\n    }\n    return `${hours}${delimiter}${minutes}${seconds}`;\n};\n//# sourceMappingURL=TimePickerUtils.js.map","import { createIcon } from '../createIcon';\n\nexport const OutlinedClockIconConfig = {\n  name: 'OutlinedClockIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm61.8-104.4l-84.9-61.7c-3.1-2.3-4.9-5.9-4.9-9.7V116c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v141.7l66.8 48.6c5.4 3.9 6.5 11.4 2.6 16.8L334.6 349c-3.9 5.3-11.4 6.5-16.8 2.6z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const OutlinedClockIcon = createIcon(OutlinedClockIconConfig);\n\nexport default OutlinedClockIcon;","export const c_date_picker__input_c_form_control_Width = {\n  \"name\": \"--pf-v5-c-date-picker__input--c-form-control--Width\",\n  \"value\": \"calc(10 * 1ch + calc(2rem + 0.5rem))\",\n  \"var\": \"var(--pf-v5-c-date-picker__input--c-form-control--Width)\"\n};\nexport default c_date_picker__input_c_form_control_Width;","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport datePickerStyles from '@patternfly/react-styles/css/components/DatePicker/date-picker.mjs';\nimport menuStyles from '@patternfly/react-styles/css/components/Menu/menu.mjs';\nimport { getUniqueId } from '../../helpers';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { Menu, MenuContent, MenuList, MenuItem } from '../Menu';\nimport { InputGroup, InputGroupItem } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { KeyTypes } from '../../helpers/constants';\nimport { parseTime, validateTime, makeTimeOptions, amSuffix, pmSuffix, getHours, getMinutes, isWithinMinMax, getSeconds } from './TimePickerUtils';\nimport { HelperText, HelperTextItem } from '../HelperText';\nimport OutlinedClockIcon from '@patternfly/react-icons/dist/esm/icons/outlined-clock-icon';\nimport cssDatePickerFormControlWidth from '@patternfly/react-tokens/dist/esm/c_date_picker__input_c_form_control_Width';\nclass TimePicker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.baseComponentRef = React.createRef();\n        this.toggleRef = React.createRef();\n        this.inputRef = React.createRef();\n        this.menuRef = React.createRef();\n        this.onDocClick = (event) => {\n            var _a, _b, _c, _d;\n            const clickedOnToggle = (_b = (_a = this.toggleRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.contains(event.target);\n            const clickedWithinMenu = (_d = (_c = this.menuRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.contains(event.target);\n            if (this.state.isTimeOptionsOpen && !(clickedOnToggle || clickedWithinMenu)) {\n                this.onToggle(false);\n            }\n        };\n        this.handleGlobalKeys = (event) => {\n            var _a, _b, _c, _d;\n            const { isTimeOptionsOpen, focusedIndex, scrollIndex } = this.state;\n            // keyboard pressed while focus on toggle\n            if ((_b = (_a = this.inputRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.contains(event.target)) {\n                if (!isTimeOptionsOpen && event.key !== KeyTypes.Tab && event.key !== KeyTypes.Escape) {\n                    this.onToggle(true);\n                }\n                else if (isTimeOptionsOpen) {\n                    if (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) {\n                        this.onToggle(false);\n                    }\n                    else if (event.key === KeyTypes.Enter) {\n                        if (focusedIndex !== null) {\n                            this.focusSelection(focusedIndex);\n                            event.stopPropagation();\n                        }\n                        else {\n                            this.onToggle(false);\n                        }\n                    }\n                    else if (event.key === KeyTypes.ArrowDown || event.key === KeyTypes.ArrowUp) {\n                        this.focusSelection(scrollIndex);\n                        this.updateFocusedIndex(0);\n                        event.preventDefault();\n                    }\n                }\n                // keyboard pressed while focus on menu item\n            }\n            else if ((_d = (_c = this.menuRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.contains(event.target)) {\n                if (event.key === KeyTypes.ArrowDown) {\n                    this.updateFocusedIndex(1);\n                    event.preventDefault();\n                }\n                else if (event.key === KeyTypes.ArrowUp) {\n                    this.updateFocusedIndex(-1);\n                    event.preventDefault();\n                }\n                else if (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) {\n                    this.inputRef.current.focus();\n                    this.onToggle(false);\n                }\n            }\n        };\n        this.updateFocusedIndex = (increment) => {\n            this.setState((prevState) => {\n                const maxIndex = this.getOptions().length - 1;\n                let nextIndex = prevState.focusedIndex !== null ? prevState.focusedIndex + increment : prevState.scrollIndex + increment;\n                if (nextIndex < 0) {\n                    nextIndex = maxIndex;\n                }\n                else if (nextIndex > maxIndex) {\n                    nextIndex = 0;\n                }\n                this.scrollToIndex(nextIndex);\n                return {\n                    focusedIndex: nextIndex\n                };\n            });\n        };\n        // fixes issue where menutAppendTo=\"inline\" results in the menu item that should be scrolled to being out of view; this will select the menu item that comes before the intended one, causing that before-item to be placed out of view instead\n        this.getIndexToScroll = (index) => {\n            if (this.props.menuAppendTo === 'inline') {\n                return index > 0 ? index - 1 : 0;\n            }\n            return index;\n        };\n        this.scrollToIndex = (index) => {\n            this.getOptions()[index].closest(`.${menuStyles.menuContent}`).scrollTop =\n                this.getOptions()[this.getIndexToScroll(index)].offsetTop;\n        };\n        this.focusSelection = (index) => {\n            var _a;\n            const indexToFocus = index !== -1 ? index : 0;\n            if ((_a = this.menuRef) === null || _a === void 0 ? void 0 : _a.current) {\n                this.getOptions()[indexToFocus].querySelector(`.${menuStyles.menuItem}`).focus();\n            }\n        };\n        this.scrollToSelection = (time) => {\n            const { delimiter, is24Hour } = this.props;\n            let splitTime = time.split(this.props.delimiter);\n            let focusedIndex = null;\n            // build out the rest of the time assuming hh:00 if it's a partial time\n            if (splitTime.length < 2) {\n                time = `${time}${delimiter}00`;\n                splitTime = time.split(delimiter);\n                // due to only the input including seconds when includeSeconds=true, we need to build a temporary time here without those seconds so that an exact or close match can be scrolled to within the menu (which does not include seconds in any of the options)\n            }\n            else if (splitTime.length > 2) {\n                time = parseTime(time, this.state.timeRegex, delimiter, !is24Hour, false);\n                splitTime = time.split(delimiter);\n            }\n            // for 12hr variant, autoscroll to pm if it's currently the afternoon, otherwise autoscroll to am\n            if (!is24Hour && splitTime.length > 1 && splitTime[1].length < 2) {\n                const minutes = splitTime[1].length === 0 ? '00' : splitTime[1] + '0';\n                time = `${splitTime[0]}${delimiter}${minutes}${new Date().getHours() > 11 ? pmSuffix : amSuffix}`;\n            }\n            else if (!is24Hour &&\n                splitTime.length > 1 &&\n                splitTime[1].length === 2 &&\n                !time.toUpperCase().includes(amSuffix.toUpperCase().trim()) &&\n                !time.toUpperCase().includes(pmSuffix.toUpperCase().trim())) {\n                time = `${time}${new Date().getHours() > 11 ? pmSuffix : amSuffix}`;\n            }\n            let scrollIndex = this.getOptions().findIndex((option) => option.textContent === time);\n            // if we found an exact match, scroll to match and return index of match for focus\n            if (scrollIndex !== -1) {\n                this.scrollToIndex(scrollIndex);\n                focusedIndex = scrollIndex;\n            }\n            else if (splitTime.length === 2) {\n                // no exact match, scroll to closest hour but don't return index for focus\n                let amPm = '';\n                if (!is24Hour) {\n                    if (splitTime[1].toUpperCase().includes('P')) {\n                        amPm = pmSuffix;\n                    }\n                    else if (splitTime[1].toUpperCase().includes('A')) {\n                        amPm = amSuffix;\n                    }\n                }\n                time = `${splitTime[0]}${delimiter}00${amPm}`;\n                scrollIndex = this.getOptions().findIndex((option) => option.textContent === time);\n                if (scrollIndex !== -1) {\n                    this.scrollToIndex(scrollIndex);\n                }\n            }\n            this.setState({\n                focusedIndex,\n                scrollIndex\n            });\n        };\n        this.getRegExp = (includeSeconds = true) => {\n            const { is24Hour, delimiter } = this.props;\n            let baseRegex = `\\\\s*(\\\\d\\\\d?)${delimiter}([0-5]\\\\d)`;\n            if (includeSeconds) {\n                baseRegex += `${delimiter}?([0-5]\\\\d)?`;\n            }\n            return new RegExp(`^${baseRegex}${is24Hour ? '' : '\\\\s*([AaPp][Mm])?'}\\\\s*$`);\n        };\n        this.getOptions = () => {\n            var _a;\n            return (((_a = this.menuRef) === null || _a === void 0 ? void 0 : _a.current)\n                ? Array.from(this.menuRef.current.querySelectorAll(`.${menuStyles.menuListItem}`))\n                : []);\n        };\n        this.isValidFormat = (time) => {\n            if (this.props.validateTime) {\n                return this.props.validateTime(time);\n            }\n            const { delimiter, is24Hour, includeSeconds } = this.props;\n            return validateTime(time, this.getRegExp(includeSeconds), delimiter, !is24Hour);\n        };\n        this.isValidTime = (time) => {\n            const { delimiter, includeSeconds } = this.props;\n            const { minTimeState, maxTimeState } = this.state;\n            return isWithinMinMax(minTimeState, maxTimeState, time, delimiter, includeSeconds);\n        };\n        this.isValid = (time) => this.isValidFormat(time) && this.isValidTime(time);\n        this.onToggle = (isOpen) => {\n            // on close, parse and validate input\n            this.setState((prevState) => {\n                const { timeRegex, isInvalid, timeState } = prevState;\n                const { delimiter, is24Hour, includeSeconds, onChange } = this.props;\n                const time = parseTime(timeState, timeRegex, delimiter, !is24Hour, includeSeconds);\n                // Call onChange when Enter is pressed in input and timeoption does not exist in menu\n                if (onChange && !isOpen && time !== timeState) {\n                    onChange(null, time, getHours(time, timeRegex), getMinutes(time, timeRegex), getSeconds(time, timeRegex), this.isValid(time));\n                }\n                return {\n                    isTimeOptionsOpen: isOpen,\n                    timeState: time,\n                    isInvalid: isOpen ? isInvalid : !this.isValid(time)\n                };\n            });\n            this.props.setIsOpen(isOpen);\n            if (!isOpen) {\n                this.inputRef.current.focus();\n            }\n        };\n        this.onSelect = (e) => {\n            const { timeRegex, timeState } = this.state;\n            const { delimiter, is24Hour, includeSeconds, setIsOpen } = this.props;\n            const time = parseTime(e.target.textContent, timeRegex, delimiter, !is24Hour, includeSeconds);\n            if (time !== timeState) {\n                this.onInputChange(e, time);\n            }\n            this.inputRef.current.focus();\n            this.setState({\n                isTimeOptionsOpen: false,\n                isInvalid: false\n            });\n            setIsOpen(false);\n        };\n        this.onInputClick = (e) => {\n            if (!this.state.isTimeOptionsOpen) {\n                this.onToggle(true);\n            }\n            e.stopPropagation();\n        };\n        this.onInputChange = (event, newTime) => {\n            const { onChange } = this.props;\n            const { timeRegex } = this.state;\n            if (onChange) {\n                onChange(event, newTime, getHours(newTime, timeRegex), getMinutes(newTime, timeRegex), getSeconds(newTime, timeRegex), this.isValid(newTime));\n            }\n            this.scrollToSelection(newTime);\n            this.setState({\n                timeState: newTime\n            });\n        };\n        const { is24Hour, delimiter, time, includeSeconds, isOpen } = this.props;\n        let { minTime, maxTime } = this.props;\n        if (minTime === '') {\n            const minSeconds = includeSeconds ? `${delimiter}00` : '';\n            minTime = is24Hour ? `00${delimiter}00${minSeconds}` : `12${delimiter}00${minSeconds} AM`;\n        }\n        if (maxTime === '') {\n            const maxSeconds = includeSeconds ? `${delimiter}59` : '';\n            maxTime = is24Hour ? `23${delimiter}59${maxSeconds}` : `11${delimiter}59${maxSeconds} PM`;\n        }\n        const timeRegex = this.getRegExp();\n        this.state = {\n            isInvalid: false,\n            isTimeOptionsOpen: isOpen,\n            timeState: parseTime(time, timeRegex, delimiter, !is24Hour, includeSeconds),\n            focusedIndex: null,\n            scrollIndex: 0,\n            timeRegex,\n            minTimeState: parseTime(minTime, timeRegex, delimiter, !is24Hour, includeSeconds),\n            maxTimeState: parseTime(maxTime, timeRegex, delimiter, !is24Hour, includeSeconds)\n        };\n    }\n    componentDidMount() {\n        document.addEventListener('mousedown', this.onDocClick);\n        document.addEventListener('touchstart', this.onDocClick);\n        document.addEventListener('keydown', this.handleGlobalKeys);\n        this.setState({ isInvalid: !this.isValid(this.state.timeState) });\n    }\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.onDocClick);\n        document.removeEventListener('touchstart', this.onDocClick);\n        document.removeEventListener('keydown', this.handleGlobalKeys);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { timeState, isTimeOptionsOpen, isInvalid, timeRegex } = this.state;\n        const { time, is24Hour, delimiter, includeSeconds, isOpen, minTime, maxTime } = this.props;\n        if (prevProps.isOpen !== isOpen) {\n            this.onToggle(isOpen);\n        }\n        if (isTimeOptionsOpen && !prevState.isTimeOptionsOpen && timeState && !isInvalid) {\n            this.scrollToSelection(timeState);\n        }\n        if (delimiter !== prevProps.delimiter) {\n            this.setState({\n                timeRegex: this.getRegExp()\n            });\n        }\n        if (time !== '' && time !== prevProps.time) {\n            const parsedTime = parseTime(time, timeRegex, delimiter, !is24Hour, includeSeconds);\n            this.setState({\n                timeState: parsedTime,\n                isInvalid: !this.isValid(parsedTime)\n            });\n        }\n        if (minTime !== '' && minTime !== prevProps.minTime) {\n            this.setState({\n                minTimeState: parseTime(minTime, timeRegex, delimiter, !is24Hour, includeSeconds)\n            });\n        }\n        if (maxTime !== '' && maxTime !== prevProps.maxTime) {\n            this.setState({\n                maxTimeState: parseTime(maxTime, timeRegex, delimiter, !is24Hour, includeSeconds)\n            });\n        }\n    }\n    render() {\n        const _a = this.props, { 'aria-label': ariaLabel, isDisabled, className, placeholder, id, menuAppendTo, is24Hour, invalidFormatErrorMessage, invalidMinMaxErrorMessage, stepMinutes, width, delimiter, inputProps, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onChange, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        setIsOpen, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        isOpen, time, validateTime, minTime, maxTime, includeSeconds, zIndex } = _a, props = __rest(_a, ['aria-label', \"isDisabled\", \"className\", \"placeholder\", \"id\", \"menuAppendTo\", \"is24Hour\", \"invalidFormatErrorMessage\", \"invalidMinMaxErrorMessage\", \"stepMinutes\", \"width\", \"delimiter\", \"inputProps\", \"onChange\", \"setIsOpen\", \"isOpen\", \"time\", \"validateTime\", \"minTime\", \"maxTime\", \"includeSeconds\", \"zIndex\"]);\n        const { timeState, isTimeOptionsOpen, isInvalid, minTimeState, maxTimeState } = this.state;\n        const style = { [cssDatePickerFormControlWidth.name]: width };\n        const options = makeTimeOptions(stepMinutes, !is24Hour, delimiter, minTimeState, maxTimeState, includeSeconds);\n        const isValidFormat = this.isValidFormat(timeState);\n        const randomId = id || getUniqueId('time-picker');\n        const getParentElement = () => {\n            if (this.baseComponentRef && this.baseComponentRef.current) {\n                return this.baseComponentRef.current.parentElement;\n            }\n            return null;\n        };\n        const menuContainer = (React.createElement(Menu, { ref: this.menuRef, isScrollable: true },\n            React.createElement(MenuContent, { maxMenuHeight: \"200px\" },\n                React.createElement(MenuList, { \"aria-label\": ariaLabel }, options.map((option, index) => (React.createElement(MenuItem, { onClick: this.onSelect, key: option, id: `${randomId}-option-${index}` }, option)))))));\n        const textInput = (React.createElement(TextInput, Object.assign({ \"aria-haspopup\": \"menu\", id: `${randomId}-input`, \"aria-label\": ariaLabel, validated: isInvalid ? 'error' : 'default', placeholder: placeholder, value: timeState || '', type: \"text\", customIcon: React.createElement(OutlinedClockIcon, null), onClick: this.onInputClick, onChange: this.onInputChange, autoComplete: \"off\", isDisabled: isDisabled, isExpanded: isTimeOptionsOpen, ref: this.inputRef }, inputProps)));\n        let calculatedAppendTo;\n        switch (menuAppendTo) {\n            case 'inline':\n                calculatedAppendTo = () => this.toggleRef.current;\n                break;\n            case 'parent':\n                calculatedAppendTo = getParentElement;\n                break;\n            default:\n                calculatedAppendTo = menuAppendTo;\n        }\n        return (React.createElement(\"div\", { ref: this.baseComponentRef, className: css(datePickerStyles.datePicker, className) },\n            React.createElement(\"div\", Object.assign({ className: css(datePickerStyles.datePickerInput), style: style }, props),\n                React.createElement(InputGroup, null,\n                    React.createElement(InputGroupItem, null,\n                        React.createElement(\"div\", { id: randomId },\n                            React.createElement(\"div\", { ref: this.toggleRef, style: { paddingLeft: '0' } },\n                                React.createElement(Popper, { appendTo: calculatedAppendTo, trigger: textInput, triggerRef: this.toggleRef, popper: menuContainer, popperRef: this.menuRef, isVisible: isTimeOptionsOpen, zIndex: zIndex }))))),\n                isInvalid && (React.createElement(\"div\", { className: css(datePickerStyles.datePickerHelperText) },\n                    React.createElement(HelperText, null,\n                        React.createElement(HelperTextItem, { variant: \"error\" }, !isValidFormat ? invalidFormatErrorMessage : invalidMinMaxErrorMessage)))))));\n    }\n}\nTimePicker.displayName = 'TimePicker';\nTimePicker.defaultProps = {\n    className: '',\n    isDisabled: false,\n    time: '',\n    is24Hour: false,\n    invalidFormatErrorMessage: 'Invalid time format',\n    invalidMinMaxErrorMessage: 'Invalid time entered',\n    placeholder: 'hh:mm',\n    delimiter: ':',\n    'aria-label': 'Time picker',\n    width: '150px',\n    menuAppendTo: 'inline',\n    stepMinutes: 30,\n    inputProps: {},\n    minTime: '',\n    maxTime: '',\n    isOpen: false,\n    setIsOpen: () => { },\n    zIndex: 9999\n};\nexport { TimePicker };\n//# sourceMappingURL=TimePicker.js.map","import { createIcon } from '../createIcon';\n\nexport const CaretUpIconConfig = {\n  name: 'CaretUpIcon',\n  height: 512,\n  width: 320,\n  svgPath: 'M288.662 352H31.338c-17.818 0-26.741-21.543-14.142-34.142l128.662-128.662c7.81-7.81 20.474-7.81 28.284 0l128.662 128.662c12.6 12.599 3.676 34.142-14.142 34.142z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const CaretUpIcon = createIcon(CaretUpIconConfig);\n\nexport default CaretUpIcon;","import type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  FormErrorText,\n  HelpItem,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  Chip,\n  ChipGroup,\n  FormGroup,\n  MenuToggle,\n  Select,\n  SelectList,\n  SelectOption,\n  TextInputGroup,\n  TextInputGroupMain,\n  TextInputGroupUtilities,\n} from \"@patternfly/react-core\";\nimport { TimesIcon } from \"@patternfly/react-icons\";\nimport { debounce } from \"lodash-es\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport useToggle from \"../../utils/useToggle\";\nimport type { ComponentProps } from \"../dynamic/components\";\n\ntype UserSelectVariant = \"typeaheadMulti\" | \"typeahead\";\n\ntype UserSelectProps = Omit<ComponentProps, \"convertToName\"> & {\n  variant?: UserSelectVariant;\n  isRequired?: boolean;\n};\n\nexport const UserSelect = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isRequired,\n  variant = \"typeaheadMulti\",\n}: UserSelectProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const {\n    control,\n    getValues,\n    formState: { errors },\n  } = useFormContext();\n  const values: string[] | undefined = getValues(name!);\n\n  const [open, toggleOpen, setOpen] = useToggle();\n  const [selectedUsers, setSelectedUsers] = useState<UserRepresentation[]>([]);\n  const [searchedUsers, setSearchedUsers] = useState<UserRepresentation[]>([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [search, setSearch] = useState(\"\");\n  const textInputRef = useRef<HTMLInputElement>();\n\n  const debounceFn = useCallback(debounce(setSearch, 500), []);\n\n  useFetch(\n    async () => {\n      if (!values) {\n        return [];\n      }\n\n      const foundUsers = await Promise.all(\n        values.map((id) => adminClient.users.findOne({ id })),\n      );\n\n      return foundUsers.filter((user) => user !== undefined);\n    },\n    (users) => {\n      setSelectedUsers(users);\n      if (variant !== \"typeaheadMulti\") {\n        setInputValue(users[0]?.username || \"\");\n      }\n    },\n    [values],\n  );\n\n  useFetch(\n    async () =>\n      adminClient.users.find({\n        username: search,\n        max: 20,\n      }),\n    setSearchedUsers,\n    [search],\n  );\n\n  useEffect(() => {\n    if (!values || values.length === 0) {\n      setSelectedUsers([]);\n      setInputValue(\"\");\n    }\n  }, [values]);\n\n  const users = useMemo(\n    () => [...selectedUsers, ...searchedUsers],\n    [selectedUsers, searchedUsers],\n  );\n\n  const convert = (users: UserRepresentation[]) =>\n    users.map((option) => (\n      <SelectOption\n        key={option.id}\n        value={option.id}\n        selected={values?.includes(option.id!)}\n      >\n        {option.username}\n      </SelectOption>\n    ));\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      isRequired={isRequired}\n      labelIcon={<HelpItem helpText={helpText!} fieldLabelId={t(label!)} />}\n      fieldId={name!}\n    >\n      <Controller\n        name={name!}\n        defaultValue={defaultValue}\n        control={control}\n        rules={\n          isRequired && variant === \"typeaheadMulti\"\n            ? { validate: (value) => value.length > 0 }\n            : { required: isRequired }\n        }\n        render={({ field }) => (\n          <Select\n            id={name!}\n            onOpenChange={toggleOpen}\n            toggle={(ref) => (\n              <MenuToggle\n                data-testid={name!}\n                ref={ref}\n                variant=\"typeahead\"\n                onClick={toggleOpen}\n                isExpanded={open}\n                isFullWidth\n                status={errors[name!] ? \"danger\" : undefined}\n              >\n                <TextInputGroup isPlain>\n                  <TextInputGroupMain\n                    value={inputValue}\n                    onClick={toggleOpen}\n                    onChange={(_, value) => {\n                      setOpen(true);\n                      setInputValue(value);\n                      debounceFn(value);\n                    }}\n                    autoComplete=\"off\"\n                    innerRef={textInputRef}\n                    placeholderText={t(\"selectAUser\")}\n                    {...(field.value && {\n                      \"aria-activedescendant\": field.value,\n                    })}\n                    role=\"combobox\"\n                    isExpanded={open}\n                    aria-controls=\"select-create-typeahead-listbox\"\n                  >\n                    {variant === \"typeaheadMulti\" &&\n                      Array.isArray(field.value) && (\n                        <ChipGroup aria-label=\"Current selections\">\n                          {field.value.map(\n                            (selection: string, index: number) => (\n                              <Chip\n                                key={index}\n                                onClick={(ev) => {\n                                  ev.stopPropagation();\n                                  field.onChange(\n                                    field.value.filter(\n                                      (item: string) => item !== selection,\n                                    ),\n                                  );\n                                }}\n                              >\n                                {\n                                  users.find((u) => u?.id === selection)\n                                    ?.username\n                                }\n                              </Chip>\n                            ),\n                          )}\n                        </ChipGroup>\n                      )}\n                  </TextInputGroupMain>\n                  <TextInputGroupUtilities>\n                    {!!search && (\n                      <Button\n                        variant=\"plain\"\n                        onClick={() => {\n                          setInputValue(\"\");\n                          setSearch(\"\");\n                          field.onChange([]);\n                          textInputRef?.current?.focus();\n                        }}\n                        aria-label=\"Clear input value\"\n                      >\n                        <TimesIcon aria-hidden />\n                      </Button>\n                    )}\n                  </TextInputGroupUtilities>\n                </TextInputGroup>\n              </MenuToggle>\n            )}\n            isOpen={open}\n            selected={field.value}\n            onSelect={(_, v) => {\n              const option = v?.toString();\n              if (variant !== \"typeaheadMulti\") {\n                const removed = field.value.includes(option);\n\n                if (removed) {\n                  field.onChange([]);\n                } else {\n                  field.onChange([option]);\n                }\n\n                setInputValue(\n                  removed\n                    ? \"\"\n                    : users.find((u) => u?.id === option)?.username || \"\",\n                );\n                setOpen(false);\n              } else {\n                const changedValue = field.value.find(\n                  (v: string) => v === option,\n                )\n                  ? field.value.filter((v: string) => v !== option)\n                  : [...field.value, option];\n                field.onChange(changedValue);\n              }\n            }}\n            aria-label={t(name!)}\n          >\n            <SelectList>{convert(searchedUsers)}</SelectList>\n          </Select>\n        )}\n      />\n      {errors[name!] && <FormErrorText message={t(\"required\")} />}\n    </FormGroup>\n  );\n};\n","import { FormGroup, Radio } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\n\nconst DECISION_STRATEGY = [\"UNANIMOUS\", \"AFFIRMATIVE\", \"CONSENSUS\"] as const;\n\ntype DecisionStrategySelectProps = {\n  helpLabel?: string;\n  isDisabled?: boolean;\n  isLimited?: boolean;\n};\n\nexport const DecisionStrategySelect = ({\n  helpLabel,\n  isDisabled = false,\n  isLimited = false,\n}: DecisionStrategySelectProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(\"decisionStrategy\")}\n      labelIcon={\n        <HelpItem\n          helpText={t(helpLabel || \"decisionStrategyHelp\")}\n          fieldLabelId=\"decisionStrategy\"\n        />\n      }\n      fieldId=\"decisionStrategy\"\n      hasNoPaddingTop\n    >\n      <Controller\n        name=\"decisionStrategy\"\n        data-testid=\"decisionStrategy\"\n        defaultValue={DECISION_STRATEGY[0]}\n        control={control}\n        render={({ field }) => (\n          <>\n            {(isLimited\n              ? DECISION_STRATEGY.slice(0, 2)\n              : DECISION_STRATEGY\n            ).map((strategy) => (\n              <Radio\n                id={strategy}\n                key={strategy}\n                data-testid={strategy}\n                isChecked={field.value === strategy}\n                isDisabled={isDisabled}\n                name=\"decisionStrategy\"\n                onChange={() => field.onChange(strategy)}\n                label={t(`decisionStrategies.${strategy}`)}\n                className=\"pf-v5-u-mb-md\"\n              />\n            ))}\n          </>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport type {\n  Clients,\n  PolicyQuery,\n} from \"@keycloak/keycloak-admin-client/lib/resources/clients\";\nimport {\n  KeycloakSelect,\n  SelectVariant,\n  useFetch,\n  Variant,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  ButtonVariant,\n  Chip,\n  ChipGroup,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport {\n  Controller,\n  ControllerRenderProps,\n  useFormContext,\n} from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toCreatePolicy } from \"../routes/NewPolicy\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\nimport { toResourceDetails } from \"../routes/Resource\";\nimport { NewPolicyDialog } from \"./NewPolicyDialog\";\nimport { useIsAdminPermissionsClient } from \"../../utils/useIsAdminPermissionsClient\";\n\ntype Type = \"resources\" | \"policies\";\n\ntype ResourcesPolicySelectProps = {\n  name: Type;\n  clientId: string;\n  permissionId?: string;\n  variant?: Variant;\n  preSelected?: string;\n  isRequired?: boolean;\n};\n\ntype Policies = {\n  id?: string;\n  name?: string;\n  type?: string;\n};\n\ntype TypeMapping = {\n  [key in Type]: {\n    searchFunction: keyof Pick<Clients, \"listPolicies\" | \"listResources\">;\n    fetchFunction: keyof Pick<\n      Clients,\n      \"getAssociatedPolicies\" | \"getAssociatedResources\"\n    >;\n  };\n};\n\nconst typeMapping: TypeMapping = {\n  resources: {\n    searchFunction: \"listResources\",\n    fetchFunction: \"getAssociatedResources\",\n  },\n  policies: {\n    searchFunction: \"listPolicies\",\n    fetchFunction: \"getAssociatedPolicies\",\n  },\n};\n\nexport const ResourcesPolicySelect = ({\n  name,\n  clientId,\n  permissionId,\n  variant = SelectVariant.typeaheadMulti,\n  preSelected,\n  isRequired = false,\n}: ResourcesPolicySelectProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { realm } = useRealm();\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n\n  const {\n    control,\n    formState: { errors, isDirty },\n  } = useFormContext<PolicyRepresentation>();\n  const [items, setItems] = useState<Policies[]>([]);\n  const [search, setSearch] = useState(\"\");\n  const [open, setOpen] = useState(false);\n  const [createPolicyDialog, toggleCreatePolicyDialog] = useToggle();\n  const [policyProviders, setPolicyProviders] =\n    useState<PolicyProviderRepresentation[]>();\n  const [onUnsavedChangesConfirm, setOnUnsavedChangesConfirm] =\n    useState<() => void>();\n  const isAdminPermissionsClient = useIsAdminPermissionsClient(clientId);\n\n  const functions = typeMapping[name];\n\n  const convert = (\n    p: PolicyRepresentation | ResourceRepresentation,\n  ): Policies => ({\n    id: \"_id\" in p ? p._id : \"id\" in p ? p.id : undefined,\n    name: p.name,\n    type: p.type,\n  });\n\n  useFetch(\n    async () => {\n      const params: PolicyQuery = Object.assign(\n        { id: clientId, first: 0, max: 10, permission: \"false\" },\n        search === \"\" ? null : { name: search },\n      );\n      return await Promise.all([\n        adminClient.clients.listPolicyProviders({ id: clientId }),\n        adminClient.clients[functions.searchFunction](params),\n        permissionId\n          ? adminClient.clients[functions.fetchFunction]({\n              id: clientId,\n              permissionId,\n            })\n          : Promise.resolve([]),\n        preSelected && name === \"resources\"\n          ? adminClient.clients.getResource({\n              id: clientId,\n              resourceId: preSelected,\n            })\n          : Promise.resolve([]),\n      ]);\n    },\n    ([providers, ...policies]) => {\n      setPolicyProviders(\n        providers.filter((p) => p.type !== \"resource\" && p.type !== \"scope\"),\n      );\n      setItems(\n        policies\n          .flat()\n          .filter(\n            (r): r is PolicyRepresentation | ResourceRepresentation =>\n              typeof r !== \"string\",\n          )\n          .map(convert)\n          .filter(\n            ({ id }, index, self) =>\n              index === self.findIndex(({ id: otherId }) => id === otherId),\n          ),\n      );\n    },\n    [search],\n  );\n\n  const [toggleUnsavedChangesDialog, UnsavedChangesConfirm] = useConfirmDialog({\n    titleKey: t(\"unsavedChangesTitle\"),\n    messageKey: t(\"unsavedChangesConfirm\"),\n    continueButtonLabel: t(\"continue\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: () => onUnsavedChangesConfirm?.(),\n  });\n\n  const to = (policy: Policies) =>\n    name === \"policies\"\n      ? toPolicyDetails({\n          realm: realm,\n          id: clientId,\n          policyId: policy.id!,\n          policyType: policy.type!,\n        })\n      : toResourceDetails({\n          realm,\n          id: clientId,\n          resourceId: policy.id!,\n        });\n\n  const toSelectOptions = () =>\n    items.map((p) => (\n      <SelectOption key={p.id} value={p.id}>\n        {p.name}\n      </SelectOption>\n    ));\n\n  const toChipGroupItems = (\n    field: ControllerRenderProps<PolicyRepresentation, Type>,\n  ) => {\n    return (\n      <ChipGroup>\n        {field.value?.map((permissionId) => {\n          const item = items.find(\n            (permission) => permission.id === permissionId,\n          );\n\n          if (!item) return;\n\n          const route = to(item);\n          return (\n            <Chip\n              key={item.id}\n              onClick={() => {\n                field.onChange(field.value?.filter((id) => id !== item.id));\n              }}\n            >\n              <Link\n                to={route}\n                onClick={(event) => {\n                  if (isDirty) {\n                    event.preventDefault();\n                    setOnUnsavedChangesConfirm(() => () => navigate(route));\n                    toggleUnsavedChangesDialog();\n                  }\n                }}\n              >\n                {item.name}\n              </Link>\n            </Chip>\n          );\n        })}\n      </ChipGroup>\n    );\n  };\n\n  return (\n    <>\n      <UnsavedChangesConfirm />\n      {createPolicyDialog && (\n        <NewPolicyDialog\n          policyProviders={policyProviders}\n          onSelect={(p) => {\n            navigate(\n              toCreatePolicy({ id: clientId, realm, policyType: p.type! }),\n            );\n          }}\n          toggleDialog={toggleCreatePolicyDialog}\n        />\n      )}\n      <Controller\n        name={name}\n        defaultValue={preSelected ? [preSelected] : []}\n        control={control}\n        rules={{ validate: (value) => !isRequired || value!.length > 0 }}\n        render={({ field }) => (\n          <KeycloakSelect\n            toggleId={name}\n            variant={variant}\n            onToggle={(val) => setOpen(val)}\n            onFilter={(filter) => {\n              setSearch(filter);\n              return toSelectOptions();\n            }}\n            onClear={() => {\n              field.onChange([]);\n              setSearch(\"\");\n            }}\n            selections={\n              variant === SelectVariant.typeaheadMulti\n                ? field.value\n                : items.find((i) => i.id === field.value?.[0])?.name\n            }\n            onSelect={(selectedValue) => {\n              const option = selectedValue.toString();\n              if (variant === SelectVariant.typeaheadMulti) {\n                const changedValue = field.value?.find(\n                  (p: string) => p === option,\n                )\n                  ? field.value.filter((p: string) => p !== option)\n                  : [...field.value!, option];\n                field.onChange(changedValue);\n              } else {\n                field.onChange([option]);\n              }\n\n              setSearch(\"\");\n            }}\n            isOpen={open}\n            aria-label={t(name)}\n            validated={errors[name] ? \"error\" : \"default\"}\n            typeAheadAriaLabel={t(name)}\n            chipGroupComponent={toChipGroupItems(field)}\n            footer={\n              name === \"policies\" && !isAdminPermissionsClient ? (\n                <Button\n                  variant=\"link\"\n                  isInline\n                  onClick={() => {\n                    if (isDirty) {\n                      setOpen(false);\n                      setOnUnsavedChangesConfirm(\n                        () => toggleCreatePolicyDialog,\n                      );\n                      toggleUnsavedChangesDialog();\n                    } else {\n                      toggleCreatePolicyDialog();\n                    }\n                  }}\n                >\n                  {t(\"createPolicy\")}\n                </Button>\n              ) : undefined\n            }\n          >\n            {toSelectOptions()}\n          </KeycloakSelect>\n        )}\n      />\n    </>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { useParams } from \"../../../utils/useParams\";\nimport type { PolicyDetailsParams } from \"../../routes/PolicyDetails\";\nimport { DecisionStrategySelect } from \"../DecisionStrategySelect\";\nimport { ResourcesPolicySelect } from \"../ResourcesPolicySelect\";\nimport { NewPermissionPolicyDetailsParams } from \"../../../permissions-configuration/routes/NewPermissionPolicy\";\n\nexport const Aggregate = () => {\n  const { t } = useTranslation();\n  const { id } = useParams<PolicyDetailsParams>();\n  const { permissionClientId } = useParams<NewPermissionPolicyDetailsParams>();\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"applyPolicy\")}\n        fieldId=\"policies\"\n        labelIcon={\n          <HelpItem helpText={t(\"applyPolicyHelp\")} fieldLabelId=\"policies\" />\n        }\n      >\n        <ResourcesPolicySelect\n          name=\"policies\"\n          clientId={permissionClientId || id}\n        />\n      </FormGroup>\n      <DecisionStrategySelect helpLabel=\"policyDecisionStagey\" />\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { ClientSelect } from \"../../../components/client/ClientSelect\";\n\nexport const Client = () => {\n  const { t } = useTranslation();\n\n  return (\n    <ClientSelect\n      name=\"clients\"\n      label={t(\"clients\")}\n      helpText={t(\"policyClientHelp\")}\n      required\n      defaultValue={[]}\n      variant=\"typeaheadMulti\"\n      clientKey=\"id\"\n    />\n  );\n};\n","import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport { KeycloakSelect } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  MenuToggle,\n  Modal,\n  ModalVariant,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport {\n  CaretDownIcon,\n  CaretUpIcon,\n  FilterIcon,\n} from \"@patternfly/react-icons\";\nimport { useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  ClientScopeType,\n  clientScopeTypesDropdown,\n} from \"../../components/client-scope/ClientScopeTypes\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport useToggle from \"../../utils/useToggle\";\nimport { getProtocolName } from \"../utils\";\n\nimport \"./client-scopes.css\";\n\nexport type AddScopeDialogProps = {\n  clientScopes: ClientScopeRepresentation[];\n  clientName?: string;\n  open: boolean;\n  toggleDialog: () => void;\n  onAdd: (\n    scopes: { scope: ClientScopeRepresentation; type?: ClientScopeType }[],\n  ) => void;\n  isClientScopesConditionType?: boolean;\n};\n\nenum FilterType {\n  Name = \"Name\",\n  Protocol = \"Protocol\",\n}\n\nenum ProtocolType {\n  All = \"All\",\n  SAML = \"SAML\",\n  OpenIDConnect = \"OpenID Connect\",\n}\n\nexport const AddScopeDialog = ({\n  clientScopes: scopes,\n  clientName,\n  open,\n  toggleDialog,\n  onAdd,\n  isClientScopesConditionType,\n}: AddScopeDialogProps) => {\n  const { t } = useTranslation();\n  const [addToggle, setAddToggle] = useState(false);\n  const [rows, setRows] = useState<ClientScopeRepresentation[]>([]);\n  const [filterType, setFilterType] = useState(FilterType.Name);\n  const [protocolType, setProtocolType] = useState(ProtocolType.All);\n\n  const [isFilterTypeDropdownOpen, toggleIsFilterTypeDropdownOpen] =\n    useToggle();\n\n  const [isProtocolTypeDropdownOpen, toggleIsProtocolTypeDropdownOpen] =\n    useToggle(false);\n\n  const clientScopes = useMemo(() => {\n    if (protocolType === ProtocolType.OpenIDConnect) {\n      return scopes.filter((item) => item.protocol === \"openid-connect\");\n    } else if (protocolType === ProtocolType.SAML) {\n      return scopes.filter((item) => item.protocol === \"saml\");\n    }\n    return scopes;\n  }, [scopes, filterType, protocolType]);\n\n  const action = (scope: ClientScopeType) => {\n    const scopes = rows.map((row) => {\n      return { scope: row, type: scope };\n    });\n    onAdd(scopes);\n    setAddToggle(false);\n    toggleDialog();\n  };\n\n  const onFilterTypeDropdownSelect = (filterType: string) => {\n    if (filterType === FilterType.Name) {\n      setFilterType(FilterType.Protocol);\n    } else if (filterType === FilterType.Protocol) {\n      setFilterType(FilterType.Name);\n      setProtocolType(ProtocolType.All);\n    }\n\n    toggleIsFilterTypeDropdownOpen();\n  };\n\n  const onProtocolTypeDropdownSelect = (protocolType: string) => {\n    if (protocolType === ProtocolType.SAML) {\n      setProtocolType(ProtocolType.SAML);\n    } else if (protocolType === ProtocolType.OpenIDConnect) {\n      setProtocolType(ProtocolType.OpenIDConnect);\n    } else if (protocolType === ProtocolType.All) {\n      setProtocolType(ProtocolType.All);\n    }\n\n    toggleIsProtocolTypeDropdownOpen();\n  };\n\n  const protocolTypeOptions = [\n    <SelectOption key={1} value={ProtocolType.SAML}>\n      {t(\"protocolTypes.saml\")}\n    </SelectOption>,\n    <SelectOption key={2} value={ProtocolType.OpenIDConnect}>\n      {t(\"protocolTypes.openid-connect\")}\n    </SelectOption>,\n    <SelectOption key={3} value={ProtocolType.All}>\n      {t(\"protocolTypes.all\")}\n    </SelectOption>,\n  ];\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={\n        isClientScopesConditionType\n          ? t(\"addClientScope\")\n          : t(\"addClientScopesTo\", { clientName })\n      }\n      isOpen={open}\n      onClose={toggleDialog}\n      actions={\n        isClientScopesConditionType\n          ? [\n              <Button\n                id=\"modal-add\"\n                data-testid=\"confirm\"\n                key=\"add\"\n                variant={ButtonVariant.primary}\n                onClick={() => {\n                  const scopes = rows.map((scope) => ({ scope }));\n                  onAdd(scopes);\n                  toggleDialog();\n                }}\n                isDisabled={rows.length === 0}\n              >\n                {t(\"add\")}\n              </Button>,\n              <Button\n                id=\"modal-cancel\"\n                data-testid=\"cancel\"\n                key=\"cancel\"\n                variant={ButtonVariant.link}\n                onClick={() => {\n                  setRows([]);\n                  toggleDialog();\n                }}\n              >\n                {t(\"cancel\")}\n              </Button>,\n            ]\n          : [\n              <Dropdown\n                popperProps={{\n                  direction: \"up\",\n                }}\n                onOpenChange={(isOpen) => setAddToggle(isOpen)}\n                className=\"keycloak__client-scopes-add__add-dropdown\"\n                key=\"add-dropdown\"\n                isOpen={addToggle}\n                toggle={(ref) => (\n                  <MenuToggle\n                    ref={ref}\n                    isDisabled={rows.length === 0}\n                    onClick={() => setAddToggle(!addToggle)}\n                    variant=\"primary\"\n                    id=\"add-dropdown\"\n                    data-testid=\"add-dropdown\"\n                    statusIcon={<CaretUpIcon />}\n                  >\n                    {t(\"add\")}\n                  </MenuToggle>\n                )}\n              >\n                <DropdownList>\n                  {clientScopeTypesDropdown(t, action)}\n                </DropdownList>\n              </Dropdown>,\n              <Button\n                id=\"modal-cancel\"\n                key=\"cancel\"\n                variant={ButtonVariant.link}\n                onClick={() => {\n                  setRows([]);\n                  toggleDialog();\n                }}\n              >\n                {t(\"cancel\")}\n              </Button>,\n            ]\n      }\n    >\n      <KeycloakDataTable\n        loader={clientScopes}\n        ariaLabelKey=\"chooseAMapperType\"\n        searchPlaceholderKey={\n          filterType === FilterType.Name ? \"searchForClientScope\" : undefined\n        }\n        isSearching={filterType !== FilterType.Name}\n        searchTypeComponent={\n          <Dropdown\n            onSelect={() => {\n              onFilterTypeDropdownSelect(filterType);\n            }}\n            onOpenChange={toggleIsFilterTypeDropdownOpen}\n            toggle={(ref) => (\n              <MenuToggle\n                ref={ref}\n                data-testid=\"filter-type-dropdown\"\n                id=\"toggle-id-9\"\n                onClick={toggleIsFilterTypeDropdownOpen}\n                icon={<FilterIcon />}\n                statusIcon={<CaretDownIcon />}\n              >\n                {filterType}\n              </MenuToggle>\n            )}\n            isOpen={isFilterTypeDropdownOpen}\n          >\n            <DropdownList>\n              <DropdownItem\n                data-testid=\"filter-type-dropdown-item\"\n                key=\"filter-type\"\n              >\n                {filterType === FilterType.Name ? t(\"protocol\") : t(\"name\")}\n              </DropdownItem>\n            </DropdownList>\n          </Dropdown>\n        }\n        toolbarItem={\n          filterType === FilterType.Protocol && (\n            <>\n              <Dropdown\n                onSelect={() => {\n                  onFilterTypeDropdownSelect(filterType);\n                }}\n                onOpenChange={toggleIsFilterTypeDropdownOpen}\n                data-testid=\"filter-type-dropdown\"\n                toggle={(ref) => (\n                  <MenuToggle\n                    ref={ref}\n                    id=\"toggle-id-9\"\n                    onClick={toggleIsFilterTypeDropdownOpen}\n                    statusIcon={<CaretDownIcon />}\n                    icon={<FilterIcon />}\n                  >\n                    {filterType}\n                  </MenuToggle>\n                )}\n                isOpen={isFilterTypeDropdownOpen}\n              >\n                <DropdownList>\n                  <DropdownItem\n                    data-testid=\"filter-type-dropdown-item\"\n                    key=\"filter-type\"\n                  >\n                    {t(\"name\")}\n                  </DropdownItem>\n                </DropdownList>\n              </Dropdown>\n              <KeycloakSelect\n                className=\"kc-protocolType-select\"\n                aria-label={t(\"selectOne\")}\n                onToggle={toggleIsProtocolTypeDropdownOpen}\n                onSelect={(value) =>\n                  onProtocolTypeDropdownSelect(value.toString())\n                }\n                selections={protocolType}\n                isOpen={isProtocolTypeDropdownOpen}\n              >\n                {protocolTypeOptions}\n              </KeycloakSelect>\n            </>\n          )\n        }\n        canSelectAll\n        onSelect={(rows) => setRows(rows)}\n        columns={[\n          {\n            name: \"name\",\n          },\n          {\n            name: \"protocol\",\n            displayKey: \"protocol\",\n            cellRenderer: (client) =>\n              getProtocolName(t, client.protocol ?? \"openid-connect\"),\n          },\n          {\n            name: \"description\",\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyAddClientScopes\")}\n            instructions={t(\"emptyAddClientScopesInstructions\")}\n          />\n        }\n      />\n    </Modal>\n  );\n};\n","import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport { HelpItem, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport { Button, Checkbox, FormGroup } from \"@patternfly/react-core\";\nimport { MinusCircleIcon } from \"@patternfly/react-icons\";\nimport { Table, Tbody, Td, Th, Thead, Tr } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../../admin-client\";\nimport useLocaleSort, { mapByKey } from \"../../../utils/useLocaleSort\";\nimport { AddScopeDialog } from \"../../scopes/AddScopeDialog\";\n\nexport type RequiredIdValue = {\n  id: string;\n  required: boolean;\n};\n\nexport const ClientScope = () => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { control, getValues, setValue } = useFormContext<{\n    clientScopes: RequiredIdValue[];\n  }>();\n\n  const [open, setOpen] = useState(false);\n  const [scopes, setScopes] = useState<ClientScopeRepresentation[]>([]);\n  const [selectedScopes, setSelectedScopes] = useState<\n    ClientScopeRepresentation[]\n  >([]);\n\n  const localeSort = useLocaleSort();\n\n  useFetch(\n    () => adminClient.clientScopes.find(),\n    (scopes = []) => {\n      const clientScopes = getValues(\"clientScopes\") || [];\n      setSelectedScopes(\n        clientScopes.map((s) => scopes.find((c) => c.id === s.id)!),\n      );\n      setScopes(localeSort(scopes, mapByKey(\"name\")));\n    },\n    [],\n  );\n\n  return (\n    <FormGroup\n      label={t(\"clientScopes\")}\n      labelIcon={\n        <HelpItem\n          helpText={t(\"clientsClientScopesHelp\")}\n          fieldLabelId=\"clientScopes\"\n        />\n      }\n      fieldId=\"clientScopes\"\n    >\n      <Controller\n        name=\"clientScopes\"\n        control={control}\n        defaultValue={[]}\n        render={({ field }) => (\n          <>\n            {open && (\n              <AddScopeDialog\n                clientScopes={scopes.filter(\n                  (scope) =>\n                    !field.value\n                      .map((c: RequiredIdValue) => c.id)\n                      .includes(scope.id!),\n                )}\n                isClientScopesConditionType\n                open={open}\n                toggleDialog={() => setOpen(!open)}\n                onAdd={(scopes) => {\n                  setSelectedScopes([\n                    ...selectedScopes,\n                    ...scopes.map((s) => s.scope),\n                  ]);\n                  field.onChange([\n                    ...field.value,\n                    ...scopes\n                      .map((scope) => scope.scope)\n                      .map((item) => ({ id: item.id!, required: false })),\n                  ]);\n                }}\n              />\n            )}\n            <Button\n              data-testid=\"select-scope-button\"\n              variant=\"secondary\"\n              onClick={() => {\n                setOpen(true);\n              }}\n            >\n              {t(\"addClientScopes\")}\n            </Button>\n          </>\n        )}\n      />\n      {selectedScopes.length > 0 && (\n        <Table variant=\"compact\">\n          <Thead>\n            <Tr>\n              <Th>{t(\"clientScopeTitle\")}</Th>\n              <Th>{t(\"required\")}</Th>\n              <Th aria-hidden=\"true\" />\n            </Tr>\n          </Thead>\n          <Tbody>\n            {selectedScopes.map((scope, index) => (\n              <Tr key={scope.id}>\n                <Td>{scope.name}</Td>\n                <Td>\n                  <Controller\n                    name={`clientScopes.${index}.required`}\n                    defaultValue={false}\n                    control={control}\n                    render={({ field }) => (\n                      <Checkbox\n                        id=\"required\"\n                        data-testid=\"standard\"\n                        name=\"required\"\n                        isChecked={field.value}\n                        onChange={field.onChange}\n                      />\n                    )}\n                  />\n                </Td>\n                <Td>\n                  <Button\n                    variant=\"link\"\n                    className=\"keycloak__client-authorization__policy-row-remove\"\n                    icon={<MinusCircleIcon />}\n                    onClick={() => {\n                      setValue(\"clientScopes\", [\n                        ...getValues(\"clientScopes\").filter(\n                          (s) => s.id !== scope.id,\n                        ),\n                      ]);\n                      setSelectedScopes([\n                        ...selectedScopes.filter((s) => s.id !== scope.id),\n                      ]);\n                    }}\n                  />\n                </Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </Table>\n      )}\n    </FormGroup>\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { HelpItem, TextControl, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport { Button, Checkbox, FormGroup } from \"@patternfly/react-core\";\nimport { MinusCircleIcon } from \"@patternfly/react-icons\";\nimport { Table, Tbody, Td, Th, Thead, Tr } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../../admin-client\";\nimport { GroupPickerDialog } from \"../../../components/group/GroupPickerDialog\";\n\ntype GroupForm = {\n  groups?: GroupValue[];\n  groupsClaim: string;\n};\n\nexport type GroupValue = {\n  id: string;\n  extendChildren: boolean;\n};\n\nexport const Group = () => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { control, getValues, setValue } = useFormContext<GroupForm>();\n  const values = getValues(\"groups\");\n\n  const [open, setOpen] = useState(false);\n  const [selectedGroups, setSelectedGroups] = useState<GroupRepresentation[]>(\n    [],\n  );\n\n  useFetch(\n    () => {\n      if (values && values.length > 0)\n        return Promise.all(\n          values.map((g) => adminClient.groups.findOne({ id: g.id })),\n        );\n      return Promise.resolve([]);\n    },\n    (groups) => {\n      const filteredGroup = groups.filter((g) => g) as GroupRepresentation[];\n      setSelectedGroups(filteredGroup);\n    },\n    [],\n  );\n\n  return (\n    <>\n      <TextControl\n        name=\"groupsClaim\"\n        label={t(\"groupsClaim\")}\n        labelIcon={t(\"groupsClaimHelp\")}\n      />\n      <FormGroup\n        label={t(\"groups\")}\n        labelIcon={\n          <HelpItem helpText={t(\"policyGroupsHelp\")} fieldLabelId=\"groups\" />\n        }\n        fieldId=\"groups\"\n      >\n        <Controller\n          name=\"groups\"\n          control={control}\n          defaultValue={[]}\n          render={({ field }) => (\n            <>\n              {open && (\n                <GroupPickerDialog\n                  type=\"selectMany\"\n                  text={{\n                    title: \"addGroupsToGroupPolicy\",\n                    ok: \"add\",\n                  }}\n                  onConfirm={(groups) => {\n                    field.onChange([\n                      ...(field.value || []),\n                      ...(groups || []).map(({ id }) => ({ id })),\n                    ]);\n                    setSelectedGroups([...selectedGroups, ...(groups || [])]);\n                    setOpen(false);\n                  }}\n                  onClose={() => {\n                    setOpen(false);\n                  }}\n                  filterGroups={selectedGroups}\n                />\n              )}\n              <Button\n                data-testid=\"select-group-button\"\n                variant=\"secondary\"\n                onClick={() => {\n                  setOpen(true);\n                }}\n              >\n                {t(\"addGroups\")}\n              </Button>\n            </>\n          )}\n        />\n        {selectedGroups.length > 0 && (\n          <Table variant=\"compact\">\n            <Thead>\n              <Tr>\n                <Th>{t(\"groups\")}</Th>\n                <Th>{t(\"extendToChildren\")}</Th>\n                <Th aria-hidden=\"true\" />\n              </Tr>\n            </Thead>\n            <Tbody>\n              {selectedGroups.map((group, index) => (\n                <Tr key={group.id}>\n                  <Td>{group.path}</Td>\n                  <Td>\n                    <Controller\n                      name={`groups.${index}.extendChildren`}\n                      defaultValue={false}\n                      control={control}\n                      render={({ field }) => (\n                        <Checkbox\n                          id=\"extendChildren\"\n                          data-testid=\"standard\"\n                          name=\"extendChildren\"\n                          isChecked={field.value}\n                          onChange={field.onChange}\n                          isDisabled={group.subGroupCount === 0}\n                        />\n                      )}\n                    />\n                  </Td>\n                  <Td>\n                    <Button\n                      variant=\"link\"\n                      className=\"keycloak__client-authorization__policy-row-remove\"\n                      icon={<MinusCircleIcon />}\n                      onClick={() => {\n                        setValue(\"groups\", [\n                          ...(values || []).filter(({ id }) => id !== group.id),\n                        ]);\n                        setSelectedGroups([\n                          ...selectedGroups.filter(({ id }) => id !== group.id),\n                        ]);\n                      }}\n                    />\n                  </Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </Table>\n        )}\n      </FormGroup>\n    </>\n  );\n};\n","import { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { FormGroup } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport CodeEditor from \"../../../components/form/CodeEditor\";\n\nexport const JavaScript = () => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(\"code\")}\n      labelIcon={\n        <HelpItem helpText={t(\"policyCodeHelp\")} fieldLabelId=\"code\" />\n      }\n      fieldId=\"code\"\n      isRequired\n    >\n      <Controller\n        name=\"code\"\n        defaultValue=\"\"\n        control={control}\n        render={({ field }) => (\n          <CodeEditor\n            id=\"code\"\n            data-testid=\"code\"\n            readOnly\n            value={field.value}\n            language=\"js\"\n            height={600}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { FormGroup, Radio } from \"@patternfly/react-core\";\n\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\n\nconst LOGIC_TYPES = [\"POSITIVE\", \"NEGATIVE\"] as const;\n\ntype LogicSelectorProps = {\n  isDisabled?: boolean;\n};\n\nexport const LogicSelector = ({ isDisabled }: LogicSelectorProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(\"logic\")}\n      labelIcon={<HelpItem helpText={t(\"logicHelp\")} fieldLabelId=\"logic\" />}\n      fieldId=\"logic\"\n      hasNoPaddingTop\n    >\n      <Controller\n        name=\"logic\"\n        data-testid=\"logic\"\n        defaultValue={LOGIC_TYPES[0]}\n        control={control}\n        render={({ field }) => (\n          <>\n            {LOGIC_TYPES.map((type) => (\n              <Radio\n                id={type}\n                key={type}\n                data-testid={type}\n                isChecked={field.value === type}\n                name=\"logic\"\n                onChange={() => field.onChange(type)}\n                label={t(`logicType.${type.toLowerCase()}`)}\n                className=\"pf-v5-u-mb-md\"\n                isDisabled={isDisabled}\n              />\n            ))}\n          </>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { TextAreaControl, TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport { useIsAdminPermissionsClient } from \"../../../utils/useIsAdminPermissionsClient\";\n\ntype NameDescriptionProps = {\n  isDisabled?: boolean;\n  clientId?: string;\n};\n\nexport const NameDescription = ({\n  isDisabled,\n  clientId,\n}: NameDescriptionProps) => {\n  const { t } = useTranslation();\n  const isAdminPermissionsClient = useIsAdminPermissionsClient(clientId!);\n\n  return (\n    <>\n      <TextControl\n        name=\"name\"\n        label={t(\"name\")}\n        labelIcon={isAdminPermissionsClient ? t(\"permissionNameHelpText\") : \"\"}\n        rules={{ required: t(\"required\") }}\n        isDisabled={isDisabled}\n      />\n      <TextAreaControl\n        name=\"description\"\n        label={t(\"description\")}\n        rules={{\n          maxLength: { message: t(\"maxLength\", { length: 255 }), value: 255 },\n        }}\n        isDisabled={isDisabled}\n      />\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { SwitchControl, TextControl } from \"@keycloak/keycloak-ui-shared\";\n\nexport const Regex = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <TextControl\n        name=\"targetClaim\"\n        label={t(\"targetClaim\")}\n        labelIcon={t(\"targetClaimHelp\")}\n        rules={{ required: t(\"required\") }}\n      />\n      <TextControl\n        name=\"pattern\"\n        label={t(\"regexPattern\")}\n        labelIcon={t(\"regexPatternHelp\")}\n        rules={{ required: t(\"required\") }}\n      />\n      <SwitchControl\n        name=\"targetContextAttributes\"\n        label={t(\"targetContextAttributes\")}\n        labelIcon={t(\"targetContextAttributesHelp\")}\n        labelOn={t(\"yes\")}\n        labelOff={t(\"no\")}\n      />\n    </>\n  );\n};\n","import { HelpItem, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport { Button, Checkbox, FormGroup } from \"@patternfly/react-core\";\nimport { MinusCircleIcon } from \"@patternfly/react-icons\";\nimport { Table, Tbody, Td, Th, Thead, Tr } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../../admin-client\";\nimport { DefaultSwitchControl } from \"../../../components/SwitchControl\";\nimport { AddRoleMappingModal } from \"../../../components/role-mapping/AddRoleMappingModal\";\nimport { Row, ServiceRole } from \"../../../components/role-mapping/RoleMapping\";\nimport type { RequiredIdValue } from \"./ClientScope\";\n\nexport const Role = () => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { control, getValues, setValue } = useFormContext<{\n    roles?: RequiredIdValue[];\n    fetchRoles?: boolean;\n  }>();\n  const values = getValues(\"roles\");\n\n  const [open, setOpen] = useState(false);\n  const [selectedRoles, setSelectedRoles] = useState<Row[]>([]);\n\n  useFetch(\n    async () => {\n      if (values && values.length > 0) {\n        const roles = await Promise.all(\n          values.map((r) => adminClient.roles.findOneById({ id: r.id })),\n        );\n        return Promise.all(\n          roles.map(async (role) => ({\n            role: role!,\n            client: role!.clientRole\n              ? await adminClient.clients.findOne({\n                  id: role?.containerId!,\n                })\n              : undefined,\n          })),\n        );\n      }\n      return Promise.resolve([]);\n    },\n    setSelectedRoles,\n    [],\n  );\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"roles\")}\n        labelIcon={\n          <HelpItem helpText={t(\"policyRolesHelp\")} fieldLabelId=\"roles\" />\n        }\n        fieldId=\"roles\"\n      >\n        <Controller\n          name=\"roles\"\n          control={control}\n          defaultValue={[]}\n          render={({ field }) => (\n            <>\n              {open && (\n                <AddRoleMappingModal\n                  id=\"role\"\n                  type=\"roles\"\n                  title={t(\"assignRole\")}\n                  onAssign={(rows) => {\n                    field.onChange([\n                      ...(field.value || []),\n                      ...rows.map((row) => ({ id: row.role.id })),\n                    ]);\n                    setSelectedRoles([...selectedRoles, ...rows]);\n                    setOpen(false);\n                  }}\n                  onClose={() => {\n                    setOpen(false);\n                  }}\n                />\n              )}\n              <Button\n                data-testid=\"select-role-button\"\n                variant=\"secondary\"\n                onClick={() => {\n                  setOpen(true);\n                }}\n              >\n                {t(\"addRoles\")}\n              </Button>\n            </>\n          )}\n        />\n        {selectedRoles.length > 0 && (\n          <Table variant=\"compact\">\n            <Thead>\n              <Tr>\n                <Th>{t(\"roles\")}</Th>\n                <Th>{t(\"required\")}</Th>\n                <Th aria-hidden=\"true\" />\n              </Tr>\n            </Thead>\n            <Tbody>\n              {selectedRoles.map((row, index) => (\n                <Tr key={row.role.id}>\n                  <Td>\n                    <ServiceRole role={row.role} client={row.client} />\n                  </Td>\n                  <Td>\n                    <Controller\n                      name={`roles.${index}.required`}\n                      defaultValue={false}\n                      control={control}\n                      render={({ field }) => (\n                        <Checkbox\n                          id=\"required\"\n                          data-testid=\"standard\"\n                          name=\"required\"\n                          isChecked={field.value}\n                          onChange={field.onChange}\n                        />\n                      )}\n                    />\n                  </Td>\n                  <Td>\n                    <Button\n                      variant=\"link\"\n                      className=\"keycloak__client-authorization__policy-row-remove\"\n                      icon={<MinusCircleIcon />}\n                      onClick={() => {\n                        setValue(\"roles\", [\n                          ...(values || []).filter((s) => s.id !== row.role.id),\n                        ]);\n                        setSelectedRoles([\n                          ...selectedRoles.filter(\n                            (s) => s.role.id !== row.role.id,\n                          ),\n                        ]);\n                      }}\n                    />\n                  </Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </Table>\n        )}\n      </FormGroup>\n      <DefaultSwitchControl\n        name=\"fetchRoles\"\n        label={t(\"fetchRoles\")}\n        labelIcon={t(\"fetchRolesHelp\")}\n      />\n    </>\n  );\n};\n","import {\n  DatePicker,\n  Flex,\n  FlexItem,\n  FormGroup,\n  NumberInput,\n  Radio,\n  Split,\n  SplitItem,\n  TimePicker,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormErrorText, HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { useTranslation } from \"react-i18next\";\nimport { Controller, useFormContext } from \"react-hook-form\";\n\nconst DATE_TIME_FORMAT = /(\\d\\d\\d\\d-\\d\\d-\\d\\d)? (\\d\\d?):(\\d\\d?)/;\nconst padDateSegment = (value: number) => value.toString().padStart(2, \"0\");\n\nconst DateTime = ({ name }: { name: string }) => {\n  const { control } = useFormContext();\n\n  const parseDate = (value: string, date?: Date): string => {\n    if (!date) {\n      return value;\n    }\n\n    const parts = DATE_TIME_FORMAT.exec(value);\n    const parsedDate = [\n      date.getFullYear(),\n      padDateSegment(date.getMonth() + 1),\n      padDateSegment(date.getDate()),\n    ].join(\"-\");\n\n    return `${parsedDate} ${parts ? parts[2] : \"00\"}:${\n      parts ? parts[3] : \"00\"\n    }:00`;\n  };\n\n  const parseTime = (\n    value: string,\n    hour?: number | null,\n    minute?: number | null,\n  ): string => {\n    const parts = DATE_TIME_FORMAT.exec(value);\n    if (minute !== undefined && minute !== null) {\n      return `${parts ? parts[1] : \"\"} ${hour}:${\n        minute < 10 ? `0${minute}` : minute\n      }:00`;\n    }\n    return value;\n  };\n\n  return (\n    <Controller\n      name={name}\n      defaultValue=\"\"\n      control={control}\n      rules={{ required: true }}\n      render={({ field }) => {\n        const dateTime = field.value.match(DATE_TIME_FORMAT) || [\n          \"\",\n          \"\",\n          \"0\",\n          \"00\",\n        ];\n        return (\n          <Split hasGutter id={name}>\n            <SplitItem>\n              <DatePicker\n                value={dateTime[1]}\n                onChange={(event, value, date) => {\n                  field.onChange(parseDate(field.value, date));\n                }}\n              />\n            </SplitItem>\n            <SplitItem>\n              <TimePicker\n                time={`${dateTime[2]}:${dateTime[3]}`}\n                onChange={(event, time, hour, minute) =>\n                  field.onChange(parseTime(field.value, hour, minute))\n                }\n                is24Hour\n              />\n            </SplitItem>\n          </Split>\n        );\n      }}\n    />\n  );\n};\n\ntype NumberControlProps = {\n  name: string;\n  min: number;\n  max: number;\n};\n\nconst NumberControl = ({ name, min, max }: NumberControlProps) => {\n  const { control } = useFormContext();\n  const setValue = (newValue: number) => Math.min(newValue, max);\n\n  return (\n    <Controller\n      name={name}\n      defaultValue=\"\"\n      control={control}\n      render={({ field }) => (\n        <NumberInput\n          id={name}\n          value={field.value}\n          min={min}\n          max={max}\n          onPlus={() => field.onChange(Number(field.value) + 1)}\n          onMinus={() => field.onChange(Number(field.value) - 1)}\n          onChange={(event) => {\n            const newValue = Number(event.currentTarget.value);\n            field.onChange(setValue(!isNaN(newValue) ? newValue : 0));\n          }}\n        />\n      )}\n    />\n  );\n};\n\nconst FromTo = ({ name, ...rest }: NumberControlProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <FormGroup\n      label={t(name)}\n      fieldId={name}\n      labelIcon={<HelpItem helpText={t(`${name}Help`)} fieldLabelId={name} />}\n    >\n      <Split hasGutter>\n        <SplitItem>\n          <NumberControl name={name} {...rest} />\n        </SplitItem>\n        <SplitItem>{t(\"to\")}</SplitItem>\n        <SplitItem>\n          <NumberControl name={`${name}End`} {...rest} />\n        </SplitItem>\n      </Split>\n    </FormGroup>\n  );\n};\n\nexport const Time = () => {\n  const { t } = useTranslation();\n  const {\n    getValues,\n    formState: { errors },\n  } = useFormContext();\n  const [repeat, setRepeat] = useState(getValues(\"month\"));\n  return (\n    <>\n      <FormGroup\n        label={t(\"repeat\")}\n        fieldId=\"repeat\"\n        labelIcon={\n          <HelpItem helpText={t(\"repeatHelp\")} fieldLabelId=\"repeat\" />\n        }\n      >\n        <Flex>\n          <FlexItem>\n            <Radio\n              id=\"notRepeat\"\n              data-testid=\"notRepeat\"\n              isChecked={!repeat}\n              name=\"repeat\"\n              onChange={() => setRepeat(false)}\n              label={t(\"notRepeat\")}\n              className=\"pf-v5-u-mb-md\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Radio\n              id=\"repeat\"\n              data-testid=\"repeat\"\n              isChecked={repeat}\n              name=\"repeat\"\n              onChange={() => setRepeat(true)}\n              label={t(\"repeat\")}\n              className=\"pf-v5-u-mb-md\"\n            />\n          </FlexItem>\n        </Flex>\n      </FormGroup>\n      {repeat && (\n        <>\n          <FromTo name=\"month\" min={1} max={12} />\n          <FromTo name=\"dayMonth\" min={1} max={31} />\n          <FromTo name=\"hour\" min={0} max={23} />\n          <FromTo name=\"minute\" min={0} max={59} />\n        </>\n      )}\n      <FormGroup\n        label={t(\"startTime\")}\n        fieldId=\"notBefore\"\n        labelIcon={\n          <HelpItem helpText={t(\"startTimeHelp\")} fieldLabelId=\"startTime\" />\n        }\n        isRequired\n      >\n        <DateTime name=\"notBefore\" />\n        {errors.notBefore && <FormErrorText message={t(\"required\")} />}\n      </FormGroup>\n      <FormGroup\n        label={t(\"expireTime\")}\n        fieldId=\"notOnOrAfter\"\n        labelIcon={\n          <HelpItem helpText={t(\"expireTimeHelp\")} fieldLabelId=\"expireTime\" />\n        }\n        isRequired\n      >\n        <DateTime name=\"notOnOrAfter\" />\n        {errors.notOnOrAfter && <FormErrorText message={t(\"required\")} />}\n      </FormGroup>\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { UserSelect } from \"../../../components/users/UserSelect\";\n\nexport const User = () => {\n  const { t } = useTranslation();\n  return (\n    <UserSelect\n      name=\"users\"\n      label=\"users\"\n      helpText={t(\"policyUsers\")}\n      defaultValue={[]}\n      variant=\"typeaheadMulti\"\n    />\n  );\n};\n","import type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport { useAlerts, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { useState, type JSX } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../../admin-client\";\nimport { useConfirmDialog } from \"../../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../../components/form/FormAccess\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { ViewHeader } from \"../../../components/view-header/ViewHeader\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { toAuthorizationTab } from \"../../routes/AuthenticationTab\";\nimport {\n  PolicyDetailsParams,\n  toPolicyDetails,\n} from \"../../routes/PolicyDetails\";\nimport { useIsAdminPermissionsClient } from \"../../../utils/useIsAdminPermissionsClient\";\nimport { toPermissionsConfigurationTabs } from \"../../../permissions-configuration/routes/PermissionsConfigurationTabs\";\nimport { NewPermissionPolicyDetailsParams } from \"../../../permissions-configuration/routes/NewPermissionPolicy\";\nimport { toPermissionPolicyDetails } from \"../../../permissions-configuration/routes/PermissionPolicyDetails\";\nimport { Aggregate } from \"./Aggregate\";\nimport { Client } from \"./Client\";\nimport { ClientScope, RequiredIdValue } from \"./ClientScope\";\nimport { Group, GroupValue } from \"./Group\";\nimport { JavaScript } from \"./JavaScript\";\nimport { LogicSelector } from \"./LogicSelector\";\nimport { NameDescription } from \"./NameDescription\";\nimport { Regex } from \"./Regex\";\nimport { Role } from \"./Role\";\nimport { Time } from \"./Time\";\nimport { User } from \"./User\";\n\nimport \"./policy-details.css\";\n\ntype Policy = Omit<PolicyRepresentation, \"roles\"> & {\n  groups?: GroupValue[];\n  clientScopes?: RequiredIdValue[];\n  roles?: RequiredIdValue[];\n};\n\nconst COMPONENTS: {\n  [index: string]: () => JSX.Element;\n} = {\n  aggregate: Aggregate,\n  client: Client,\n  user: User,\n  \"client-scope\": ClientScope,\n  group: Group,\n  regex: Regex,\n  role: Role,\n  time: Time,\n  js: JavaScript,\n} as const;\n\nexport const isValidComponentType = (value: string) => value in COMPONENTS;\n\nexport default function PolicyDetails() {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation();\n  const { id, realm, policyId, policyType } = useParams<PolicyDetailsParams>();\n  const { permissionClientId } = useParams<NewPermissionPolicyDetailsParams>();\n  const navigate = useNavigate();\n  const form = useForm();\n  const { reset, handleSubmit } = form;\n  const { addAlert, addError } = useAlerts();\n  const [policy, setPolicy] = useState<PolicyRepresentation>();\n  const isDisabled = policyType === \"js\";\n  const isAdminPermissionsClient =\n    useIsAdminPermissionsClient(permissionClientId);\n\n  useFetch(\n    async () => {\n      if (policyId) {\n        const result = await Promise.all([\n          adminClient.clients.findOnePolicy({\n            id: permissionClientId ?? id,\n            type: policyType!,\n            policyId,\n          }) as PolicyRepresentation | undefined,\n          adminClient.clients.getAssociatedPolicies({\n            id: permissionClientId ?? id,\n            permissionId: policyId,\n          }),\n        ]);\n\n        if (!result[0]) {\n          throw new Error(t(\"notFound\"));\n        }\n\n        return {\n          policy: result[0],\n          policies: result[1].map((p) => p.id),\n        };\n      }\n      return {};\n    },\n    ({ policy, policies }) => {\n      reset({ ...policy, policies });\n      setPolicy(policy);\n    },\n    [permissionClientId, id, policyType, policyId],\n  );\n\n  const onSubmitPolicy = async (policy: Policy) => {\n    policy.groups = policy.groups?.filter((g) => g.id);\n    policy.clientScopes = policy.clientScopes?.filter((c) => c.id);\n    policy.roles = policy.roles\n      ?.filter((r) => r.id)\n      .map((r) => ({ ...r, required: r.required || false }));\n\n    const clientId = isAdminPermissionsClient ? permissionClientId : id;\n    const navigateTo = isAdminPermissionsClient\n      ? toPermissionPolicyDetails\n      : toPolicyDetails;\n\n    try {\n      if (policyId) {\n        await adminClient.clients.updatePolicy(\n          { id: clientId!, type: policyType!, policyId },\n          policy,\n        );\n      } else {\n        const result = await adminClient.clients.createPolicy(\n          { id: clientId!, type: policyType! },\n          policy,\n        );\n\n        navigate(\n          navigateTo({\n            realm: realm!,\n            id: clientId!,\n            permissionClientId: clientId!,\n            policyId: result.id!,\n            policyType: result.type!,\n          }),\n        );\n      }\n      addAlert(\n        t((policyId ? \"update\" : \"create\") + \"PolicySuccess\"),\n        AlertVariant.success,\n      );\n    } catch (error) {\n      addError(\"policySaveError\", error);\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deletePolicy\",\n    messageKey: \"deletePolicyConfirm\",\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delPolicy({\n          id: isAdminPermissionsClient ? permissionClientId : id,\n          policyId,\n        });\n        addAlert(t(\"policyDeletedSuccess\"), AlertVariant.success);\n        navigate(\n          isAdminPermissionsClient\n            ? toPermissionsConfigurationTabs({\n                realm: realm!,\n                permissionClientId,\n                tab: \"policies\",\n              })\n            : toAuthorizationTab({ realm, clientId: id, tab: \"policies\" }),\n        );\n      } catch (error) {\n        addError(\"policyDeletedError\", error);\n      }\n    },\n  });\n\n  if (policyId && !policy) {\n    return <KeycloakSpinner />;\n  }\n\n  function getComponentType() {\n    return isValidComponentType(policyType)\n      ? COMPONENTS[policyType]\n      : COMPONENTS[\"js\"];\n  }\n\n  const ComponentType = getComponentType();\n\n  return (\n    <>\n      <DeleteConfirm />\n      <ViewHeader\n        titleKey={\n          policyId ? policy?.name! : t(\"createPolicyOfType\", { policyType })\n        }\n        dropdownItems={\n          policyId\n            ? [\n                <DropdownItem\n                  key=\"delete\"\n                  data-testid=\"delete-policy\"\n                  onClick={() => toggleDeleteDialog()}\n                >\n                  {t(\"delete\")}\n                </DropdownItem>,\n              ]\n            : undefined\n        }\n      />\n      <PageSection variant=\"light\">\n        <FormAccess\n          isHorizontal\n          onSubmit={handleSubmit((policy) => onSubmitPolicy(policy))}\n          role=\"anyone\" // if you get this far it means you have access\n        >\n          <FormProvider {...form}>\n            <NameDescription isDisabled={isDisabled} />\n            <ComponentType />\n            <LogicSelector isDisabled={isDisabled} />\n          </FormProvider>\n          <ActionGroup>\n            <div className=\"pf-v5-u-mt-md\">\n              <Button\n                isDisabled={isDisabled}\n                variant={ButtonVariant.primary}\n                className=\"pf-v5-u-mr-md\"\n                type=\"submit\"\n                data-testid=\"save\"\n              >\n                {t(\"save\")}\n              </Button>\n\n              <Button\n                variant=\"link\"\n                data-testid=\"cancel\"\n                component={(props) => (\n                  <Link\n                    {...props}\n                    to={\n                      isAdminPermissionsClient\n                        ? toPermissionsConfigurationTabs({\n                            realm: realm!,\n                            permissionClientId,\n                            tab: \"policies\",\n                          })\n                        : toAuthorizationTab({\n                            realm,\n                            clientId: id,\n                            tab: \"policies\",\n                          })\n                    }\n                  />\n                )}\n              >\n                {t(\"cancel\")}\n              </Button>\n            </div>\n          </ActionGroup>\n        </FormAccess>\n      </PageSection>\n    </>\n  );\n}\n","import { useTranslation } from \"react-i18next\";\nimport {\n  Modal,\n  ModalVariant,\n  TextContent,\n  Text,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { Table, Tbody, Td, Th, Thead, Tr } from \"@patternfly/react-table\";\n\nimport type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport { isValidComponentType } from \"./policy/PolicyDetails\";\nimport { useMemo } from \"react\";\nimport useLocaleSort, { mapByKey } from \"../../utils/useLocaleSort\";\n\ntype NewPolicyDialogProps = {\n  policyProviders?: PolicyProviderRepresentation[];\n  toggleDialog: () => void;\n  onSelect: (provider: PolicyProviderRepresentation) => void;\n};\n\nexport const NewPolicyDialog = ({\n  policyProviders,\n  onSelect,\n  toggleDialog,\n}: NewPolicyDialogProps) => {\n  const { t } = useTranslation();\n  const localeSort = useLocaleSort();\n\n  const sortedPolicies = useMemo(\n    () =>\n      policyProviders ? localeSort(policyProviders, mapByKey(\"name\")) : [],\n    [policyProviders],\n  );\n\n  return (\n    <Modal\n      aria-label={t(\"createPolicy\")}\n      variant={ModalVariant.medium}\n      header={\n        <TextContent>\n          <Text component={TextVariants.h1}>{t(\"chooseAPolicyType\")}</Text>\n          <Text>{t(\"chooseAPolicyTypeInstructions\")}</Text>\n        </TextContent>\n      }\n      isOpen\n      onClose={toggleDialog}\n    >\n      <Table aria-label={t(\"policies\")} variant=\"compact\">\n        <Thead>\n          <Tr>\n            <Th>{t(\"name\")}</Th>\n            <Th>{t(\"description\")}</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {sortedPolicies.map((provider) => (\n            <Tr\n              key={provider.type}\n              data-testid={provider.type}\n              onRowClick={() => onSelect(provider)}\n              isClickable\n            >\n              <Td>{provider.name}</Td>\n              <Td style={{ textWrap: \"wrap\" }}>\n                {isValidComponentType(provider.type!) &&\n                  t(`policyProvider.${provider.type}`)}\n              </Td>\n            </Tr>\n          ))}\n        </Tbody>\n      </Table>\n    </Modal>\n  );\n};\n"],"names":["amSuffix","pmSuffix","makeTimeOptions","stepMinutes","hour12","delimiter","minTime","maxTime","includeSeconds","res","iter","iterDay","hour","suffix","minutes","timeOption","isWithinMinMax","parseTime","time","timeRegex","is12Hour","date","hours","seconds","secondsWithDelimiter","ampm","validateTime","uppercaseSuffix","validHours","getHours","parts","getMinutes","getSeconds","_a","min24HourTime","convertTo24Hour","selected24HourTime","max24HourTime","regMatches","OutlinedClockIconConfig","OutlinedClockIcon","createIcon","c_date_picker__input_c_form_control_Width","TimePicker","React","props","event","_b","_c","_d","clickedOnToggle","clickedWithinMenu","isTimeOptionsOpen","focusedIndex","scrollIndex","KeyTypes","increment","prevState","maxIndex","nextIndex","index","menuStyles","indexToFocus","is24Hour","splitTime","option","amPm","baseRegex","minTimeState","maxTimeState","isOpen","isInvalid","timeState","onChange","e","setIsOpen","newTime","minSeconds","maxSeconds","prevProps","parsedTime","ariaLabel","isDisabled","className","placeholder","id","menuAppendTo","invalidFormatErrorMessage","invalidMinMaxErrorMessage","width","inputProps","zIndex","__rest","style","cssDatePickerFormControlWidth","options","isValidFormat","randomId","getUniqueId","getParentElement","menuContainer","Menu","MenuContent","MenuList","MenuItem","textInput","TextInput","calculatedAppendTo","css","datePickerStyles","InputGroup","InputGroupItem","Popper","HelperText","HelperTextItem","CaretUpIconConfig","CaretUpIcon","UserSelect","name","label","helpText","defaultValue","isRequired","variant","adminClient","useAdminClient","t","useTranslation","control","getValues","errors","useFormContext","values","open","toggleOpen","setOpen","useToggle","selectedUsers","setSelectedUsers","useState","searchedUsers","setSearchedUsers","inputValue","setInputValue","search","setSearch","textInputRef","useRef","debounceFn","useCallback","debounce","useFetch","user","users","useEffect","useMemo","convert","jsx","SelectOption","jsxs","FormGroup","HelpItem","Controller","value","field","Select","ref","MenuToggle","TextInputGroup","TextInputGroupMain","_","ChipGroup","selection","Chip","ev","item","u","TextInputGroupUtilities","Button","TimesIcon","v","removed","changedValue","SelectList","FormErrorText","DECISION_STRATEGY","DecisionStrategySelect","helpLabel","isLimited","Fragment","strategy","Radio","typeMapping","ResourcesPolicySelect","clientId","permissionId","SelectVariant","preSelected","realm","useRealm","navigate","useNavigate","isDirty","items","setItems","createPolicyDialog","toggleCreatePolicyDialog","policyProviders","setPolicyProviders","onUnsavedChangesConfirm","setOnUnsavedChangesConfirm","isAdminPermissionsClient","useIsAdminPermissionsClient","functions","p","params","providers","policies","r","self","otherId","toggleUnsavedChangesDialog","UnsavedChangesConfirm","useConfirmDialog","ButtonVariant","to","policy","toPolicyDetails","toResourceDetails","toSelectOptions","toChipGroupItems","permission","route","Link","NewPolicyDialog","toCreatePolicy","KeycloakSelect","val","filter","i","selectedValue","Aggregate","useParams","permissionClientId","Client","ClientSelect","AddScopeDialog","scopes","clientName","toggleDialog","onAdd","isClientScopesConditionType","addToggle","setAddToggle","rows","setRows","filterType","setFilterType","protocolType","setProtocolType","isFilterTypeDropdownOpen","toggleIsFilterTypeDropdownOpen","isProtocolTypeDropdownOpen","toggleIsProtocolTypeDropdownOpen","clientScopes","action","scope","row","onFilterTypeDropdownSelect","onProtocolTypeDropdownSelect","protocolTypeOptions","Modal","ModalVariant","Dropdown","DropdownList","clientScopeTypesDropdown","KeycloakDataTable","FilterIcon","CaretDownIcon","DropdownItem","client","getProtocolName","ListEmptyState","ClientScope","setValue","setScopes","selectedScopes","setSelectedScopes","localeSort","useLocaleSort","s","c","mapByKey","Table","Thead","Tr","Th","Tbody","Td","Checkbox","MinusCircleIcon","Group","selectedGroups","setSelectedGroups","g","groups","filteredGroup","TextControl","GroupPickerDialog","group","JavaScript","CodeEditor","LOGIC_TYPES","LogicSelector","type","NameDescription","TextAreaControl","Regex","SwitchControl","Role","selectedRoles","setSelectedRoles","roles","role","AddRoleMappingModal","ServiceRole","DefaultSwitchControl","DATE_TIME_FORMAT","padDateSegment","DateTime","parseDate","minute","dateTime","Split","SplitItem","DatePicker","NumberControl","min","max","newValue","NumberInput","FromTo","rest","Time","repeat","setRepeat","Flex","FlexItem","User","COMPONENTS","isValidComponentType","PolicyDetails","policyId","policyType","form","useForm","reset","handleSubmit","addAlert","addError","useAlerts","setPolicy","result","onSubmitPolicy","navigateTo","toPermissionPolicyDetails","AlertVariant","error","toggleDeleteDialog","DeleteConfirm","toPermissionsConfigurationTabs","toAuthorizationTab","KeycloakSpinner","getComponentType","ComponentType","ViewHeader","PageSection","FormAccess","FormProvider","ActionGroup","onSelect","sortedPolicies","TextContent","Text","TextVariants","provider"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}